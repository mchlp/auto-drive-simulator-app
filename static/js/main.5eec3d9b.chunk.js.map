{"version":3,"sources":["redux/store.js","redux/actions/index.js","redux/reducers/rootReducer.js","utils/Utils.js","../../auto-drive-simulator-api/src/constants.js","renderers/RoadRenderer.js","renderers/LocationRenderer.js","renderers/IntersectionRenderer.js","renderers/VehicleRenderer.js","utils/MapDataHandler.js","renderers/MapRenderer.js","components/Map.jsx","builder/ComponentFinder.js","components/LowFpsModal.jsx","components/MenuSection.jsx","components/SelectedDisplay.jsx","components/NavigateSection.jsx","components/MenuSettings.jsx","components/MapStats.jsx","components/Menu.jsx","components/MapViewer.jsx","components/MapBuilder.jsx","App.js","index.js"],"names":["store","reduxConstants","VIEW_MAP","CREATE_MAP","actionTypes","actionCreators","followCurTripVehicle","type","payload","canvasOffset","zoomFactor","zoomOffsetFromViewCentre","canvasPropsDiff","canvasProps","canvasDimensions","curMode","selectedComponent","hoveredComponent","showDynamicLabels","showStaticLabels","showToggleDynamicLabels","showFpsWarning","curTripVehicleId","mapDataLoaded","avgUpdatesPerSecond","avgRendersPerSecond","INITIAL_STATE","averageUpdatesPerSecond","Number","POSITIVE_INFINITY","averageRendersPerSecond","APP_MODE_LIST","showLabels","dynamic","static","showLowFpsWarning","shownLowFpsWarning","width","height","centerX","centerY","zoom","left","top","rootReducer","curState","action","zoomCenterInCanvas","x","y","getStore","Utils","this","shortUuidGenerator","generate","getState","right","bottom","canvasCoordinateArray","radius","canvasCutoffs","getCanvasViewCutoffs","withinLeft","withinRight","withinTop","withinBottom","waypointName","mapData","startsWith","intersections","coord","locations","arrayCoord1","arrayCoord2","squareSum","i","length","Math","pow","sqrt","arrayCoord","map","mapSingleCoord","unmapSingleCoord","singleCoord","index","scaledCoord","scaleSingleCoord","unscaledCoord","unscaleSingleCoord","shortUuid","constants","flickrBase58","LEFT","RIGHT","SPAWNED","DEPARTURE_READY","EN_ROUTE","ARRIVED","TYPES","LOCAL","MINOR","MAJOR","WIDTH","TOWARDS_START","TOWARDS_END","INTERSECTION_RADIUS","LOCATION_RADIUS","VEHICLE_RADIUS","RoadRenderer","ctx","drawRoadLines","mode","Object","entries","roads","forEach","roadEntry","roadData","startCoord","mapArrayCoord","getCoordFromWaypoint","start","endCoord","end","ROAD_TYPES","lineWidth","strokeStyle","lineJoin","setLineDash","beginPath","moveTo","lineTo","stroke","roadSlope","roadPerpSlopeNormalized","LocationRenderer","locationEntry","locationId","locationData","checkCoordinateInCanvasView","DISPLAY","fillStyle","arc","PI","fill","font","strokeWidth","strokeText","fillText","IntersectionRenderer","intersectionEntry","intersectionId","intersectionData","VehicleRenderer","vehicles","vehicleEntry","vehicleId","vehicleData","miterLimit","text","originId","destinationId","MapDataHandler","lastUpdateTime","performance","now","lastReduxUpdateTime","updateMapDataListener","data","mapDataLoadedBefore","dispatch","setMapDataLoaded","curVehicleId","console","log","coords","setCanvasProps","setFollowCurTripVehicle","setCurTripVehicleId","lastUpdateTimeElapsed","lastUpdateTimeElapsedList","push","shift","reduce","a","b","setAverageUpdatesPerSecond","init","socket","on","cleanup","off","MapRenderer","staticCanvas","getMapData","getShowLabels","canvasWidth","canvasHeight","staticCtx","getContext","clearRect","fillRect","logoImage","Image","src","onload","drawImage","render","dynamicCanvas","dynamicCtx","getCurTripVehicleId","statisCanvas","_renderStatic","_renderDynamic","lastRenderTimeElapsed","lastRenderTime","lastRenderTimeElapsedList","setAverageRendersPerSecond","connect","state","mapLoaded","staticCanvasRef","useRef","dynamicCanvasRef","canvasContainerRef","useEffect","setCanvasDimensions","window","innerHeight","innerWidth","dragging","lastDragCoord","keyDownHandler","event","deltaX","deltaY","key","setCanvasPropsDiff","addEventListener","removeEventListener","onZoom","useCallback","preventDefault","stopPropagation","pageX","pageY","curZoomFactor","setCanvasPropsZoom","zoomCenterInCanvasView","current","offsetLeft","offsetTop","setCanvasOffset","curCanvasContainerRef","passive","requestAnimationFrame","renderMap","renderAll","onDragEnd","lastDragEvent","setShowToggleDynamicLabels","onMouseDown","screenX","screenY","onMouseUp","onMouseLeave","onMouseMove","lastCoord","curCoord","ref","style","position","zIndex","ComponetFinder","intersectionFinder","mapCoordinates","pointerRadius","excludeIdList","includes","getDistanceBetweenArrayCoords","id","locationFinder","findComponent","finderFuncs","func","component","LowFpsModal","isOpen","setIsOpen","className","Modal","toggle","ModalHeader","ModalBody","ModalFooter","Button","color","onClick","MenuSection","IconClass","sectionName","children","openInitial","useState","showChildren","setShowChildren","AiFillMinusSquare","AiFillPlusSquare","display","justifyContent","alignContent","alignItems","cursor","oldShowChildren","Content","componentData","toFixed","fontSize","curTripVehicleData","setCurTripVehicleData","startTripResListener","startTripRes","locationList","values","sort","selectOptionStyle","flexDirection","checked","onChange","target","htmlFor","userSelect","Label","for","Input","name","location","startWaypointId","endWaypointId","document","getElementById","value","emit","setShowDynamicLabels","padding","setCurMode","statRowStyle","keys","background","margin","flexWrap","borderRadius","curPointerRadius","curPointerComponentId","cursorStyle","containerRef","getMapCoordinatesFromMouseEvent","canvasCoordinates","unmapArrayCoord","setShowFpsWarning","open","curHoveredComponent","ComponentFinder","setHoveredComponent","setSelectedComponent","POINTER_TYPE","prevSavedMapData","JSON","parse","localStorage","getItem","rawMapData","roadStartWaypointId","setRoadStartWaypointId","roadType","setRoadType","curHoverComponent","setCurHoverComponent","setCurSelectComponent","setMapData","curPointerType","setCurPointerType","saveMapData","setSaveMapData","lastSavedTime","setItem","getSerializedMap","serializedMap","generateShortUuid","stringify","deleteComponent","newMapData","roadId","Alert","readOnly","prevMapData","nextIntersectionId","nextLocationId","nextRoadId","onHoverComponentChanged","newHoverComponent","onSelectComponentChange","newSelectComponent","disconnect","socketUrl","io","ReactDOM","StrictMode","createStore","composeWithDevTools","applyMiddleware","thunk"],"mappings":"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","file":"static/js/main.5eec3d9b.chunk.js","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nlet store;\n\nfunction configureStore() {\n    store = createStore(\n        rootReducer,\n        composeWithDevTools(applyMiddleware(thunk))\n    );\n    return store;\n}\n\nfunction getStore() {\n    return store;\n}\n\nexport { configureStore, getStore };\n","const reduxConstants = {};\nreduxConstants.APP_MODE_LIST = {\n    VIEW_MAP: 'view_map',\n    CREATE_MAP: 'create_map',\n};\n\nconst actionTypes = {\n    UPDATE_MAP_DATA_LOADED: 'UPDATE_MAP_DATA_LOADED',\n    UPDATE_AVERAGE_RENDERS_PER_SECOND: 'UPDATE_AVERAGE_RENDERS_PER_SECOND',\n    UPDATE_AVERAGE_UPDATES_PER_SECOND: 'UPDATE_AVERAGE_UPDATES_PER_SECOND',\n    UPDATE_CUR_MODE: 'UPDATE_CUR_MODE',\n    UPDATE_SELECTED_COMPONENT: 'UPDATE_SELECTED_COMPONENT',\n    UPDATE_HOVERED_COMPONENT: 'UPDATE_HOVERED_COMPONENT',\n    UPDATE_SHOW_DYNAMIC_LABELS: 'UPDATE_SHOW_DYNAMIC_LABELS',\n    UPDATE_SHOW_STATIC_LABELS: 'UPDATE_SHOW_STATIC_LABELS',\n    UPDATE_SHOW_TOGGLE_DYNAMIC_LABELS: 'UPDATE_SHOW_TOGGLE_DYNAMIC_LABELS',\n    UPDATE_SHOW_FPS_WARNING: 'UPDATE_SHOW_FPS_WARNING',\n    UPDATE_CUR_TRIP_VEHICLE_ID: 'UPDATE_CUR_TRIP_VEHICLE_ID',\n    UPDATE_FOLLOW_CUR_TRIP_VEHICLE: 'UPDATE_FOLLOW_CUR_TRIP_VEHICLE',\n    UPDATE_CANVAS_DIMENSIONS: 'UPDATE_CANVAS_DIMENSIONS',\n    UPDATE_CANVAS_PROPS_BY_DIFF: 'UPDATE_CANVAS_PROPS_BY_DIFF',\n    UPDATE_CANVAS_PROPS: 'UPDATE_CANVAS_PROPS',\n    UPDATE_CANVAS_PROPS_BY_ZOOM_FACTOR: 'UPDATE_CANVAS_PROPS_BY_ZOOM_FACTOR',\n    UPDATE_CANVAS_OFFSET: 'UPDATE_CANVAS_OFFSET',\n};\n\nconst actionCreators = {};\n\nactionCreators.setFollowCurTripVehicle = (followCurTripVehicle) => ({\n    type: actionTypes.UPDATE_FOLLOW_CUR_TRIP_VEHICLE,\n    payload: followCurTripVehicle,\n});\n\nactionCreators.setCanvasOffset = (canvasOffset) => ({\n    type: actionTypes.UPDATE_CANVAS_OFFSET,\n    payload: canvasOffset,\n});\n\nactionCreators.setCanvasPropsZoom = (zoomFactor, zoomOffsetFromViewCentre) => ({\n    type: actionTypes.UPDATE_CANVAS_PROPS_BY_ZOOM_FACTOR,\n    payload: { zoomOffsetFromViewCentre, zoomFactor },\n});\n\nactionCreators.setCanvasPropsDiff = (canvasPropsDiff) => ({\n    type: actionTypes.UPDATE_CANVAS_PROPS_BY_DIFF,\n    payload: canvasPropsDiff,\n});\n\nactionCreators.setCanvasProps = (canvasProps) => ({\n    type: actionTypes.UPDATE_CANVAS_PROPS,\n    payload: canvasProps,\n});\n\nactionCreators.setCanvasDimensions = (canvasDimensions) => ({\n    type: actionTypes.UPDATE_CANVAS_DIMENSIONS,\n    payload: canvasDimensions,\n});\n\nactionCreators.setCurMode = (curMode) => ({\n    type: actionTypes.UPDATE_CUR_MODE,\n    payload: curMode,\n});\n\nactionCreators.setSelectedComponent = (selectedComponent) => ({\n    type: actionTypes.UPDATE_SELECTED_COMPONENT,\n    payload: selectedComponent,\n});\n\nactionCreators.setHoveredComponent = (hoveredComponent) => ({\n    type: actionTypes.UPDATE_HOVERED_COMPONENT,\n    payload: hoveredComponent,\n});\n\nactionCreators.setShowDynamicLabels = (showDynamicLabels) => ({\n    type: actionTypes.UPDATE_SHOW_DYNAMIC_LABELS,\n    payload: showDynamicLabels,\n});\n\nactionCreators.setShowStaticLabels = (showStaticLabels) => ({\n    type: actionTypes.UPDATE_SHOW_STATIC_LABELS,\n    payload: showStaticLabels,\n});\n\nactionCreators.setShowToggleDynamicLabels = (showToggleDynamicLabels) => ({\n    type: actionTypes.UPDATE_SHOW_TOGGLE_DYNAMIC_LABELS,\n    payload: showToggleDynamicLabels,\n});\n\nactionCreators.setShowFpsWarning = (showFpsWarning) => ({\n    type: actionTypes.UPDATE_SHOW_FPS_WARNING,\n    payload: showFpsWarning,\n});\n\nactionCreators.setCurTripVehicleId = (curTripVehicleId) => ({\n    type: actionTypes.UPDATE_CUR_TRIP_VEHICLE_ID,\n    payload: curTripVehicleId,\n});\n\nactionCreators.setMapDataLoaded = (mapDataLoaded) => ({\n    type: actionTypes.UPDATE_MAP_DATA_LOADED,\n    payload: mapDataLoaded,\n});\n\nactionCreators.setAverageUpdatesPerSecond = (avgUpdatesPerSecond) => ({\n    type: actionTypes.UPDATE_AVERAGE_UPDATES_PER_SECOND,\n    payload: avgUpdatesPerSecond,\n});\n\nactionCreators.setAverageRendersPerSecond = (avgRendersPerSecond) => ({\n    type: actionTypes.UPDATE_AVERAGE_RENDERS_PER_SECOND,\n    payload: avgRendersPerSecond,\n});\n\nexport { actionCreators, reduxConstants, actionTypes };\n","import { reduxConstants, actionTypes } from '../actions';\n\nconst INITIAL_STATE = {\n    mapDataLoaded: false,\n    averageUpdatesPerSecond: Number.POSITIVE_INFINITY,\n    averageRendersPerSecond: Number.POSITIVE_INFINITY,\n    curMode: reduxConstants.APP_MODE_LIST.VIEW_MAP,\n    selectedComponent: null,\n    hoveredComponent: null,\n    showLabels: {\n        dynamic: true,\n        static: true,\n    },\n    curTripVehicleId: null,\n    followCurTripVehicle: false,\n    showToggleDynamicLabels: true,\n    showLowFpsWarning: false,\n    shownLowFpsWarning: false,\n    canvasDimensions: {\n        width: 0,\n        height: 0,\n    },\n    canvasProps: {\n        centerX: 0,\n        centerY: 0,\n        zoom: 0.5,\n    },\n    canvasOffset: {\n        left: 0,\n        top: 0,\n    },\n};\n\nconst rootReducer = (curState = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case actionTypes.UPDATE_FOLLOW_CUR_TRIP_VEHICLE: {\n            return {\n                ...curState,\n                followCurTripVehicle: action.payload,\n                canvasProps: {\n                    ...curState.canvasProps,\n                    zoom: action.payload ? 1 : curState.canvasProps.zoom,\n                },\n            };\n        }\n        case actionTypes.UPDATE_CANVAS_OFFSET: {\n            return {\n                ...curState,\n                canvasOffset: {\n                    ...curState.canvasOffset,\n                    ...action.payload,\n                },\n            };\n        }\n        case actionTypes.UPDATE_AVERAGE_RENDERS_PER_SECOND: {\n            return {\n                ...curState,\n                averageRendersPerSecond: action.payload,\n            };\n        }\n        case actionTypes.UPDATE_AVERAGE_UPDATES_PER_SECOND: {\n            return {\n                ...curState,\n                averageUpdatesPerSecond: action.payload,\n            };\n        }\n        case actionTypes.UPDATE_MAP_DATA_LOADED: {\n            return {\n                ...curState,\n                mapDataLoaded: action.payload,\n            };\n        }\n        case actionTypes.UPDATE_CANVAS_PROPS_BY_ZOOM_FACTOR: {\n            const { zoomOffsetFromViewCentre, zoomFactor } = action.payload;\n            const zoomCenterInCanvas = {\n                x: zoomOffsetFromViewCentre.x + curState.canvasProps.centerX,\n                y: zoomOffsetFromViewCentre.y + curState.canvasProps.centerY,\n            };\n\n            return {\n                ...curState,\n                canvasProps: {\n                    centerX:\n                        curState.canvasProps.centerX -\n                        zoomCenterInCanvas.x * (1 - zoomFactor),\n                    centerY:\n                        curState.canvasProps.centerY -\n                        zoomCenterInCanvas.y * (1 - zoomFactor),\n                    zoom: curState.canvasProps.zoom * zoomFactor,\n                },\n            };\n        }\n        case actionTypes.UPDATE_CANVAS_PROPS_BY_DIFF: {\n            return {\n                ...curState,\n                canvasProps: {\n                    centerX: action.payload.centerX\n                        ? curState.canvasProps.centerX + action.payload.centerX\n                        : curState.canvasProps.centerX,\n                    centerY: action.payload.centerY\n                        ? curState.canvasProps.centerY + action.payload.centerY\n                        : curState.canvasProps.centerY,\n                    zoom: action.payload.zoom\n                        ? curState.canvasProps.zoom * action.payload.zoom\n                        : curState.canvasProps.zoom,\n                },\n            };\n        }\n        case actionTypes.UPDATE_CANVAS_PROPS: {\n            return {\n                ...curState,\n                canvasProps: {\n                    ...curState.canvasProps,\n                    ...action.payload,\n                },\n            };\n        }\n        case actionTypes.UPDATE_CANVAS_DIMENSIONS:\n            return {\n                ...curState,\n                canvasDimensions: {\n                    ...curState.canvasDimensions,\n                    ...action.payload,\n                },\n            };\n        case actionTypes.UPDATE_CUR_MODE:\n            return {\n                ...curState,\n                curMode: action.payload,\n            };\n        case actionTypes.UPDATE_SELECTED_COMPONENT:\n            return {\n                ...curState,\n                selectedComponent: action.payload,\n            };\n        case actionTypes.UPDATE_HOVERED_COMPONENT:\n            return {\n                ...curState,\n                hoveredComponent: action.payload,\n            };\n        case actionTypes.UPDATE_SHOW_DYNAMIC_LABELS:\n            return {\n                ...curState,\n                showLabels: {\n                    ...curState.showLabels,\n                    dynamic: action.payload,\n                },\n            };\n        case actionTypes.UPDATE_SHOW_STATIC_LABELS: {\n            return {\n                ...curState,\n                showLabels: {\n                    ...curState.showLabels,\n                    static: action.payload,\n                },\n            };\n        }\n        case actionTypes.UPDATE_SHOW_TOGGLE_DYNAMIC_LABELS: {\n            return {\n                ...curState,\n                showToggleDynamicLabels: action.payload,\n            };\n        }\n        case actionTypes.UPDATE_SHOW_FPS_WARNING: {\n            if (action.payload && !curState.shownLowFpsWarning) {\n                return {\n                    ...curState,\n                    showLowFpsWarning: true,\n                    shownLowFpsWarning: true,\n                };\n            } else {\n                return {\n                    ...curState,\n                    showLowFpsWarning: false,\n                };\n            }\n        }\n        case actionTypes.UPDATE_CUR_TRIP_VEHICLE_ID: {\n            return {\n                ...curState,\n                curTripVehicleId: action.payload,\n            };\n        }\n        default:\n            return curState;\n    }\n};\n\nexport default rootReducer;\n","import shortUuid from 'short-uuid';\nimport { getStore } from '../redux/store';\nexport default class Utils {\n    static shortUuidGenerator = shortUuid(shortUuid.constants.flickrBase58);\n\n    static generateShortUuid() {\n        return this.shortUuidGenerator.generate();\n    }\n\n    static getCanvasViewCutoffs() {\n        const { canvasDimensions } = getStore().getState();\n        const cutoffs = {\n            left: 0,\n            right: canvasDimensions.width,\n            top: 0,\n            bottom: canvasDimensions.height,\n        };\n        return cutoffs;\n    }\n\n    static checkCoordinateInCanvasView(canvasCoordinateArray, radius = 0) {\n        // console.log(canvasCoordinateArray);\n        const canvasCutoffs = this.getCanvasViewCutoffs();\n        const withinLeft =\n            canvasCoordinateArray[0] + radius / 2 >= canvasCutoffs.left;\n        const withinRight =\n            canvasCoordinateArray[0] - radius / 2 <= canvasCutoffs.right;\n        const withinTop =\n            canvasCoordinateArray[1] + radius / 2 >= canvasCutoffs.top;\n        const withinBottom =\n            canvasCoordinateArray[1] - radius / 2 <= canvasCutoffs.bottom;\n        return withinLeft && withinRight && withinTop && withinBottom;\n    }\n\n    static getCoordFromWaypoint(waypointName, mapData) {\n        if (waypointName.startsWith('intersection')) {\n            return mapData.intersections[waypointName].coord;\n        } else if (waypointName.startsWith('location')) {\n            return mapData.locations[waypointName].coord;\n        }\n        return null;\n    }\n\n    static getDistanceBetweenArrayCoords(arrayCoord1, arrayCoord2) {\n        let squareSum = 0;\n        for (let i = 0; i < arrayCoord1.length; i++) {\n            squareSum += Math.pow(arrayCoord2[i] - arrayCoord1[i], 2);\n        }\n        return Math.sqrt(squareSum);\n    }\n\n    static mapArrayCoord(arrayCoord) {\n        if (arrayCoord) {\n            return arrayCoord.map(Utils.mapSingleCoord);\n        }\n        return null;\n    }\n\n    static unmapArrayCoord(arrayCoord) {\n        if (arrayCoord) {\n            return arrayCoord.map(Utils.unmapSingleCoord);\n        }\n        return null;\n    }\n\n    static scaleSingleCoord(singleCoord) {\n        const canvasProps = getStore().getState().canvasProps;\n        return singleCoord * canvasProps.zoom;\n    }\n\n    static unscaleSingleCoord(singleCoord) {\n        const canvasProps = getStore().getState().canvasProps;\n        return singleCoord / canvasProps.zoom;\n    }\n\n    static mapSingleCoord(singleCoord, index) {\n        let scaledCoord = Utils.scaleSingleCoord(singleCoord);\n        const { canvasDimensions, canvasProps } = getStore().getState();\n        if (index === 0) {\n            scaledCoord += canvasDimensions.width / 2 - canvasProps.centerX;\n        } else if (index === 1) {\n            scaledCoord += canvasDimensions.height / 2 - canvasProps.centerY;\n        }\n        return scaledCoord;\n    }\n\n    static unmapSingleCoord(singleCoord, index) {\n        let unscaledCoord = singleCoord;\n        const { canvasDimensions, canvasProps } = getStore().getState();\n        if (index === 0) {\n            unscaledCoord -= canvasDimensions.width / 2 - canvasProps.centerX;\n        } else if (index === 1) {\n            unscaledCoord -= canvasDimensions.height / 2 - canvasProps.centerY;\n        }\n        return Utils.unscaleSingleCoord(unscaledCoord);\n    }\n}\n","const constants = {};\n\nconstants.ROAD_DRIVING_SIDE = {\n    LEFT: 'left',\n    RIGHT: 'right',\n};\n\nconstants.VEHICLE_STATE = {\n    SPAWNED: 'spawned',\n    DEPARTURE_READY: 'departure_ready',\n    EN_ROUTE: 'en_route',\n    ARRIVED: 'arrived'\n};\n\nconstants.ROAD_TYPES = {\n    TYPES: {\n        LOCAL: 'LOCAL',\n        MINOR: 'MINOR',\n        MAJOR: 'MAJOR',\n    },\n    WIDTH: {\n        LOCAL: 50,\n        MINOR: 60,\n        MAJOR: 100,\n    },\n};\n\nconstants.VEHICLE_DIRECTION = {\n    TOWARDS_START: 'towards_start',\n    TOWARDS_END: 'towards_end',\n};\n\nconstants.DISPLAY = {\n    INTERSECTION_RADIUS: 45,\n    LOCATION_RADIUS: 30,\n    VEHICLE_RADIUS: 10\n}\n\nexport default constants;\n","import Utils from '../utils/Utils';\nimport constants from '../constants';\n\nexport default class RoadRenderer {\n    static render(ctx, mapData, showLabels) {\n        const drawRoadLines = (mode) => {\n            Object.entries(mapData.roads).forEach((roadEntry) => {\n                const roadId = roadEntry[0];\n                const roadData = roadEntry[1];\n\n                const startCoord = Utils.mapArrayCoord(\n                    Utils.getCoordFromWaypoint(roadData.start, mapData)\n                );\n                const endCoord = Utils.mapArrayCoord(\n                    Utils.getCoordFromWaypoint(roadData.end, mapData)\n                );\n\n                if (startCoord && endCoord) {\n                    if (mode === 'pavement') {\n                        if (\n                            roadData.type === constants.ROAD_TYPES.TYPES.LOCAL\n                        ) {\n                            ctx.lineWidth = Utils.scaleSingleCoord(\n                                constants.ROAD_TYPES.WIDTH.LOCAL\n                            );\n                        } else if (\n                            roadData.type === constants.ROAD_TYPES.TYPES.MINOR\n                        ) {\n                            ctx.lineWidth = Utils.scaleSingleCoord(\n                                constants.ROAD_TYPES.WIDTH.MINOR\n                            );\n                        } else if (\n                            roadData.type === constants.ROAD_TYPES.TYPES.MAJOR\n                        ) {\n                            ctx.lineWidth = Utils.scaleSingleCoord(\n                                constants.ROAD_TYPES.WIDTH.MAJOR\n                            );\n                        }\n\n                        ctx.strokeStyle = 'black';\n                        ctx.lineJoin = 'round';\n                        ctx.setLineDash([]);\n                        ctx.beginPath();\n                        ctx.moveTo(...startCoord);\n                        ctx.lineTo(...endCoord);\n                        ctx.stroke();\n                    } else if (mode === 'center-line') {\n                        ctx.lineWidth = Utils.scaleSingleCoord(1);\n                        ctx.strokeStyle = 'yellow';\n                        if (\n                            roadData.type === constants.ROAD_TYPES.TYPES.LOCAL\n                        ) {\n                            ctx.setLineDash([\n                                Utils.scaleSingleCoord(5),\n                                Utils.scaleSingleCoord(5),\n                            ]);\n                            ctx.beginPath();\n                            ctx.moveTo(...startCoord);\n                            ctx.lineTo(...endCoord);\n                            ctx.stroke();\n                        } else if (\n                            roadData.type === constants.ROAD_TYPES.TYPES.MINOR\n                        ) {\n                            ctx.setLineDash([]);\n                            ctx.beginPath();\n                            ctx.moveTo(...startCoord);\n                            ctx.lineTo(...endCoord);\n                            ctx.stroke();\n                        } else if (\n                            roadData.type === constants.ROAD_TYPES.TYPES.MAJOR\n                        ) {\n                            ctx.setLineDash([]);\n                            ctx.beginPath();\n                            ctx.moveTo(...startCoord);\n                            ctx.lineTo(...endCoord);\n                            ctx.stroke();\n\n                            const roadSlope = {\n                                x: endCoord[0] - startCoord[0],\n                                y: endCoord[1] - startCoord[1],\n                            };\n\n                            const roadPerpSlopeNormalized = {\n                                x:\n                                    -roadSlope.y /\n                                    Math.sqrt(\n                                        Math.pow(roadSlope.x, 2) +\n                                            Math.pow(roadSlope.y, 2)\n                                    ),\n                                y:\n                                    roadSlope.x /\n                                    Math.sqrt(\n                                        Math.pow(roadSlope.x, 2) +\n                                            Math.pow(roadSlope.y, 2)\n                                    ),\n                            };\n\n                            ctx.strokeStyle = 'white';\n                            ctx.setLineDash([\n                                Utils.scaleSingleCoord(3),\n                                Utils.scaleSingleCoord(5),\n                            ]);\n\n                            // draw left lane lines\n                            ctx.beginPath();\n                            ctx.moveTo(\n                                startCoord[0] +\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.x * 25\n                                    ),\n                                startCoord[1] +\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.y * 25\n                                    )\n                            );\n                            ctx.lineTo(\n                                endCoord[0] +\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.x * 25\n                                    ),\n                                endCoord[1] +\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.y * 25\n                                    )\n                            );\n                            ctx.stroke();\n\n                            // draw right lane lines\n                            ctx.beginPath();\n                            ctx.moveTo(\n                                startCoord[0] -\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.x * 25\n                                    ),\n                                startCoord[1] -\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.y * 25\n                                    )\n                            );\n                            ctx.lineTo(\n                                endCoord[0] -\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.x * 25\n                                    ),\n                                endCoord[1] -\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.y * 25\n                                    )\n                            );\n                            ctx.stroke();\n                        }\n                        ctx.lineJoin = 'round';\n                    }\n                }\n            });\n        };\n\n        drawRoadLines('pavement');\n        drawRoadLines('center-line');\n    }\n}\n","import Utils from '../utils/Utils';\nimport constants from '../constants';\n\nexport default class LocationRenderer {\n    static render(ctx, mapData, showLabels) {\n        Object.entries(mapData.locations).forEach((locationEntry) => {\n            const locationId = locationEntry[0];\n            const locationData = locationEntry[1];\n\n            const coord = Utils.mapArrayCoord(locationData.coord);\n            if (\n                Utils.checkCoordinateInCanvasView(\n                    coord,\n                    constants.DISPLAY.LOCATION_RADIUS\n                )\n            ) {\n                ctx.lineWidth = 2;\n                ctx.strokeStyle = 'grey';\n                ctx.fillStyle = '#ff0000';\n                ctx.setLineDash([]);\n\n                ctx.beginPath();\n                ctx.arc(\n                    coord[0],\n                    coord[1],\n                    Utils.scaleSingleCoord(constants.DISPLAY.LOCATION_RADIUS),\n                    0,\n                    2 * Math.PI\n                );\n                ctx.stroke();\n                ctx.fill();\n\n                if (showLabels) {\n                    ctx.font = Utils.scaleSingleCoord(50) + 'px Arial';\n                    ctx.strokeStyle = 'white';\n                    ctx.strokeWidth = Utils.scaleSingleCoord(2);\n                    ctx.strokeText(locationId, coord[0], coord[1]);\n                    ctx.fillStyle = 'black';\n                    ctx.fillText(locationId, coord[0], coord[1]);\n                }\n            }\n        });\n    }\n}\n","import Utils from '../utils/Utils';\nimport constants from '../constants';\n\nexport default class IntersectionRenderer {\n    static render(ctx, mapData, showLabels) {\n        Object.entries(mapData.intersections).forEach((intersectionEntry) => {\n            const intersectionId = intersectionEntry[0];\n            const intersectionData = intersectionEntry[1];\n\n            const coord = Utils.mapArrayCoord(intersectionData.coord);\n            if (\n                Utils.checkCoordinateInCanvasView(\n                    coord,\n                    constants.DISPLAY.INTERSECTION_RADIUS\n                )\n            ) {\n                ctx.lineWidth = 2;\n                ctx.strokeStyle = 'grey';\n                ctx.fillStyle = '#00ff00';\n                ctx.setLineDash([]);\n\n                ctx.beginPath();\n                ctx.arc(\n                    coord[0],\n                    coord[1],\n                    Utils.scaleSingleCoord(\n                        constants.DISPLAY.INTERSECTION_RADIUS\n                    ),\n                    0,\n                    2 * Math.PI\n                );\n                ctx.stroke();\n                ctx.fill();\n\n                if (showLabels) {\n                    ctx.font = Utils.scaleSingleCoord(50) + 'px Arial';\n                    ctx.strokeStyle = 'white';\n                    ctx.strokeWidth = Utils.scaleSingleCoord(2);\n                    ctx.strokeText(intersectionId, coord[0], coord[1]);\n                    ctx.fillStyle = 'black';\n                    ctx.fillText(intersectionId, coord[0], coord[1]);\n                }\n            }\n        });\n    }\n}\n","import Utils from '../utils/Utils';\nimport constants from '../constants';\n\nexport default class VehicleRenderer {\n    static render(ctx, mapData, showLabels, curTripVehicleId) {\n        Object.entries(mapData.vehicles).forEach((vehicleEntry) => {\n            const vehicleId = vehicleEntry[0];\n            const vehicleData = vehicleEntry[1];\n\n            const coord = Utils.mapArrayCoord(vehicleData.coord);\n\n            if (\n                Utils.checkCoordinateInCanvasView(\n                    coord,\n                    constants.DISPLAY.VEHICLE_RADIUS\n                )\n            ) {\n                ctx.lineWidth = 2;\n                ctx.strokeStyle = 'grey';\n                if (curTripVehicleId === vehicleId) {\n                    ctx.fillStyle = 'purple';\n                } else {\n                    ctx.fillStyle = 'blue';\n                }\n                ctx.setLineDash([]);\n\n                ctx.beginPath();\n                ctx.arc(\n                    coord[0],\n                    coord[1],\n                    Utils.scaleSingleCoord(constants.DISPLAY.VEHICLE_RADIUS),\n                    0,\n                    2 * Math.PI\n                );\n                ctx.stroke();\n                ctx.fill();\n\n                if (showLabels || curTripVehicleId === vehicleId) {\n                    ctx.lineJoin = 'round';\n                    ctx.miterLimit = 2;\n                    const text = `${vehicleId} | Src: ${vehicleData.originId} | Dest: ${vehicleData.destinationId}`;\n                    ctx.font = Utils.scaleSingleCoord(15) + 'px Arial';\n                    ctx.strokeStyle = 'black';\n                    ctx.strokeWidth = Utils.scaleSingleCoord(1);\n                    ctx.strokeText(text, coord[0], coord[1]);\n                    ctx.fillStyle = 'yellow';\n                    ctx.fillText(text, coord[0], coord[1]);\n                }\n            }\n        });\n    }\n}\n","import { getStore } from '../redux/store';\nimport { actionCreators } from '../redux/actions';\nimport Utils from './Utils';\n\nconst MapDataHandler = {};\n\nMapDataHandler.mapData = null;\nMapDataHandler.lastUpdateTimeElapsedList = [];\nMapDataHandler.lastUpdateTime = performance.now();\nMapDataHandler.lastReduxUpdateTime = performance.now();\n\nconst REDUX_UPDATE_INTERVAL = 1000;\n\nconst updateMapDataListener = (data) => {\n    const mapDataLoadedBefore = !!MapDataHandler.mapData;\n    MapDataHandler.mapData = data;\n    if (!mapDataLoadedBefore) {\n        getStore().dispatch(actionCreators.setMapDataLoaded(true));\n    }\n\n    if (getStore().getState().followCurTripVehicle) {\n        const curVehicleId = getStore().getState().curTripVehicleId;\n        console.log(curVehicleId);\n        if (MapDataHandler.mapData.vehicles[curVehicleId]) {\n            const coords = MapDataHandler.mapData.vehicles[curVehicleId].coord;\n            getStore().dispatch(\n                actionCreators.setCanvasProps({\n                    centerX: Utils.scaleSingleCoord(coords[0]),\n                    centerY: Utils.scaleSingleCoord(coords[1]),\n                })\n            );\n        } else {\n            getStore().dispatch(actionCreators.setFollowCurTripVehicle(false));\n            getStore().dispatch(actionCreators.setCurTripVehicleId(null));\n        }\n    }\n\n    // update FPS\n    const now = performance.now();\n    const lastUpdateTimeElapsed = now - MapDataHandler.lastUpdateTime;\n    MapDataHandler.lastUpdateTimeElapsedList.push(lastUpdateTimeElapsed);\n    if (MapDataHandler.lastUpdateTimeElapsedList.length > 100) {\n        MapDataHandler.lastUpdateTimeElapsedList.shift();\n    }\n    if (now - MapDataHandler.lastReduxUpdateTime > REDUX_UPDATE_INTERVAL) {\n        const averageUpdateTimeElapsed =\n            MapDataHandler.lastUpdateTimeElapsedList.reduce(\n                (a, b) => a + b,\n                0\n            ) / MapDataHandler.lastUpdateTimeElapsedList.length;\n        let averageUpdatesPerSecond = 1000 / averageUpdateTimeElapsed;\n        if (MapDataHandler.lastUpdateTimeElapsedList.length < 100) {\n            averageUpdatesPerSecond = Number.POSITIVE_INFINITY;\n        }\n        getStore().dispatch(\n            actionCreators.setAverageUpdatesPerSecond(averageUpdatesPerSecond)\n        );\n        MapDataHandler.lastReduxUpdateTime = now;\n    }\n    MapDataHandler.lastUpdateTime = now;\n};\n\nMapDataHandler.init = (socket) => {\n    socket.on('update-map-data', updateMapDataListener);\n};\n\nMapDataHandler.cleanup = (socket) => {\n    socket.off('update-map-data', updateMapDataListener);\n};\n\nexport default MapDataHandler;\n","import RoadRenderer from './RoadRenderer';\nimport LocationRenderer from './LocationRenderer';\nimport IntersectionRenderer from './IntersectionRenderer';\nimport VehicleRenderer from './VehicleRenderer';\nimport { getStore } from '../redux/store';\nimport MapDataHandler from '../utils/MapDataHandler';\nimport { actionCreators } from '../redux/actions';\n\nconst REDUX_UPDATE_INTERVAL = 1000;\n\nexport default class MapRenderer {\n    static lastRenderTimeElapsedList = [];\n    static lastRenderTime = performance.now();\n    static lastReduxUpdateTime = performance.now();\n\n    static getMapData() {\n        return MapDataHandler.mapData;\n    }\n\n    static getShowLabels() {\n        const curState = getStore().getState();\n        const { showToggleDynamicLabels, followCurTripVehicle } = curState;\n        const showDynamicLabels = curState.showLabels.dynamic;\n        return (\n            showToggleDynamicLabels &&\n            showDynamicLabels &&\n            !followCurTripVehicle\n        );\n    }\n\n    static getCurTripVehicleId() {\n        return getStore().getState().curTripVehicleId;\n    }\n\n    static _renderStatic(staticCanvas) {\n        const mapData = this.getMapData();\n        const showLabels = this.getShowLabels();\n        const {\n            width: canvasWidth,\n            height: canvasHeight,\n        } = getStore().getState().canvasDimensions;\n        if (mapData && staticCanvas) {\n            const staticCtx = staticCanvas.getContext('2d');\n            staticCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n            staticCtx.fillStyle = '#dddddd';\n            staticCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n\n            const logoImage = new Image();\n            logoImage.src = '/logo192.png';\n            logoImage.onload = () => {\n                staticCtx.drawImage(logoImage, 0, 0, 50, 50);\n            };\n\n            RoadRenderer.render(staticCtx, mapData, showLabels);\n            LocationRenderer.render(staticCtx, mapData, showLabels);\n            IntersectionRenderer.render(staticCtx, mapData, showLabels);\n        }\n    }\n\n    static _renderDynamic(dynamicCanvas) {\n        const mapData = this.getMapData();\n        const showLabels = this.getShowLabels();\n        const {\n            width: canvasWidth,\n            height: canvasHeight,\n        } = getStore().getState().canvasDimensions;\n        if (mapData && dynamicCanvas) {\n            const dynamicCtx = dynamicCanvas.getContext('2d');\n            dynamicCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n            VehicleRenderer.render(\n                dynamicCtx,\n                mapData,\n                showLabels,\n                this.getCurTripVehicleId()\n            );\n        }\n    }\n\n    static renderAll(statisCanvas, dynamicCanvas) {\n        this._renderStatic(statisCanvas);\n        this._renderDynamic(dynamicCanvas);\n\n        const now = performance.now();\n        const lastRenderTimeElapsed = now - this.lastRenderTime;\n        this.lastRenderTimeElapsedList.push(lastRenderTimeElapsed);\n        if (this.lastRenderTimeElapsedList.length > 100) {\n            this.lastRenderTimeElapsedList.shift();\n        }\n        if (now - this.lastReduxUpdateTime > REDUX_UPDATE_INTERVAL) {\n            const averageRenderTimeElapsed =\n                this.lastRenderTimeElapsedList.reduce((a, b) => a + b, 0) /\n                this.lastRenderTimeElapsedList.length;\n            let averageRendersPerSecond = 1000 / averageRenderTimeElapsed;\n            if (this.lastRenderTimeElapsedList.length < 100) {\n                averageRendersPerSecond = Number.POSITIVE_INFINITY;\n            }\n            getStore().dispatch(\n                actionCreators.setAverageRendersPerSecond(\n                    averageRendersPerSecond\n                )\n            );\n            this.lastReduxUpdateTime = now;\n        }\n        this.lastRenderTime = now;\n    }\n}\n","import React, { useCallback } from 'react';\nimport { useRef } from 'react';\nimport { useEffect } from 'react';\nimport MapRenderer from '../renderers/MapRenderer';\nimport { actionCreators } from '../redux/actions';\nimport { connect } from 'react-redux';\n\nconst SHOW_LABEL_MIN_ZOOM_LEVEL = 0.4;\n\nfunction Map({\n    showToggleDynamicLabels,\n    dispatch,\n    canvasProps,\n    canvasDimensions,\n    mapLoaded,\n    followCurTripVehicle,\n}) {\n    const staticCanvasRef = useRef(null);\n    const dynamicCanvasRef = useRef(null);\n    const canvasContainerRef = useRef(null);\n\n    useEffect(() => {\n        dispatch(\n            actionCreators.setCanvasDimensions({\n                height: window.innerHeight,\n                width: window.innerWidth,\n            })\n        );\n        dispatch(\n            actionCreators.setCanvasProps({\n                centerX: 0,\n                centerY: 0,\n                zoom: 0.5,\n            })\n        );\n    }, [dispatch]);\n\n    const dragging = useRef(false);\n    const lastDragCoord = useRef(null);\n\n    useEffect(() => {\n        const keyDownHandler = (event) => {\n            const eventKey = event.key;\n            let deltaX = 0;\n            let deltaY = 0;\n            switch (eventKey) {\n                case 'ArrowUp':\n                    deltaY = 50;\n                    break;\n                case 'ArrowDown':\n                    deltaY = -50;\n                    break;\n                case 'ArrowLeft':\n                    deltaX = 50;\n                    break;\n                case 'ArrowRight':\n                    deltaX = -50;\n                    break;\n                default:\n                    break;\n            }\n            dispatch(\n                actionCreators.setCanvasPropsDiff({\n                    centerX: deltaX,\n                    centerY: deltaY,\n                    zoom: 1,\n                })\n            );\n        };\n\n        window.addEventListener('keydown', keyDownHandler);\n        return () => {\n            window.removeEventListener('keydown', keyDownHandler);\n        };\n    }, [dispatch]);\n\n    const onZoom = useCallback(\n        (event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            if (mapLoaded) {\n                const { pageX, pageY, deltaY } = event;\n\n                const ZOOM_FACTOR = 1.25;\n                let curZoomFactor = 1;\n                if (deltaY > 0) {\n                    // zoom out\n                    curZoomFactor = 1 / ZOOM_FACTOR;\n                } else if (deltaY < 0) {\n                    // zoom in\n                    curZoomFactor = ZOOM_FACTOR;\n                }\n\n                if (followCurTripVehicle) {\n                    dispatch(\n                        actionCreators.setCanvasPropsZoom(curZoomFactor, {\n                            x: 0,\n                            y: 0,\n                        })\n                    );\n                } else {\n                    const zoomCenterInCanvasView = {\n                        x: pageX - staticCanvasRef.current.offsetLeft,\n                        y: pageY - staticCanvasRef.current.offsetTop,\n                    };\n\n                    const zoomOffsetFromViewCentre = {\n                        x:\n                            zoomCenterInCanvasView.x -\n                            canvasDimensions.width / 2,\n                        y:\n                            zoomCenterInCanvasView.y -\n                            canvasDimensions.height / 2,\n                    };\n\n                    dispatch(\n                        actionCreators.setCanvasPropsZoom(\n                            curZoomFactor,\n                            zoomOffsetFromViewCentre\n                        )\n                    );\n                }\n            }\n            return false;\n        },\n        [canvasDimensions, dispatch, mapLoaded, followCurTripVehicle]\n    );\n\n    useEffect(() => {\n        if (canvasContainerRef.current) {\n            dispatch(\n                actionCreators.setCanvasOffset({\n                    left: canvasContainerRef.current.offsetLeft,\n                    top: canvasContainerRef.current.offsetTop,\n                })\n            );\n            const curCanvasContainerRef = canvasContainerRef.current;\n            curCanvasContainerRef.addEventListener('wheel', onZoom, {\n                passive: false,\n            });\n            return () => {\n                curCanvasContainerRef.removeEventListener('wheel', onZoom);\n            };\n        }\n    }, [canvasContainerRef, mapLoaded, dispatch, onZoom]);\n\n    useEffect(() => {\n        const renderMap = () => {\n            MapRenderer.renderAll(\n                staticCanvasRef.current,\n                dynamicCanvasRef.current\n            );\n            window.requestAnimationFrame(renderMap);\n        };\n\n        window.requestAnimationFrame(renderMap);\n    }, []);\n\n    const onDragStart = (event) => {\n        event.preventDefault();\n        if (mapLoaded && !followCurTripVehicle) {\n            dragging.current = true;\n            lastDragCoord.current = {\n                x: event.screenX,\n                y: event.screenY,\n            };\n        }\n    };\n\n    const onDragEnd = (event) => {\n        dragging.current = false;\n        lastDragCoord.current = null;\n    };\n\n    const lastDragEvent = useRef(null);\n    const onDragMove = (event) => {\n        const DRAG_UPDATE_LIMIT_MS = 1000 / 30;\n        const now = performance.now();\n        if (\n            dragging.current &&\n            (!lastDragEvent.current ||\n                now - lastDragEvent.current > DRAG_UPDATE_LIMIT_MS)\n        ) {\n            lastDragEvent.current = now;\n            const lastCoord = {\n                x: lastDragCoord.current.x,\n                y: lastDragCoord.current.y,\n            };\n            const curCoord = {\n                x: event.screenX,\n                y: event.screenY,\n            };\n\n            dispatch(\n                actionCreators.setCanvasPropsDiff({\n                    zoom: 1,\n                    centerX: -(curCoord.x - lastCoord.x),\n                    centerY: -(curCoord.y - lastCoord.y),\n                })\n            );\n            lastDragCoord.current = curCoord;\n        }\n    };\n\n    useEffect(() => {\n        if (canvasProps.zoom < SHOW_LABEL_MIN_ZOOM_LEVEL) {\n            if (showToggleDynamicLabels) {\n                dispatch(actionCreators.setShowToggleDynamicLabels(false));\n            }\n        } else {\n            if (!showToggleDynamicLabels) {\n                dispatch(actionCreators.setShowToggleDynamicLabels(true));\n            }\n        }\n    }, [canvasProps.zoom, showToggleDynamicLabels, dispatch]);\n\n    return (\n        <div\n            onMouseDown={onDragStart}\n            onMouseUp={onDragEnd}\n            onMouseLeave={onDragEnd}\n            onMouseMove={onDragMove}\n            ref={canvasContainerRef}\n            style={{\n                height: canvasDimensions.height,\n                width: canvasDimensions.width,\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                zIndex: -1,\n            }}\n        >\n            {mapLoaded ? (\n                <div>\n                    <canvas\n                        style={{\n                            position: 'absolute',\n                            zIndex: 2,\n                        }}\n                        ref={dynamicCanvasRef}\n                        height={canvasDimensions.height}\n                        width={canvasDimensions.width}\n                    />\n                    <canvas\n                        style={{\n                            position: 'absolute',\n                            zIndex: 1,\n                        }}\n                        ref={staticCanvasRef}\n                        height={canvasDimensions.height}\n                        width={canvasDimensions.width}\n                    />\n                </div>\n            ) : (\n                <div>Loading map data...</div>\n            )}\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => ({\n    curMode: state.curMode,\n    mapLoaded: state.mapDataLoaded,\n    showDynamicLabels: state.showLabels.dynamic,\n    showToggleDynamicLabels: state.showToggleDynamicLabels,\n    canvasProps: state.canvasProps,\n    canvasDimensions: state.canvasDimensions,\n    followCurTripVehicle: state.followCurTripVehicle,\n});\n\nexport default connect(mapStateToProps)(Map);\n","import Utils from '../utils/Utils';\nimport constants from '../constants';\nimport MapDataHandler from '../utils/MapDataHandler';\n\nconst ComponetFinder = {};\n\nconst intersectionFinder = (mapCoordinates, mapData, pointerRadius, excludeIdList) => {\n    for (const intersectionEntry of Object.entries(mapData.intersections)) {\n        if (!excludeIdList.includes(intersectionEntry[0])) {\n            const intersectionData = intersectionEntry[1];\n            const distance = Utils.getDistanceBetweenArrayCoords(\n                intersectionData.coord,\n                mapCoordinates\n            );\n\n            if (\n                distance <\n                constants.DISPLAY.INTERSECTION_RADIUS + pointerRadius\n            ) {\n                return {\n                    type: 'intersection',\n                    id: intersectionEntry[0],\n                    data: intersectionEntry[1],\n                };\n            }\n        }\n    }\n    return null;\n};\n\nconst locationFinder = (mapCoordinates, mapData, pointerRadius, excludeIdList) => {\n    for (const locationEntry of Object.entries(mapData.locations)) {\n        if (!excludeIdList.includes(locationEntry[0])) {\n            const locationData = locationEntry[1];\n            const distance = Utils.getDistanceBetweenArrayCoords(\n                locationData.coord,\n                mapCoordinates\n            );\n\n            if (distance < constants.DISPLAY.LOCATION_RADIUS + pointerRadius) {\n                return {\n                    type: 'location',\n                    id: locationEntry[0],\n                    data: locationEntry[1],\n                };\n            }\n        }\n    }\n    return null;\n};\n\nComponetFinder.findComponent = (\n    mapCoordinates,\n    pointerRadius = 0,\n    excludeIdList = []\n) => {\n    const mapData = MapDataHandler.mapData;\n    const finderFuncs = [intersectionFinder, locationFinder];\n    for (const func of finderFuncs) {\n        const component = func(\n            mapCoordinates,\n            mapData,\n            pointerRadius,\n            excludeIdList\n        );\n        if (component) {\n            return component;\n        }\n    }\n};\n\nexport default ComponetFinder;\n","import React from 'react';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\n\nexport default function LowFpsModal({ isOpen, setIsOpen, className }) {\n    return (\n        <Modal\n            isOpen={isOpen}\n            toggle={() => {\n                setIsOpen(!isOpen);\n            }}\n            className={className}\n        >\n            <ModalHeader\n                toggle={() => {\n                    setIsOpen(!isOpen);\n                }}\n            >\n                Low FPS Detected\n            </ModalHeader>\n            <ModalBody>\n                It has been detected at the map is running at a lower than\n                optimal frame rate. It may help to hide the labels by toggling\n                the <code>Toggle Labels</code> checkbox\n            </ModalBody>\n            <ModalFooter>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        setIsOpen(!isOpen);\n                    }}\n                >\n                    OK\n                </Button>\n            </ModalFooter>\n        </Modal>\n    );\n}\n","import React, { useState } from 'react';\nimport {\n    AiOutlineMinusSquare,\n    AiOutlinePlusSquare,\n    AiFillMinusSquare,\n    AiFillPlusSquare,\n} from 'react-icons/ai';\n\nexport default function MenuSection({\n    sectionName,\n    children,\n    openInitial = true,\n}) {\n    const [showChildren, setShowChildren] = useState(openInitial);\n\n    let IconClass;\n    if (showChildren) {\n        IconClass = AiFillMinusSquare;\n    } else {\n        IconClass = AiFillPlusSquare;\n    }\n\n    return (\n        <div className=\"mx-2 my-2\">\n            <div\n                className=\"font-weight-bold\"\n                style={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    alignContent: 'center',\n                    alignItems: 'center',\n                }}\n            >\n                {sectionName}\n                <div\n                    style={{\n                        cursor: 'pointer',\n                    }}\n                    onClick={() => {\n                        setShowChildren((oldShowChildren) => !oldShowChildren);\n                    }}\n                >\n                    <IconClass />\n                </div>\n            </div>\n            {showChildren && <div>{children}</div>}\n            <hr className=\"mb-0\" />\n        </div>\n    );\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nfunction SelectedDisplay({ hoveredComponent, selectedComponent }) {\n    const componentData = hoveredComponent || selectedComponent;\n    let Content;\n    if (componentData) {\n        Content = (\n            <div>\n                <div>Type: {componentData.type}</div>\n                <div>ID: {componentData.id}</div>\n                <div>\n                    Coord: [{componentData.data.coord[0].toFixed(3)},{' '}\n                    {componentData.data.coord[1].toFixed(3)}]\n                </div>\n            </div>\n        );\n    } else {\n        Content = <div>No component selected</div>;\n    }\n\n    return (\n        <div\n            style={{\n                fontSize: 12,\n            }}\n        >\n            {Content}\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        selectedComponent: state.selectedComponent,\n        hoveredComponent: state.hoveredComponent,\n    };\n};\n\nexport default connect(mapStateToProps)(SelectedDisplay);\n","import React, { useEffect, useState } from 'react';\nimport { FormGroup, Label, Input, Button } from 'reactstrap';\nimport { actionCreators } from '../redux/actions';\nimport MapDataHandler from '../utils/MapDataHandler';\nimport { connect } from 'react-redux';\n\nfunction NavigateSection({\n    curTripVehicleId,\n    mapDataLoaded,\n    socket,\n    followCurTripVehicle,\n    dispatch,\n}) {\n    const [curTripVehicleData, setCurTripVehicleData] = useState(null);\n\n    const startTrip = (startWaypointId, endWaypointId) => {\n        if (socket) {\n            socket.emit('start-trip', {\n                originId: startWaypointId,\n                destinationId: endWaypointId,\n            });\n        }\n    };\n\n    useEffect(() => {\n        if (socket) {\n            const startTripResListener = (startTripRes) => {\n                if (startTripRes) {\n                    setCurTripVehicleData(startTripRes);\n                    dispatch(\n                        actionCreators.setCurTripVehicleId(startTripRes.id)\n                    );\n                    dispatch(actionCreators.setFollowCurTripVehicle(true));\n                }\n            };\n            socket.on('start-trip-res', startTripResListener);\n            return () => {\n                socket.off('start-trip-res', startTripResListener);\n            };\n        }\n    }, [socket, dispatch]);\n\n    const locationList = mapDataLoaded\n        ? Object.values(MapDataHandler.mapData.locations)\n        : [];\n\n    locationList.sort((a, b) => {\n        if (a.id < b.id) {\n            return -1;\n        } else if (a.id > b.id) {\n            return 1;\n        }\n        return 0;\n    });\n\n    console.log(locationList);\n\n    const selectOptionStyle = {\n        fontSize: 10,\n    };\n\n    let Content;\n    if (curTripVehicleId && curTripVehicleData) {\n        Content = (\n            <div\n                style={{\n                    fontSize: 12,\n                }}\n            >\n                <div>\n                    <span className=\"font-weight-bold\">Vehicle ID: </span>\n                    {curTripVehicleId}\n                </div>\n                <div>\n                    <span className=\"font-weight-bold\">Origin: </span>\n                    {curTripVehicleData.originId}\n                </div>\n                <div>\n                    <span className=\"font-weight-bold\">Destination: </span>\n                    {curTripVehicleData.destinationId}\n                </div>\n                <div\n                    style={{\n                        display: 'flex',\n                        flexDirection: 'row',\n                        alignItems: 'center',\n                        alignContent: 'center',\n                    }}\n                    className=\"my-1\"\n                >\n                    <input\n                        type=\"checkbox\"\n                        id=\"follow-cur-trip-chkbox\"\n                        className=\"mr-1\"\n                        checked={followCurTripVehicle}\n                        onChange={(event) => {\n                            const checked = event.target.checked;\n                            dispatch(\n                                actionCreators.setFollowCurTripVehicle(checked)\n                            );\n                        }}\n                    />\n                    <label\n                        htmlFor=\"follow-cur-trip-chkbox\"\n                        className=\"m-0\"\n                        style={{\n                            userSelect: 'none',\n                            fontSize: 10,\n                        }}\n                    >\n                        Toggle Follow Current Trip Vehicle\n                    </label>\n                </div>\n            </div>\n        );\n    } else {\n        Content = (\n            <div\n                style={{\n                    fontSize: 10,\n                }}\n            >\n                <div>\n                    <Label\n                        for=\"navigate-origin\"\n                        className=\"font-weight-bold mb-1 mt-2\"\n                    >\n                        Origin\n                    </Label>\n                    <Input\n                        style={selectOptionStyle}\n                        type=\"select\"\n                        name=\"select\"\n                        id=\"navigate-origin\"\n                    >\n                        {locationList.map((location) => {\n                            return (\n                                <option\n                                    key={location.id}\n                                    style={selectOptionStyle}\n                                >\n                                    {location.id}\n                                </option>\n                            );\n                        })}\n                    </Input>\n                </div>\n                <div>\n                    <Label\n                        for=\"navigate-dest\"\n                        className=\"font-weight-bold mb-1 mt-2\"\n                    >\n                        Destination\n                    </Label>\n                    <Input\n                        style={selectOptionStyle}\n                        type=\"select\"\n                        name=\"select\"\n                        id=\"navigate-dest\"\n                    >\n                        {locationList.map((location) => {\n                            return (\n                                <option\n                                    key={location.id}\n                                    style={selectOptionStyle}\n                                >\n                                    {location.id}\n                                </option>\n                            );\n                        })}\n                    </Input>\n                </div>\n                <Button\n                    className=\"mt-2\"\n                    color=\"primary\"\n                    style={{\n                        fontSize: 10,\n                    }}\n                    onClick={() => {\n                        startTrip(\n                            document.getElementById('navigate-origin').value,\n                            document.getElementById('navigate-dest').value\n                        );\n                    }}\n                >\n                    Navigate\n                </Button>\n            </div>\n        );\n    }\n\n    return (\n        <div>\n            <div className=\"mb-1\">\n                {curTripVehicleId ? 'Trip Progress' : 'Start a Trip'}\n            </div>\n            {Content}\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => ({\n    mapDataLoaded: state.mapDataLoaded,\n    curTripVehicleId: state.curTripVehicleId,\n    followCurTripVehicle: state.followCurTripVehicle,\n});\n\nexport default connect(mapStateToProps)(NavigateSection);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { actionCreators, reduxConstants } from '../redux/actions';\nimport { Button } from 'reactstrap';\n\nfunction MenuSettings({\n    curMode,\n    showToggleDynamicLabels,\n    showDynamicLabels,\n    followCurTripVehicle,\n    dispatch,\n}) {\n    return (\n        <div>\n            {showToggleDynamicLabels && !followCurTripVehicle && (\n                <div\n                    style={{\n                        display: 'flex',\n                        flexDirection: 'row',\n                        alignItems: 'center',\n                        alignContent: 'center',\n                    }}\n                    className=\"my-1\"\n                >\n                    <input\n                        type=\"checkbox\"\n                        id=\"show-labels-chkbox\"\n                        className=\"mr-1\"\n                        checked={showDynamicLabels}\n                        onChange={(event) => {\n                            const checked = event.target.checked;\n                            dispatch(\n                                actionCreators.setShowDynamicLabels(checked)\n                            );\n                        }}\n                    />\n                    <label\n                        htmlFor=\"show-labels-chkbox\"\n                        className=\"m-0\"\n                        style={{\n                            userSelect: 'none',\n                            fontSize: 10,\n                        }}\n                    >\n                        Toggle Vehicle Labels\n                    </label>\n                </div>\n            )}\n            <div>\n                <Button\n                    color=\"link\"\n                    style={{\n                        fontSize: 10,\n                        padding: 0,\n                    }}\n                    onClick={() => {\n                        if (\n                            curMode === reduxConstants.APP_MODE_LIST.CREATE_MAP\n                        ) {\n                            dispatch(\n                                actionCreators.setCurMode(\n                                    reduxConstants.APP_MODE_LIST.VIEW_MAP\n                                )\n                            );\n                        } else {\n                            dispatch(\n                                actionCreators.setCurMode(\n                                    reduxConstants.APP_MODE_LIST.CREATE_MAP\n                                )\n                            );\n                        }\n                    }}\n                >\n                    {curMode === reduxConstants.APP_MODE_LIST.CREATE_MAP\n                        ? 'Switch to View Mode'\n                        : 'Switch to Create Mode'}\n                </Button>\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        showToggleDynamicLabels: state.showToggleDynamicLabels,\n        curMode: state.curMode,\n        showDynamicLabels: state.showLabels.dynamic,\n        followCurTripVehicle: state.followCurTripVehicle,\n    };\n};\n\nexport default connect(mapStateToProps)(MenuSettings);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport MapDataHandler from '../utils/MapDataHandler';\n\nfunction MapStats({\n    mapDataLoaded,\n    averageUpdatesPerSecond,\n    averageRendersPerSecond,\n}) {\n    let Content;\n    const statRowStyle = {};\n\n    if (mapDataLoaded) {\n        const mapData = MapDataHandler.mapData;\n        Content = (\n            <div>\n                <div style={statRowStyle}>Map ID: {mapData.id}</div>\n                <div style={statRowStyle}>\n                    Total Vehicles: {Object.keys(mapData.vehicles).length}\n                </div>\n                <div style={statRowStyle}>\n                    Total Intersections:{' '}\n                    {Object.keys(mapData.intersections).length}\n                </div>\n                <div style={statRowStyle}>\n                    Total Locations: {Object.keys(mapData.locations).length}\n                </div>\n                <div style={statRowStyle}>\n                    Total Roads: {Object.keys(mapData.roads).length}\n                </div>\n                <div style={statRowStyle}>\n                    Avg Updates/Sec: {averageUpdatesPerSecond.toFixed(2)}\n                </div>\n                <div style={statRowStyle}>\n                    Avg Renders/Sec: {averageRendersPerSecond.toFixed(2)}\n                </div>\n            </div>\n        );\n    } else {\n        Content = <div>Map data not loaded.</div>;\n    }\n\n    return (\n        <div\n            style={{\n                fontSize: 12,\n            }}\n        >\n            {Content}\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        averageUpdatesPerSecond: state.averageUpdatesPerSecond,\n        averageRendersPerSecond: state.averageRendersPerSecond,\n        mapDataLoaded: state.mapDataLoaded,\n    };\n};\n\nexport default connect(mapStateToProps)(MapStats);\n","import React from 'react';\nimport MenuSection from './MenuSection';\nimport SelectedDisplay from './SelectedDisplay';\nimport NavigateSection from './NavigateSection';\nimport MenuSettings from './MenuSettings';\nimport MapStats from './MapStats';\nimport { connect } from 'react-redux';\n\nfunction Menu({ socket }) {   \n    return (\n        <div\n            style={{\n                background: '#ffffffcc',\n                margin: 10,\n                display: 'flex',\n                flexDirection: 'column',\n                flexWrap: 'wrap',\n                justifyContent: 'space-between',\n                width: 300,\n                position: 'fixed',\n                borderRadius: 5,\n            }}\n        >\n            <MenuSection sectionName=\"Selected Component\">\n                <SelectedDisplay />\n            </MenuSection>\n            <MenuSection sectionName=\"Navigator\">\n                <NavigateSection socket={socket} />\n            </MenuSection>\n            <MenuSection sectionName=\"Map Stats\">\n                <MapStats />\n            </MenuSection>\n            <MenuSection sectionName=\"Menu Settings\">\n                <MenuSettings />\n            </MenuSection>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {};\n};\n\nexport default connect(mapStateToProps)(Menu);\n","import React, { useEffect } from 'react';\nimport Map from './Map';\nimport { useRef } from 'react';\nimport Utils from '../utils/Utils';\nimport ComponentFinder from '../builder/ComponentFinder';\nimport LowFpsModal from './LowFpsModal';\nimport { connect } from 'react-redux';\nimport Menu from './Menu';\nimport { actionCreators } from '../redux/actions';\n\nfunction MapViewer({\n    onMouseMove,\n    onMouseDown,\n    curPointerRadius,\n    curPointerComponentId,\n    cursorStyle,\n    socket,\n    averageUpdatesPerSecond,\n    selectedComponent,\n    hoveredComponent,\n    dispatch,\n    showDynamicLabels,\n    showLowFpsWarning,\n    mapDataLoaded,\n    canvasOffset,\n}) {\n    const containerRef = useRef(null);\n\n    const getMapCoordinatesFromMouseEvent = (event) => {\n        const { pageX, pageY } = event;\n        const canvasCoordinates = [\n            pageX - canvasOffset.left,\n            pageY - canvasOffset.top,\n        ];\n        return Utils.unmapArrayCoord(canvasCoordinates);\n    };\n\n    useEffect(() => {\n        if (averageUpdatesPerSecond < 20 && showDynamicLabels) {\n            dispatch(actionCreators.setShowFpsWarning(true));\n        }\n    }, [averageUpdatesPerSecond, showDynamicLabels, dispatch]);\n\n    const mouseMoveHandler = (event) => {\n        if (mapDataLoaded && containerRef && containerRef.current) {\n            const mapCoordinates = getMapCoordinatesFromMouseEvent(event);\n            if (onMouseMove) {\n                onMouseMove(mapCoordinates);\n            }\n            const curHoveredComponent = ComponentFinder.findComponent(\n                mapCoordinates,\n                curPointerRadius,\n                [curPointerComponentId]\n            );\n            if (\n                (hoveredComponent ? hoveredComponent.id : hoveredComponent) !==\n                (curHoveredComponent\n                    ? curHoveredComponent.id\n                    : curHoveredComponent)\n            ) {\n                dispatch(\n                    actionCreators.setHoveredComponent(curHoveredComponent)\n                );\n            }\n        }\n    };\n\n    const mouseDownHandler = (event) => {\n        if (containerRef && containerRef.current) {\n            const mapCoordinates = getMapCoordinatesFromMouseEvent(event);\n\n            if (onMouseDown) {\n                onMouseDown(mapCoordinates);\n            }\n\n            if (\n                !selectedComponent ||\n                (hoveredComponent &&\n                    selectedComponent.id !== hoveredComponent.id)\n            ) {\n                dispatch(actionCreators.setSelectedComponent(hoveredComponent));\n            }\n        }\n    };\n\n    return (\n        <div>\n            {showLowFpsWarning && (\n                <LowFpsModal\n                    isOpen={showLowFpsWarning}\n                    setIsOpen={(open) => {\n                        dispatch(actionCreators.setShowFpsWarning(open));\n                    }}\n                />\n            )}\n            <Menu socket={socket} />\n            <div\n                onMouseMove={mouseMoveHandler}\n                onMouseDown={mouseDownHandler}\n                ref={containerRef}\n                style={{\n                    cursor: cursorStyle\n                        ? cursorStyle\n                        : hoveredComponent\n                        ? 'pointer'\n                        : 'move',\n                }}\n            >\n                <Map />\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        mapDataLoaded: state.mapDataLoaded,\n        averageUpdatesPerSecond: state.averageUpdatesPerSecond,\n        selectedComponent: state.selectedComponent,\n        hoveredComponent: state.hoveredComponent,\n        showDynamicLabels: state.showLabels.dynamic,\n        showLowFpsWarning: state.showLowFpsWarning,\n        canvasOffset: state.canvasOffset,\n    };\n};\n\nexport default connect(mapStateToProps)(MapViewer);\n","import React, { useState, useRef, useEffect } from 'react';\nimport { Button, Container, Input, Card, CardBody, Alert } from 'reactstrap';\nimport MapViewer from './MapViewer';\nimport constants from '../constants';\nimport Utils from '../utils/Utils';\nimport rawMapData from './test.json';\nimport { actionCreators } from '../redux/actions';\nimport { connect } from 'react-redux';\n\nconst POINTER_TYPE = {\n    INTERSECTION: 'intersection',\n    LOCATION: 'location',\n    NONE: 'none',\n    ROAD: 'road',\n    SAVE_MAP: 'save_map',\n    DELETE: 'delete',\n};\n\nfunction MapBuilder() {\n    const prevSavedMapData = useRef(\n        JSON.parse(localStorage.getItem('saved-map-data')) || rawMapData\n    );\n    const curPointerComponentId = useRef(null);\n    const [roadStartWaypointId, setRoadStartWaypointId] = useState(null);\n    const [roadType, setRoadType] = useState(null);\n    const [curHoverComponent, setCurHoverComponent] = useState(null);\n    const [curSelectComponent, setCurSelectComponent] = useState(null);\n    const [mapData, setMapData] = useState(rawMapData);\n    const [curPointerType, setCurPointerType] = useState(POINTER_TYPE.NONE);\n    const [saveMapData, setSaveMapData] = useState('');\n\n    const keyDownHandler = (event) => {\n        if (event.key === 'Escape') {\n            setCurPointerType(POINTER_TYPE.NONE);\n            curPointerComponentId.current = null;\n        }\n    };\n\n    useEffect(() => {\n        window.addEventListener('keydown', keyDownHandler);\n        return () => {\n            window.removeEventListener('keydown', keyDownHandler);\n        };\n    }, []);\n\n    const mouseMoveHandler = (mapCoordinates) => {\n        if (curPointerType === POINTER_TYPE.INTERSECTION) {\n            setMapData((prevMapData) => {\n                let nextIntersectionId = curPointerComponentId.current;\n                if (\n                    !nextIntersectionId ||\n                    !nextIntersectionId.includes('intersection')\n                ) {\n                    nextIntersectionId = `intersection_${Utils.generateShortUuid()}`;\n                }\n                curPointerComponentId.current = nextIntersectionId;\n                return {\n                    ...prevMapData,\n                    intersections: {\n                        ...prevMapData.intersections,\n                        [nextIntersectionId]: {\n                            id: nextIntersectionId,\n                            coord: mapCoordinates,\n                        },\n                    },\n                };\n            });\n        } else if (curPointerType === POINTER_TYPE.LOCATION) {\n            setMapData((prevMapData) => {\n                let nextLocationId = curPointerComponentId.current;\n                if (!nextLocationId || !nextLocationId.includes('location')) {\n                    nextLocationId = `location_${Utils.generateShortUuid()}`;\n                }\n                curPointerComponentId.current = nextLocationId;\n\n                return {\n                    ...prevMapData,\n                    locations: {\n                        ...prevMapData.locations,\n                        [nextLocationId]: {\n                            id: nextLocationId,\n                            coord: mapCoordinates,\n                        },\n                    },\n                };\n            });\n        } else {\n            setMapData(prevSavedMapData.current);\n            curPointerComponentId.current = null;\n        }\n    };\n\n    const mouseDownHandler = (mapCoordinates) => {\n        if (\n            curPointerType === POINTER_TYPE.INTERSECTION ||\n            curPointerType === POINTER_TYPE.LOCATION\n        ) {\n            if (!curHoverComponent) {\n                prevSavedMapData.current = mapData;\n                curPointerComponentId.current = null;\n            }\n        } else if (curPointerType === POINTER_TYPE.ROAD) {\n            if (curHoverComponent) {\n                if (!roadStartWaypointId) {\n                    // road start point\n                    setRoadStartWaypointId(curHoverComponent.id);\n                } else {\n                    // road end point\n                    const nextRoadId = `road_${Utils.generateShortUuid()}`;\n\n                    const newMapData = {\n                        ...prevSavedMapData.current,\n                        roads: {\n                            ...prevSavedMapData.current.roads,\n                            [nextRoadId]: {\n                                id: nextRoadId,\n                                type: roadType,\n                                start: roadStartWaypointId,\n                                end: curHoverComponent.id,\n                            },\n                        },\n                    };\n                    prevSavedMapData.current = newMapData;\n                    setMapData(newMapData);\n                    setRoadStartWaypointId(curHoverComponent.id);\n                }\n            }\n        } else if (curPointerType === POINTER_TYPE.DELETE) {\n            if (curHoverComponent) {\n                deleteComponent(curHoverComponent);\n            }\n        }\n    };\n\n    const lastSavedTime = useRef(performance.now());\n    useEffect(() => {\n        const now = performance.now();\n        if (now - lastSavedTime.current > 5000) {\n            localStorage.setItem('saved-map-data', getSerializedMap());\n            lastSavedTime.current = now;\n        }\n    }, [mapData]);\n\n    const getSerializedMap = () => {\n        const serializedMap = {\n            id: `map_${Utils.generateShortUuid()}`,\n            locations: prevSavedMapData.current.locations,\n            intersections: prevSavedMapData.current.intersections,\n            vehicles: {},\n            roads: prevSavedMapData.current.roads,\n        };\n        return JSON.stringify(serializedMap);\n    };\n\n    const saveMap = () => {\n        setCurPointerType(POINTER_TYPE.SAVE_MAP);\n        setSaveMapData(getSerializedMap());\n    };\n\n    const hoverComponentChangeHandler = (newHoverComponent) => {\n        setCurHoverComponent(newHoverComponent);\n    };\n\n    const selectComponentChangeHandler = (newSelectComponent) => {\n        setCurSelectComponent(newSelectComponent);\n    };\n\n    const deleteComponent = (deleteComponent) => {\n        if (deleteComponent && deleteComponent.id) {\n            const newMapData = JSON.parse(\n                JSON.stringify(prevSavedMapData.current)\n            );\n\n            if (newMapData.intersections[deleteComponent.id]) {\n                delete newMapData.intersections[deleteComponent.id];\n            }\n\n            if (newMapData.locations[deleteComponent.id]) {\n                delete newMapData.locations[deleteComponent.id];\n            }\n\n            for (const roadId of Object.keys(prevSavedMapData.current.roads)) {\n                if (\n                    prevSavedMapData.current.roads[roadId].start ===\n                        deleteComponent.id ||\n                    prevSavedMapData.current.roads[roadId].end ===\n                        deleteComponent.id\n                ) {\n                    delete newMapData.roads[roadId];\n                }\n            }\n\n            prevSavedMapData.current = newMapData;\n            curPointerComponentId.current = null;\n            setMapData(newMapData);\n        }\n    };\n\n    let curPointerRadius = 0;\n    if (curPointerType === POINTER_TYPE.LOCATION) {\n        curPointerRadius = constants.DISPLAY.LOCATION_RADIUS;\n    } else if (curPointerType === POINTER_TYPE.INTERSECTION) {\n        curPointerRadius = constants.DISPLAY.INTERSECTION_RADIUS;\n    }\n\n    let cursorStyle = null;\n    if (curPointerType === POINTER_TYPE.ROAD && roadStartWaypointId) {\n        cursorStyle = 'crosshair';\n    } else if (curPointerType === POINTER_TYPE.DELETE) {\n        cursorStyle = 'no-drop';\n    }\n\n    return (\n        <div className=\"mt-1\">\n            <div>\n                <Button\n                    color=\"primary\"\n                    className=\"m-1\"\n                    onClick={() => {\n                        setMapData(prevSavedMapData.current);\n                        setCurPointerType(POINTER_TYPE.LOCATION);\n                        curPointerComponentId.current = null;\n                    }}\n                >\n                    Add Location\n                </Button>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        setMapData(prevSavedMapData.current);\n                        setCurPointerType(POINTER_TYPE.INTERSECTION);\n                        curPointerComponentId.current = null;\n                    }}\n                    className=\"m-1\"\n                >\n                    Add Intersection\n                </Button>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        setMapData(prevSavedMapData.current);\n                        setCurPointerType(POINTER_TYPE.ROAD);\n                        setRoadType(constants.ROAD_TYPES.TYPES.MAJOR);\n                    }}\n                    className=\"m-1\"\n                >\n                    Build Major Road\n                </Button>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        setMapData(prevSavedMapData.current);\n                        setCurPointerType(POINTER_TYPE.ROAD);\n                        setRoadType(constants.ROAD_TYPES.TYPES.MINOR);\n                    }}\n                    className=\"m-1\"\n                >\n                    Build Minor Road\n                </Button>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        setMapData(prevSavedMapData.current);\n                        setCurPointerType(POINTER_TYPE.ROAD);\n                        setRoadType(constants.ROAD_TYPES.TYPES.LOCAL);\n                    }}\n                    className=\"m-1\"\n                >\n                    Build Local Road\n                </Button>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        setMapData(prevSavedMapData.current);\n                        setCurPointerType(POINTER_TYPE.DELETE);\n                        curPointerComponentId.current = null;\n                    }}\n                    className=\"m-1\"\n                >\n                    Delete Components\n                </Button>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        setRoadStartWaypointId(null);\n                        setMapData(prevSavedMapData.current);\n                        setCurPointerType(POINTER_TYPE.NONE);\n                        curPointerComponentId.current = null;\n                    }}\n                    className=\"m-1\"\n                >\n                    Reset Pointer\n                </Button>\n                <Button color=\"success\" onClick={saveMap} className=\"m-1\">\n                    Save Map\n                </Button>\n            </div>\n            {curPointerType === POINTER_TYPE.SAVE_MAP && (\n                <Alert className=\"mt-2\">\n                    <div className=\"mb-2\">\n                        Copy the map data below to your clipboard.\n                    </div>\n                    <Input type=\"text\" value={saveMapData} readOnly={true} />\n                </Alert>\n            )}\n            <div>\n                <MapViewer\n                    mapData={mapData}\n                    onMouseMove={mouseMoveHandler}\n                    onMouseDown={mouseDownHandler}\n                    onHoverComponentChanged={hoverComponentChangeHandler}\n                    onSelectComponentChange={selectComponentChangeHandler}\n                    curPointerRadius={curPointerRadius}\n                    curPointerComponentId={curPointerComponentId.current}\n                    cursorStyle={cursorStyle}\n                />\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        curState: state.curState,\n    };\n};\n\nexport default connect(mapStateToProps)(MapBuilder);\n","import React, { useEffect, useState, useRef } from 'react';\nimport MapBuilder from './components/MapBuilder';\nimport MapViewer from './components/MapViewer';\nimport { connect } from 'react-redux';\nimport { actionCreators, actionTypes, reduxConstants } from './redux/actions';\nimport MapDataHandler from './utils/MapDataHandler';\n\nfunction App({ socket, curMode, dispatch }) {\n    useEffect(() => {\n        MapDataHandler.init(socket);\n        return () => {\n            MapDataHandler.cleanup(socket);\n            socket.disconnect();\n        };\n    }, []);\n\n    let Content;\n    if (curMode === reduxConstants.APP_MODE_LIST.VIEW_MAP) {\n        Content = <MapViewer socket={socket} />;\n    } else if (curMode === reduxConstants.APP_MODE_LIST.CREATE_MAP) {\n        Content = <MapBuilder />;\n    }\n\n    return <div className=\"App\">{Content}</div>;\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        curMode: state.curMode,\n    };\n};\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport io from 'socket.io-client';\nimport { Provider } from 'react-redux';\nimport { configureStore } from './redux/store';\n\nlet socketUrl = 'http://localhost:3001';\nif (process.env.NODE_ENV === 'production') {\n    socketUrl = 'https://auto-drive-simulator-api.herokuapp.com/';\n}\nconst socket = io(socketUrl);\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={configureStore()}>\n            <App socket={socket} />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}