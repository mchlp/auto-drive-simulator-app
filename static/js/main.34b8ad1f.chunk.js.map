{"version":3,"sources":["redux/store.js","redux/actions/index.js","redux/reducers/rootReducer.js","utils/Utils.js","../../auto-drive-simulator-api/src/constants.js","renderers/RoadRenderer.js","renderers/LocationRenderer.js","renderers/IntersectionRenderer.js","renderers/VehicleRenderer.js","utils/MapDataHandler.js","renderers/MapRenderer.js","components/Map.jsx","utils/ComponentFinder.js","components/LowFpsModal.jsx","components/MenuSection.jsx","components/MenuSections/SelectedDisplay.jsx","components/MenuSections/NavigateSection.jsx","components/MenuSections/MapSettings.jsx","components/MenuSections/MapStats.jsx","components/MenuSections/BuildSection.jsx","components/Menu.jsx","components/AboutModalButton.jsx","components/MapViewer.jsx","components/MapBuilder.jsx","App.js","index.js"],"names":["store","reduxConstants","VIEW_MAP","CREATE_MAP","ADD_LOCATION","ADD_INTERSECTION","BUILD_MAJOR_ROAD","BUILD_MINOR_ROAD","BUILD_LOCAL_ROAD","DELETE_COMPONENTS","RESET_POINTER","SAVE_MAP","actionTypes","actionCreators","showAboutModal","type","payload","followCurTripVehicle","canvasOffset","zoomFactor","zoomOffsetFromViewCentre","canvasPropsDiff","canvasProps","canvasDimensions","curMode","selectedComponent","hoveredComponent","showDynamicLabels","showStaticLabels","showToggleDynamicLabels","showFpsWarning","curTripVehicleId","mapDataLoaded","avgUpdatesPerSecond","avgRendersPerSecond","INITIAL_STATE","averageUpdatesPerSecond","Number","POSITIVE_INFINITY","averageRendersPerSecond","APP_MODE_LIST","showLabels","dynamic","static","showLowFpsWarning","shownLowFpsWarning","width","height","centerX","centerY","zoom","left","top","rootReducer","curState","action","zoomCenterInCanvas","x","y","getStore","Utils","this","shortUuidGenerator","generate","getState","right","bottom","canvasCoordinateArray","radius","canvasCutoffs","getCanvasViewCutoffs","withinLeft","withinRight","withinTop","withinBottom","waypointName","mapData","startsWith","intersections","coord","locations","arrayCoord1","arrayCoord2","squareSum","i","length","Math","pow","sqrt","arrayCoord","map","mapSingleCoord","unmapSingleCoord","singleCoord","index","scaledCoord","scaleSingleCoord","unscaledCoord","unscaleSingleCoord","shortUuid","constants","flickrBase58","LEFT","RIGHT","SPAWNED","DEPARTURE_READY","EN_ROUTE","ARRIVED","TYPES","LOCAL","MINOR","MAJOR","WIDTH","TOWARDS_START","TOWARDS_END","INTERSECTION_RADIUS","LOCATION_RADIUS","VEHICLE_RADIUS","LOCATION_NAME_CONFIG","dictionaries","names","colors","separator","style","getUniqueLocationName","locationNameArr","uniqueNamesGenerator","split","join","RoadRenderer","ctx","drawRoadLines","mode","Object","entries","roads","forEach","roadEntry","roadData","startCoord","mapArrayCoord","getCoordFromWaypoint","start","endCoord","end","ROAD_TYPES","lineWidth","strokeStyle","lineJoin","setLineDash","beginPath","moveTo","lineTo","stroke","roadSlope","roadPerpSlopeNormalized","LocationRenderer","locationEntry","locationData","checkCoordinateInCanvasView","DISPLAY","fillStyle","arc","PI","fill","font","strokeWidth","strokeText","name","fillText","IntersectionRenderer","intersectionEntry","intersectionId","intersectionData","VehicleRenderer","vehicles","vehicleEntry","vehicleId","vehicleData","miterLimit","text","origin","destination","MapDataHandler","lastUpdateTime","performance","now","lastReduxUpdateTime","updateMapDataListener","data","manualUpdate","dispatch","setMapDataLoaded","curVehicleId","coords","setCanvasProps","setFollowCurTripVehicle","setCurTripVehicleId","COMPLETED_TRIP_VEHICLE_ID","lastUpdateTimeElapsed","lastUpdateTimeElapsedList","push","shift","averageUpdateTimeElapsed","reduce","a","b","setAverageUpdatesPerSecond","init","socket","on","cleanup","off","updateMapData","MapRenderer","staticCanvas","getMapData","getShowLabels","canvasWidth","canvasHeight","staticCtx","getContext","clearRect","fillRect","logoImage","Image","src","onload","drawImage","render","dynamicCanvas","dynamicCtx","getCurTripVehicleId","statisCanvas","_renderStatic","_renderDynamic","lastRenderTimeElapsed","lastRenderTime","lastRenderTimeElapsedList","setAverageRendersPerSecond","connect","state","mapLoaded","staticCanvasRef","useRef","dynamicCanvasRef","canvasContainerRef","useEffect","setCanvasDimensions","window","innerHeight","innerWidth","dragging","lastDragCoord","keyDownHandler","event","deltaX","deltaY","key","setCanvasPropsDiff","addEventListener","removeEventListener","onZoom","useCallback","preventDefault","stopPropagation","pageX","pageY","curZoomFactor","setCanvasPropsZoom","zoomCenterInCanvasView","current","offsetLeft","offsetTop","setCanvasOffset","curCanvasContainerRef","passive","curWindowRequestAnimationFrame","requestAnimationFrame","renderMap","renderAll","cancelAnimationFrame","onDragEnd","lastDragEvent","setShowToggleDynamicLabels","onMouseDown","screenX","screenY","onMouseUp","onMouseLeave","onMouseMove","lastCoord","curCoord","ref","position","zIndex","backgroundColor","display","alignContent","alignItems","justifyContent","flexDirection","className","Spinner","color","size","ComponetFinder","intersectionFinder","mapCoordinates","pointerRadius","excludeIdList","includes","getDistanceBetweenArrayCoords","id","locationFinder","findComponent","finderFuncs","func","component","LowFpsModal","isOpen","setIsOpen","Modal","toggle","ModalHeader","ModalBody","ModalFooter","Button","onClick","MenuSection","IconClass","sectionName","children","openInitial","useState","showChildren","setShowChildren","AiFillMinusSquare","AiFillPlusSquare","cursor","oldShowChildren","Content","updateLocationName","editingName","setEditingName","newName","setNewName","componentData","Form","inline","onSubmit","e","Input","fontSize","autoFocus","onBlur","onChange","target","value","toFixed","curTripVehicleData","setCurTripVehicleData","startTripResListener","startTripRes","locationList","values","sort","selectOptionStyle","checked","htmlFor","userSelect","Alert","textAlign","Label","for","location","startWaypointId","endWaypointId","document","getElementById","emit","originId","destinationId","setShowDynamicLabels","padding","setCurMode","statRowStyle","keys","BuildSection","buildActionHandler","BUILD_ACTIONS","background","margin","flexWrap","borderRadius","open","setShowAboutModal","AboutModal","curPointerRadius","curPointerComponentId","cursorStyle","containerRef","getMapCoordinatesFromMouseEvent","canvasCoordinates","unmapArrayCoord","setShowFpsWarning","curHoveredComponent","ComponentFinder","setHoveredComponent","setSelectedComponent","POINTER_TYPE","prevSavedMapData","JSON","parse","localStorage","getItem","rawMapData","roadStartWaypointId","setRoadStartWaypointId","roadType","setRoadType","curPointerType","setCurPointerType","console","log","interval","setInterval","setItem","stringify","getSerializedMap","clearInterval","generateShortUuid","deleteComponent","newMapData","roadId","nextIntersectionId","nextLocationId","nextLocationName","newLocation","nextRoadId","buildAction","serializedMap","dataExportStr","encodeURIComponent","downloadAnchorNode","createElement","setAttribute","body","appendChild","click","remove","saveMap","locationId","newLocationName","disconnect","socketUrl","io","ReactDOM","StrictMode","createStore","composeWithDevTools","applyMiddleware","thunk"],"mappings":"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","file":"static/js/main.34b8ad1f.chunk.js","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nlet store;\n\nfunction configureStore() {\n    store = createStore(\n        rootReducer,\n        composeWithDevTools(applyMiddleware(thunk))\n    );\n    return store;\n}\n\nfunction getStore() {\n    return store;\n}\n\nexport { configureStore, getStore };\n","const reduxConstants = {};\nreduxConstants.APP_MODE_LIST = {\n    VIEW_MAP: 'view_map',\n    CREATE_MAP: 'create_map',\n};\n\nreduxConstants.COMPLETED_TRIP_VEHICLE_ID = '__trip_completed__';\n\nreduxConstants.BUILD_ACTIONS = {\n    ADD_LOCATION: 'ADD_LOCATION',\n    ADD_INTERSECTION: 'ADD_INTERSECTION',\n    BUILD_MAJOR_ROAD: 'BUILD_MAJOR_ROAD',\n    BUILD_MINOR_ROAD: 'BUILD_MINOR_ROAD',\n    BUILD_LOCAL_ROAD: 'BUILD_LOCAL_ROAD',\n    DELETE_COMPONENTS: 'DELETE_COMPONENTS',\n    RESET_POINTER: 'RESET_POINTER',\n    SAVE_MAP: 'SAVE_MAP',\n};\n\nconst actionTypes = {\n    UPDATE_MAP_DATA_LOADED: 'UPDATE_MAP_DATA_LOADED',\n    UPDATE_AVERAGE_RENDERS_PER_SECOND: 'UPDATE_AVERAGE_RENDERS_PER_SECOND',\n    UPDATE_AVERAGE_UPDATES_PER_SECOND: 'UPDATE_AVERAGE_UPDATES_PER_SECOND',\n    UPDATE_CUR_MODE: 'UPDATE_CUR_MODE',\n    UPDATE_SELECTED_COMPONENT: 'UPDATE_SELECTED_COMPONENT',\n    UPDATE_HOVERED_COMPONENT: 'UPDATE_HOVERED_COMPONENT',\n    UPDATE_SHOW_DYNAMIC_LABELS: 'UPDATE_SHOW_DYNAMIC_LABELS',\n    UPDATE_SHOW_STATIC_LABELS: 'UPDATE_SHOW_STATIC_LABELS',\n    UPDATE_SHOW_TOGGLE_DYNAMIC_LABELS: 'UPDATE_SHOW_TOGGLE_DYNAMIC_LABELS',\n    UPDATE_SHOW_FPS_WARNING: 'UPDATE_SHOW_FPS_WARNING',\n    UPDATE_SHOW_ABOUT_MODAL: 'UPDATE_SHOW_ABOUT_MODAL',\n    UPDATE_CUR_TRIP_VEHICLE_ID: 'UPDATE_CUR_TRIP_VEHICLE_ID',\n    UPDATE_FOLLOW_CUR_TRIP_VEHICLE: 'UPDATE_FOLLOW_CUR_TRIP_VEHICLE',\n    UPDATE_CANVAS_DIMENSIONS: 'UPDATE_CANVAS_DIMENSIONS',\n    UPDATE_CANVAS_PROPS_BY_DIFF: 'UPDATE_CANVAS_PROPS_BY_DIFF',\n    UPDATE_CANVAS_PROPS: 'UPDATE_CANVAS_PROPS',\n    UPDATE_CANVAS_PROPS_BY_ZOOM_FACTOR: 'UPDATE_CANVAS_PROPS_BY_ZOOM_FACTOR',\n    UPDATE_CANVAS_OFFSET: 'UPDATE_CANVAS_OFFSET',\n};\n\nconst actionCreators = {};\n\nactionCreators.setShowAboutModal = (showAboutModal) => ({\n    type: actionTypes.UPDATE_SHOW_ABOUT_MODAL,\n    payload: showAboutModal,\n});\n\nactionCreators.setFollowCurTripVehicle = (followCurTripVehicle) => ({\n    type: actionTypes.UPDATE_FOLLOW_CUR_TRIP_VEHICLE,\n    payload: followCurTripVehicle,\n});\n\nactionCreators.setCanvasOffset = (canvasOffset) => ({\n    type: actionTypes.UPDATE_CANVAS_OFFSET,\n    payload: canvasOffset,\n});\n\nactionCreators.setCanvasPropsZoom = (zoomFactor, zoomOffsetFromViewCentre) => ({\n    type: actionTypes.UPDATE_CANVAS_PROPS_BY_ZOOM_FACTOR,\n    payload: { zoomOffsetFromViewCentre, zoomFactor },\n});\n\nactionCreators.setCanvasPropsDiff = (canvasPropsDiff) => ({\n    type: actionTypes.UPDATE_CANVAS_PROPS_BY_DIFF,\n    payload: canvasPropsDiff,\n});\n\nactionCreators.setCanvasProps = (canvasProps) => ({\n    type: actionTypes.UPDATE_CANVAS_PROPS,\n    payload: canvasProps,\n});\n\nactionCreators.setCanvasDimensions = (canvasDimensions) => ({\n    type: actionTypes.UPDATE_CANVAS_DIMENSIONS,\n    payload: canvasDimensions,\n});\n\nactionCreators.setCurMode = (curMode) => ({\n    type: actionTypes.UPDATE_CUR_MODE,\n    payload: curMode,\n});\n\nactionCreators.setSelectedComponent = (selectedComponent) => ({\n    type: actionTypes.UPDATE_SELECTED_COMPONENT,\n    payload: selectedComponent,\n});\n\nactionCreators.setHoveredComponent = (hoveredComponent) => ({\n    type: actionTypes.UPDATE_HOVERED_COMPONENT,\n    payload: hoveredComponent,\n});\n\nactionCreators.setShowDynamicLabels = (showDynamicLabels) => ({\n    type: actionTypes.UPDATE_SHOW_DYNAMIC_LABELS,\n    payload: showDynamicLabels,\n});\n\nactionCreators.setShowStaticLabels = (showStaticLabels) => ({\n    type: actionTypes.UPDATE_SHOW_STATIC_LABELS,\n    payload: showStaticLabels,\n});\n\nactionCreators.setShowToggleDynamicLabels = (showToggleDynamicLabels) => ({\n    type: actionTypes.UPDATE_SHOW_TOGGLE_DYNAMIC_LABELS,\n    payload: showToggleDynamicLabels,\n});\n\nactionCreators.setShowFpsWarning = (showFpsWarning) => ({\n    type: actionTypes.UPDATE_SHOW_FPS_WARNING,\n    payload: showFpsWarning,\n});\n\nactionCreators.setCurTripVehicleId = (curTripVehicleId) => ({\n    type: actionTypes.UPDATE_CUR_TRIP_VEHICLE_ID,\n    payload: curTripVehicleId,\n});\n\nactionCreators.setMapDataLoaded = (mapDataLoaded) => ({\n    type: actionTypes.UPDATE_MAP_DATA_LOADED,\n    payload: mapDataLoaded,\n});\n\nactionCreators.setAverageUpdatesPerSecond = (avgUpdatesPerSecond) => ({\n    type: actionTypes.UPDATE_AVERAGE_UPDATES_PER_SECOND,\n    payload: avgUpdatesPerSecond,\n});\n\nactionCreators.setAverageRendersPerSecond = (avgRendersPerSecond) => ({\n    type: actionTypes.UPDATE_AVERAGE_RENDERS_PER_SECOND,\n    payload: avgRendersPerSecond,\n});\n\nexport { actionCreators, reduxConstants, actionTypes };\n","import { reduxConstants, actionTypes } from '../actions';\n\nconst INITIAL_STATE = {\n    mapDataLoaded: false,\n    averageUpdatesPerSecond: Number.POSITIVE_INFINITY,\n    averageRendersPerSecond: Number.POSITIVE_INFINITY,\n    curMode: reduxConstants.APP_MODE_LIST.VIEW_MAP,\n    selectedComponent: null,\n    hoveredComponent: null,\n    showLabels: {\n        dynamic: true,\n        static: true,\n    },\n    curTripVehicleId: null,\n    followCurTripVehicle: false,\n    showToggleDynamicLabels: true,\n    showLowFpsWarning: false,\n    shownLowFpsWarning: false,\n    showAboutModal: true,\n    canvasDimensions: {\n        width: 0,\n        height: 0,\n    },\n    canvasProps: {\n        centerX: 0,\n        centerY: 0,\n        zoom: 0.5,\n    },\n    canvasOffset: {\n        left: 0,\n        top: 0,\n    },\n};\n\nconst rootReducer = (curState = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case actionTypes.UPDATE_SHOW_ABOUT_MODAL: {\n            return {\n                ...curState,\n                showAboutModal: action.payload,\n            };\n        }\n        case actionTypes.UPDATE_FOLLOW_CUR_TRIP_VEHICLE: {\n            return {\n                ...curState,\n                followCurTripVehicle: action.payload,\n                canvasProps: {\n                    ...curState.canvasProps,\n                    zoom: action.payload ? 1 : curState.canvasProps.zoom,\n                },\n            };\n        }\n        case actionTypes.UPDATE_CANVAS_OFFSET: {\n            return {\n                ...curState,\n                canvasOffset: {\n                    ...curState.canvasOffset,\n                    ...action.payload,\n                },\n            };\n        }\n        case actionTypes.UPDATE_AVERAGE_RENDERS_PER_SECOND: {\n            return {\n                ...curState,\n                averageRendersPerSecond: action.payload,\n            };\n        }\n        case actionTypes.UPDATE_AVERAGE_UPDATES_PER_SECOND: {\n            return {\n                ...curState,\n                averageUpdatesPerSecond: action.payload,\n            };\n        }\n        case actionTypes.UPDATE_MAP_DATA_LOADED: {\n            return {\n                ...curState,\n                mapDataLoaded: action.payload,\n            };\n        }\n        case actionTypes.UPDATE_CANVAS_PROPS_BY_ZOOM_FACTOR: {\n            const { zoomOffsetFromViewCentre, zoomFactor } = action.payload;\n            const zoomCenterInCanvas = {\n                x: zoomOffsetFromViewCentre.x + curState.canvasProps.centerX,\n                y: zoomOffsetFromViewCentre.y + curState.canvasProps.centerY,\n            };\n\n            return {\n                ...curState,\n                canvasProps: {\n                    centerX:\n                        curState.canvasProps.centerX -\n                        zoomCenterInCanvas.x * (1 - zoomFactor),\n                    centerY:\n                        curState.canvasProps.centerY -\n                        zoomCenterInCanvas.y * (1 - zoomFactor),\n                    zoom: curState.canvasProps.zoom * zoomFactor,\n                },\n            };\n        }\n        case actionTypes.UPDATE_CANVAS_PROPS_BY_DIFF: {\n            return {\n                ...curState,\n                canvasProps: {\n                    centerX: action.payload.centerX\n                        ? curState.canvasProps.centerX + action.payload.centerX\n                        : curState.canvasProps.centerX,\n                    centerY: action.payload.centerY\n                        ? curState.canvasProps.centerY + action.payload.centerY\n                        : curState.canvasProps.centerY,\n                    zoom: action.payload.zoom\n                        ? curState.canvasProps.zoom * action.payload.zoom\n                        : curState.canvasProps.zoom,\n                },\n            };\n        }\n        case actionTypes.UPDATE_CANVAS_PROPS: {\n            return {\n                ...curState,\n                canvasProps: {\n                    ...curState.canvasProps,\n                    ...action.payload,\n                },\n            };\n        }\n        case actionTypes.UPDATE_CANVAS_DIMENSIONS:\n            return {\n                ...curState,\n                canvasDimensions: {\n                    ...curState.canvasDimensions,\n                    ...action.payload,\n                },\n            };\n        case actionTypes.UPDATE_CUR_MODE:\n            return {\n                ...curState,\n                curMode: action.payload,\n                selectedComponent: null,\n                hoveredComponent: null,\n                mapDataLoaded:\n                    action.payload === reduxConstants.APP_MODE_LIST.CREATE_MAP,\n            };\n        case actionTypes.UPDATE_SELECTED_COMPONENT:\n            return {\n                ...curState,\n                selectedComponent: action.payload,\n            };\n        case actionTypes.UPDATE_HOVERED_COMPONENT:\n            return {\n                ...curState,\n                hoveredComponent: action.payload,\n            };\n        case actionTypes.UPDATE_SHOW_DYNAMIC_LABELS:\n            return {\n                ...curState,\n                showLabels: {\n                    ...curState.showLabels,\n                    dynamic: action.payload,\n                },\n            };\n        case actionTypes.UPDATE_SHOW_STATIC_LABELS: {\n            return {\n                ...curState,\n                showLabels: {\n                    ...curState.showLabels,\n                    static: action.payload,\n                },\n            };\n        }\n        case actionTypes.UPDATE_SHOW_TOGGLE_DYNAMIC_LABELS: {\n            return {\n                ...curState,\n                showToggleDynamicLabels: action.payload,\n            };\n        }\n        case actionTypes.UPDATE_SHOW_FPS_WARNING: {\n            if (action.payload && !curState.shownLowFpsWarning) {\n                return {\n                    ...curState,\n                    showLowFpsWarning: true,\n                    shownLowFpsWarning: true,\n                };\n            } else {\n                return {\n                    ...curState,\n                    showLowFpsWarning: false,\n                };\n            }\n        }\n        case actionTypes.UPDATE_CUR_TRIP_VEHICLE_ID: {\n            return {\n                ...curState,\n                curTripVehicleId: action.payload,\n            };\n        }\n        default:\n            return curState;\n    }\n};\n\nexport default rootReducer;\n","import shortUuid from 'short-uuid';\nimport { getStore } from '../redux/store';\nexport default class Utils {\n    static shortUuidGenerator = shortUuid(shortUuid.constants.flickrBase58);\n\n    static generateShortUuid() {\n        return this.shortUuidGenerator.generate();\n    }\n\n    static getCanvasViewCutoffs() {\n        const { canvasDimensions } = getStore().getState();\n        const cutoffs = {\n            left: 0,\n            right: canvasDimensions.width,\n            top: 0,\n            bottom: canvasDimensions.height,\n        };\n        return cutoffs;\n    }\n\n    static checkCoordinateInCanvasView(canvasCoordinateArray, radius = 0) {\n        // console.log(canvasCoordinateArray);\n        const canvasCutoffs = this.getCanvasViewCutoffs();\n        const withinLeft =\n            canvasCoordinateArray[0] + radius / 2 >= canvasCutoffs.left;\n        const withinRight =\n            canvasCoordinateArray[0] - radius / 2 <= canvasCutoffs.right;\n        const withinTop =\n            canvasCoordinateArray[1] + radius / 2 >= canvasCutoffs.top;\n        const withinBottom =\n            canvasCoordinateArray[1] - radius / 2 <= canvasCutoffs.bottom;\n        return withinLeft && withinRight && withinTop && withinBottom;\n    }\n\n    static getCoordFromWaypoint(waypointName, mapData) {\n        if (waypointName.startsWith('intersection')) {\n            return mapData.intersections[waypointName].coord;\n        } else if (waypointName.startsWith('location')) {\n            return mapData.locations[waypointName].coord;\n        }\n        return null;\n    }\n\n    static getDistanceBetweenArrayCoords(arrayCoord1, arrayCoord2) {\n        let squareSum = 0;\n        for (let i = 0; i < arrayCoord1.length; i++) {\n            squareSum += Math.pow(arrayCoord2[i] - arrayCoord1[i], 2);\n        }\n        return Math.sqrt(squareSum);\n    }\n\n    static mapArrayCoord(arrayCoord) {\n        if (arrayCoord) {\n            return arrayCoord.map(Utils.mapSingleCoord);\n        }\n        return null;\n    }\n\n    static unmapArrayCoord(arrayCoord) {\n        if (arrayCoord) {\n            return arrayCoord.map(Utils.unmapSingleCoord);\n        }\n        return null;\n    }\n\n    static scaleSingleCoord(singleCoord) {\n        const canvasProps = getStore().getState().canvasProps;\n        return singleCoord * canvasProps.zoom;\n    }\n\n    static unscaleSingleCoord(singleCoord) {\n        const canvasProps = getStore().getState().canvasProps;\n        return singleCoord / canvasProps.zoom;\n    }\n\n    static mapSingleCoord(singleCoord, index) {\n        let scaledCoord = Utils.scaleSingleCoord(singleCoord);\n        const { canvasDimensions, canvasProps } = getStore().getState();\n        if (index === 0) {\n            scaledCoord += canvasDimensions.width / 2 - canvasProps.centerX;\n        } else if (index === 1) {\n            scaledCoord += canvasDimensions.height / 2 - canvasProps.centerY;\n        }\n        return scaledCoord;\n    }\n\n    static unmapSingleCoord(singleCoord, index) {\n        let unscaledCoord = singleCoord;\n        const { canvasDimensions, canvasProps } = getStore().getState();\n        if (index === 0) {\n            unscaledCoord -= canvasDimensions.width / 2 - canvasProps.centerX;\n        } else if (index === 1) {\n            unscaledCoord -= canvasDimensions.height / 2 - canvasProps.centerY;\n        }\n        return Utils.unscaleSingleCoord(unscaledCoord);\n    }\n}\n","import { names, colors, uniqueNamesGenerator } from 'unique-names-generator';\n\nconst constants = {};\n\nconstants.ROAD_DRIVING_SIDE = {\n    LEFT: 'left',\n    RIGHT: 'right',\n};\n\nconstants.VEHICLE_STATE = {\n    SPAWNED: 'spawned',\n    DEPARTURE_READY: 'departure_ready',\n    EN_ROUTE: 'en_route',\n    ARRIVED: 'arrived',\n};\n\nconstants.ROAD_TYPES = {\n    TYPES: {\n        LOCAL: 'LOCAL',\n        MINOR: 'MINOR',\n        MAJOR: 'MAJOR',\n    },\n    WIDTH: {\n        LOCAL: 50,\n        MINOR: 60,\n        MAJOR: 100,\n    },\n};\n\nconstants.VEHICLE_DIRECTION = {\n    TOWARDS_START: 'towards_start',\n    TOWARDS_END: 'towards_end',\n};\n\nconstants.DISPLAY = {\n    INTERSECTION_RADIUS: 45,\n    LOCATION_RADIUS: 30,\n    VEHICLE_RADIUS: 10,\n};\n\nconst LOCATION_NAME_TYPES_LIST = [\n    'House',\n    'Cottage',\n    'Barn',\n    'Townhouse',\n    'Apartment',\n    'Condo',\n    'Bungalow',\n    'Shop',\n    'Mall',\n    'Hotel',\n    'Cinema',\n    'Warehouse',\n    'Office',\n    'Laboratory',\n    'Museum',\n    'Library',\n    'Gym',\n];\n\nconst LOCATION_NAME_CONFIG = {\n    dictionaries: [names, colors, LOCATION_NAME_TYPES_LIST],\n    separator: '_',\n    style: 'capital',\n};\n\nconstants.getUniqueLocationName = () => {\n    const rawLocationName = uniqueNamesGenerator(LOCATION_NAME_CONFIG);\n    const locationNameArr = rawLocationName.split('_');\n    locationNameArr[0] += \"'s\";\n    return locationNameArr.join(' ');\n};\n\nexport default constants;\n","import Utils from '../utils/Utils';\nimport constants from '../constants';\n\nexport default class RoadRenderer {\n    static render(ctx, mapData, showLabels) {\n        const drawRoadLines = (mode) => {\n            Object.entries(mapData.roads).forEach((roadEntry) => {\n                const roadId = roadEntry[0];\n                const roadData = roadEntry[1];\n\n                const startCoord = Utils.mapArrayCoord(\n                    Utils.getCoordFromWaypoint(roadData.start, mapData)\n                );\n                const endCoord = Utils.mapArrayCoord(\n                    Utils.getCoordFromWaypoint(roadData.end, mapData)\n                );\n\n                if (startCoord && endCoord) {\n                    if (mode === 'pavement') {\n                        if (\n                            roadData.type === constants.ROAD_TYPES.TYPES.LOCAL\n                        ) {\n                            ctx.lineWidth = Utils.scaleSingleCoord(\n                                constants.ROAD_TYPES.WIDTH.LOCAL\n                            );\n                        } else if (\n                            roadData.type === constants.ROAD_TYPES.TYPES.MINOR\n                        ) {\n                            ctx.lineWidth = Utils.scaleSingleCoord(\n                                constants.ROAD_TYPES.WIDTH.MINOR\n                            );\n                        } else if (\n                            roadData.type === constants.ROAD_TYPES.TYPES.MAJOR\n                        ) {\n                            ctx.lineWidth = Utils.scaleSingleCoord(\n                                constants.ROAD_TYPES.WIDTH.MAJOR\n                            );\n                        }\n\n                        ctx.strokeStyle = 'black';\n                        ctx.lineJoin = 'round';\n                        ctx.setLineDash([]);\n                        ctx.beginPath();\n                        ctx.moveTo(...startCoord);\n                        ctx.lineTo(...endCoord);\n                        ctx.stroke();\n                    } else if (mode === 'center-line') {\n                        ctx.lineWidth = Utils.scaleSingleCoord(1);\n                        ctx.strokeStyle = 'yellow';\n                        if (\n                            roadData.type === constants.ROAD_TYPES.TYPES.LOCAL\n                        ) {\n                            ctx.setLineDash([\n                                Utils.scaleSingleCoord(5),\n                                Utils.scaleSingleCoord(5),\n                            ]);\n                            ctx.beginPath();\n                            ctx.moveTo(...startCoord);\n                            ctx.lineTo(...endCoord);\n                            ctx.stroke();\n                        } else if (\n                            roadData.type === constants.ROAD_TYPES.TYPES.MINOR\n                        ) {\n                            ctx.setLineDash([]);\n                            ctx.beginPath();\n                            ctx.moveTo(...startCoord);\n                            ctx.lineTo(...endCoord);\n                            ctx.stroke();\n                        } else if (\n                            roadData.type === constants.ROAD_TYPES.TYPES.MAJOR\n                        ) {\n                            ctx.setLineDash([]);\n                            ctx.beginPath();\n                            ctx.moveTo(...startCoord);\n                            ctx.lineTo(...endCoord);\n                            ctx.stroke();\n\n                            const roadSlope = {\n                                x: endCoord[0] - startCoord[0],\n                                y: endCoord[1] - startCoord[1],\n                            };\n\n                            const roadPerpSlopeNormalized = {\n                                x:\n                                    -roadSlope.y /\n                                    Math.sqrt(\n                                        Math.pow(roadSlope.x, 2) +\n                                            Math.pow(roadSlope.y, 2)\n                                    ),\n                                y:\n                                    roadSlope.x /\n                                    Math.sqrt(\n                                        Math.pow(roadSlope.x, 2) +\n                                            Math.pow(roadSlope.y, 2)\n                                    ),\n                            };\n\n                            ctx.strokeStyle = 'white';\n                            ctx.setLineDash([\n                                Utils.scaleSingleCoord(3),\n                                Utils.scaleSingleCoord(5),\n                            ]);\n\n                            // draw left lane lines\n                            ctx.beginPath();\n                            ctx.moveTo(\n                                startCoord[0] +\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.x * 25\n                                    ),\n                                startCoord[1] +\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.y * 25\n                                    )\n                            );\n                            ctx.lineTo(\n                                endCoord[0] +\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.x * 25\n                                    ),\n                                endCoord[1] +\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.y * 25\n                                    )\n                            );\n                            ctx.stroke();\n\n                            // draw right lane lines\n                            ctx.beginPath();\n                            ctx.moveTo(\n                                startCoord[0] -\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.x * 25\n                                    ),\n                                startCoord[1] -\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.y * 25\n                                    )\n                            );\n                            ctx.lineTo(\n                                endCoord[0] -\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.x * 25\n                                    ),\n                                endCoord[1] -\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.y * 25\n                                    )\n                            );\n                            ctx.stroke();\n                        }\n                        ctx.lineJoin = 'round';\n                    }\n                }\n            });\n        };\n\n        drawRoadLines('pavement');\n        drawRoadLines('center-line');\n    }\n}\n","import Utils from '../utils/Utils';\nimport constants from '../constants';\n\nexport default class LocationRenderer {\n    static render(ctx, mapData, showLabels) {\n        Object.entries(mapData.locations).forEach((locationEntry) => {\n            const locationId = locationEntry[0];\n            const locationData = locationEntry[1];\n\n            const coord = Utils.mapArrayCoord(locationData.coord);\n            if (\n                Utils.checkCoordinateInCanvasView(\n                    coord,\n                    constants.DISPLAY.LOCATION_RADIUS\n                )\n            ) {\n                ctx.lineWidth = 2;\n                ctx.strokeStyle = 'grey';\n                ctx.fillStyle = '#ff0000';\n                ctx.setLineDash([]);\n\n                ctx.beginPath();\n                ctx.arc(\n                    coord[0],\n                    coord[1],\n                    Utils.scaleSingleCoord(constants.DISPLAY.LOCATION_RADIUS),\n                    0,\n                    2 * Math.PI\n                );\n                ctx.stroke();\n                ctx.fill();\n\n                if (showLabels) {\n                    ctx.font = Utils.scaleSingleCoord(25) + 'px Roboto';\n                    ctx.strokeStyle = 'white';\n                    ctx.strokeWidth = Utils.scaleSingleCoord(2);\n                    ctx.strokeText(locationData.name, coord[0], coord[1]);\n                    ctx.fillStyle = 'black';\n                    ctx.fillText(locationData.name, coord[0], coord[1]);\n                }\n            }\n        });\n    }\n}\n","import Utils from '../utils/Utils';\nimport constants from '../constants';\n\nexport default class IntersectionRenderer {\n    static render(ctx, mapData, showLabels) {\n        Object.entries(mapData.intersections).forEach((intersectionEntry) => {\n            const intersectionId = intersectionEntry[0];\n            const intersectionData = intersectionEntry[1];\n\n            const coord = Utils.mapArrayCoord(intersectionData.coord);\n            if (\n                Utils.checkCoordinateInCanvasView(\n                    coord,\n                    constants.DISPLAY.INTERSECTION_RADIUS\n                )\n            ) {\n                ctx.lineWidth = 2;\n                ctx.strokeStyle = 'grey';\n                // ctx.fillStyle = '#00ff00';\n                ctx.fillStyle = 'black';\n                ctx.setLineDash([]);\n\n                ctx.beginPath();\n                ctx.arc(\n                    coord[0],\n                    coord[1],\n                    Utils.scaleSingleCoord(\n                        constants.DISPLAY.INTERSECTION_RADIUS\n                    ),\n                    0,\n                    2 * Math.PI\n                );\n                // ctx.stroke();\n                ctx.fill();\n\n                if (showLabels) {\n                    ctx.font = Utils.scaleSingleCoord(50) + 'px Roboto';\n                    ctx.strokeStyle = 'white';\n                    ctx.strokeWidth = Utils.scaleSingleCoord(2);\n                    ctx.strokeText(intersectionId, coord[0], coord[1]);\n                    ctx.fillStyle = 'black';\n                    ctx.fillText(intersectionId, coord[0], coord[1]);\n                }\n            }\n        });\n    }\n}\n","import Utils from '../utils/Utils';\nimport constants from '../constants';\n\nexport default class VehicleRenderer {\n    static render(ctx, mapData, showLabels, curTripVehicleId) {\n        Object.entries(mapData.vehicles).forEach((vehicleEntry) => {\n            const vehicleId = vehicleEntry[0];\n            const vehicleData = vehicleEntry[1];\n\n            const coord = Utils.mapArrayCoord(vehicleData.coord);\n\n            if (\n                Utils.checkCoordinateInCanvasView(\n                    coord,\n                    constants.DISPLAY.VEHICLE_RADIUS\n                )\n            ) {\n                ctx.lineWidth = 2;\n                ctx.strokeStyle = 'grey';\n                if (curTripVehicleId === vehicleId) {\n                    ctx.fillStyle = 'purple';\n                } else {\n                    ctx.fillStyle = 'blue';\n                }\n                ctx.setLineDash([]);\n\n                ctx.beginPath();\n                ctx.arc(\n                    coord[0],\n                    coord[1],\n                    Utils.scaleSingleCoord(constants.DISPLAY.VEHICLE_RADIUS),\n                    0,\n                    2 * Math.PI\n                );\n                ctx.stroke();\n                ctx.fill();\n\n                if (showLabels || curTripVehicleId === vehicleId) {\n                    ctx.lineJoin = 'round';\n                    ctx.miterLimit = 2;\n                    const text = `${vehicleId} | Src: ${vehicleData.origin.name} | Dest: ${vehicleData.destination.name}`;\n                    ctx.font = Utils.scaleSingleCoord(15) + 'px Roboto';\n                    ctx.strokeStyle = 'black';\n                    ctx.strokeWidth = Utils.scaleSingleCoord(1);\n                    ctx.strokeText(text, coord[0], coord[1]);\n                    ctx.fillStyle = 'yellow';\n                    ctx.fillText(text, coord[0], coord[1]);\n                }\n            }\n        });\n    }\n}\n","import { getStore } from '../redux/store';\nimport { actionCreators, reduxConstants } from '../redux/actions';\nimport Utils from './Utils';\n\nconst MapDataHandler = {};\n\nMapDataHandler.mapData = null;\nMapDataHandler.lastUpdateTimeElapsedList = [];\nMapDataHandler.lastUpdateTime = performance.now();\nMapDataHandler.lastReduxUpdateTime = performance.now();\n\nconst REDUX_UPDATE_INTERVAL = 1000;\n\nconst updateMapDataListener = (data, manualUpdate = false) => {   \n    if (\n        manualUpdate ||\n        getStore().getState().curMode === reduxConstants.APP_MODE_LIST.VIEW_MAP\n    ) {\n        MapDataHandler.mapData = data;\n    }\n\n    if (!getStore().getState().mapDataLoaded) {\n        getStore().dispatch(actionCreators.setMapDataLoaded(true));\n    }\n\n    if (getStore().getState().followCurTripVehicle) {\n        const curVehicleId = getStore().getState().curTripVehicleId;\n        if (MapDataHandler.mapData.vehicles[curVehicleId]) {\n            const coords = MapDataHandler.mapData.vehicles[curVehicleId].coord;\n            getStore().dispatch(\n                actionCreators.setCanvasProps({\n                    centerX: Utils.scaleSingleCoord(coords[0]),\n                    centerY: Utils.scaleSingleCoord(coords[1]),\n                })\n            );\n        } else {\n            getStore().dispatch(actionCreators.setFollowCurTripVehicle(false));\n            getStore().dispatch(\n                actionCreators.setCurTripVehicleId(\n                    reduxConstants.COMPLETED_TRIP_VEHICLE_ID\n                )\n            );\n        }\n    }\n\n    // update FPS\n    const now = performance.now();\n    const lastUpdateTimeElapsed = now - MapDataHandler.lastUpdateTime;\n    MapDataHandler.lastUpdateTimeElapsedList.push(lastUpdateTimeElapsed);\n    if (MapDataHandler.lastUpdateTimeElapsedList.length > 100) {\n        MapDataHandler.lastUpdateTimeElapsedList.shift();\n    }\n    if (now - MapDataHandler.lastReduxUpdateTime > REDUX_UPDATE_INTERVAL) {\n        const averageUpdateTimeElapsed =\n            MapDataHandler.lastUpdateTimeElapsedList.reduce(\n                (a, b) => a + b,\n                0\n            ) / MapDataHandler.lastUpdateTimeElapsedList.length;\n        let averageUpdatesPerSecond = 1000 / averageUpdateTimeElapsed;\n        if (MapDataHandler.lastUpdateTimeElapsedList.length < 100) {\n            averageUpdatesPerSecond = Number.POSITIVE_INFINITY;\n        }\n        getStore().dispatch(\n            actionCreators.setAverageUpdatesPerSecond(averageUpdatesPerSecond)\n        );\n        MapDataHandler.lastReduxUpdateTime = now;\n    }\n    MapDataHandler.lastUpdateTime = now;\n};\n\nMapDataHandler.init = (socket) => {\n    socket.on('update-map-data', updateMapDataListener);\n};\n\nMapDataHandler.cleanup = (socket) => {\n    socket.off('update-map-data', updateMapDataListener);\n};\n\nMapDataHandler.updateMapData = (data) => {\n    updateMapDataListener(data, true);\n};\n\nexport default MapDataHandler;\n","import RoadRenderer from './RoadRenderer';\nimport LocationRenderer from './LocationRenderer';\nimport IntersectionRenderer from './IntersectionRenderer';\nimport VehicleRenderer from './VehicleRenderer';\nimport { getStore } from '../redux/store';\nimport MapDataHandler from '../utils/MapDataHandler';\nimport { actionCreators } from '../redux/actions';\n\nconst REDUX_UPDATE_INTERVAL = 1000;\n\nexport default class MapRenderer {\n    static lastRenderTimeElapsedList = [];\n    static lastRenderTime = performance.now();\n    static lastReduxUpdateTime = performance.now();\n\n    static getMapData() {\n        return MapDataHandler.mapData;\n    }\n\n    static getShowLabels() {\n        const curState = getStore().getState();\n        const { showToggleDynamicLabels, followCurTripVehicle } = curState;\n        const showDynamicLabels = curState.showLabels.dynamic;\n        return (\n            showToggleDynamicLabels &&\n            showDynamicLabels &&\n            !followCurTripVehicle\n        );\n    }\n\n    static getCurTripVehicleId() {\n        return getStore().getState().curTripVehicleId;\n    }\n\n    static _renderStatic(staticCanvas) {\n        const mapData = this.getMapData();\n        const showLabels = this.getShowLabels();\n        const {\n            width: canvasWidth,\n            height: canvasHeight,\n        } = getStore().getState().canvasDimensions;\n        if (mapData && staticCanvas) {\n            const staticCtx = staticCanvas.getContext('2d');\n            staticCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n            staticCtx.fillStyle = '#dddddd';\n            staticCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n\n            const logoImage = new Image();\n            logoImage.src = '/logo192.png';\n            logoImage.onload = () => {\n                staticCtx.drawImage(logoImage, 0, 0, 50, 50);\n            };\n\n            RoadRenderer.render(staticCtx, mapData, showLabels);\n            LocationRenderer.render(staticCtx, mapData, true);\n            IntersectionRenderer.render(staticCtx, mapData, false);\n        }\n    }\n\n    static _renderDynamic(dynamicCanvas) {\n        const mapData = this.getMapData();\n        const showLabels = this.getShowLabels();\n        const {\n            width: canvasWidth,\n            height: canvasHeight,\n        } = getStore().getState().canvasDimensions;\n        if (mapData && dynamicCanvas) {\n            const dynamicCtx = dynamicCanvas.getContext('2d');\n            dynamicCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n            VehicleRenderer.render(\n                dynamicCtx,\n                mapData,\n                showLabels,\n                this.getCurTripVehicleId()\n            );\n        }\n    }\n\n    static renderAll(statisCanvas, dynamicCanvas) {\n        this._renderStatic(statisCanvas);\n        this._renderDynamic(dynamicCanvas);\n\n        const now = performance.now();\n        const lastRenderTimeElapsed = now - this.lastRenderTime;\n        this.lastRenderTimeElapsedList.push(lastRenderTimeElapsed);\n        if (this.lastRenderTimeElapsedList.length > 100) {\n            this.lastRenderTimeElapsedList.shift();\n        }\n        if (now - this.lastReduxUpdateTime > REDUX_UPDATE_INTERVAL) {\n            const averageRenderTimeElapsed =\n                this.lastRenderTimeElapsedList.reduce((a, b) => a + b, 0) /\n                this.lastRenderTimeElapsedList.length;\n            let averageRendersPerSecond = 1000 / averageRenderTimeElapsed;\n            if (this.lastRenderTimeElapsedList.length < 100) {\n                averageRendersPerSecond = Number.POSITIVE_INFINITY;\n            }\n            getStore().dispatch(\n                actionCreators.setAverageRendersPerSecond(\n                    averageRendersPerSecond\n                )\n            );\n            this.lastReduxUpdateTime = now;\n        }\n        this.lastRenderTime = now;\n    }\n}\n","import React, { useCallback } from 'react';\nimport { useRef } from 'react';\nimport { useEffect } from 'react';\nimport MapRenderer from '../renderers/MapRenderer';\nimport { actionCreators } from '../redux/actions';\nimport { connect } from 'react-redux';\nimport { Spinner } from 'reactstrap';\n\nconst SHOW_LABEL_MIN_ZOOM_LEVEL = 0.4;\n\nfunction Map({\n    showToggleDynamicLabels,\n    dispatch,\n    canvasProps,\n    canvasDimensions,\n    mapLoaded,\n    followCurTripVehicle,\n}) {\n    const staticCanvasRef = useRef(null);\n    const dynamicCanvasRef = useRef(null);\n    const canvasContainerRef = useRef(null);\n\n    useEffect(() => {\n        dispatch(\n            actionCreators.setCanvasDimensions({\n                height: window.innerHeight,\n                width: window.innerWidth,\n            })\n        );\n        dispatch(\n            actionCreators.setCanvasProps({\n                centerX: 0,\n                centerY: 0,\n                zoom: 0.5,\n            })\n        );\n    }, [dispatch]);\n\n    const dragging = useRef(false);\n    const lastDragCoord = useRef(null);\n\n    useEffect(() => {\n        const keyDownHandler = (event) => {\n            const eventKey = event.key;\n            let deltaX = 0;\n            let deltaY = 0;\n            switch (eventKey) {\n                case 'ArrowUp':\n                    deltaY = 50;\n                    break;\n                case 'ArrowDown':\n                    deltaY = -50;\n                    break;\n                case 'ArrowLeft':\n                    deltaX = 50;\n                    break;\n                case 'ArrowRight':\n                    deltaX = -50;\n                    break;\n                default:\n                    break;\n            }\n            dispatch(\n                actionCreators.setCanvasPropsDiff({\n                    centerX: deltaX,\n                    centerY: deltaY,\n                    zoom: 1,\n                })\n            );\n        };\n\n        window.addEventListener('keydown', keyDownHandler);\n        return () => {\n            window.removeEventListener('keydown', keyDownHandler);\n        };\n    }, [dispatch]);\n\n    const onZoom = useCallback(\n        (event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            if (mapLoaded) {\n                const { pageX, pageY, deltaY } = event;\n\n                const ZOOM_FACTOR = 1.25;\n                let curZoomFactor = 1;\n                if (deltaY > 0) {\n                    // zoom out\n                    curZoomFactor = 1 / ZOOM_FACTOR;\n                } else if (deltaY < 0) {\n                    // zoom in\n                    curZoomFactor = ZOOM_FACTOR;\n                }\n\n                if (followCurTripVehicle) {\n                    dispatch(\n                        actionCreators.setCanvasPropsZoom(curZoomFactor, {\n                            x: 0,\n                            y: 0,\n                        })\n                    );\n                } else {\n                    const zoomCenterInCanvasView = {\n                        x: pageX - staticCanvasRef.current.offsetLeft,\n                        y: pageY - staticCanvasRef.current.offsetTop,\n                    };\n\n                    const zoomOffsetFromViewCentre = {\n                        x:\n                            zoomCenterInCanvasView.x -\n                            canvasDimensions.width / 2,\n                        y:\n                            zoomCenterInCanvasView.y -\n                            canvasDimensions.height / 2,\n                    };\n\n                    dispatch(\n                        actionCreators.setCanvasPropsZoom(\n                            curZoomFactor,\n                            zoomOffsetFromViewCentre\n                        )\n                    );\n                }\n            }\n            return false;\n        },\n        [canvasDimensions, dispatch, mapLoaded, followCurTripVehicle]\n    );\n\n    useEffect(() => {\n        if (canvasContainerRef.current) {\n            dispatch(\n                actionCreators.setCanvasOffset({\n                    left: canvasContainerRef.current.offsetLeft,\n                    top: canvasContainerRef.current.offsetTop,\n                })\n            );\n            const curCanvasContainerRef = canvasContainerRef.current;\n            curCanvasContainerRef.addEventListener('wheel', onZoom, {\n                passive: false,\n            });\n            return () => {\n                curCanvasContainerRef.removeEventListener('wheel', onZoom);\n            };\n        }\n    }, [canvasContainerRef, mapLoaded, dispatch, onZoom]);\n\n    const curWindowRequestAnimationFrame = useRef(null);\n    useEffect(() => {\n        const renderMap = () => {\n            MapRenderer.renderAll(\n                staticCanvasRef.current,\n                dynamicCanvasRef.current\n            );\n            curWindowRequestAnimationFrame.current = window.requestAnimationFrame(\n                renderMap\n            );\n        };\n        curWindowRequestAnimationFrame.current = window.requestAnimationFrame(\n            renderMap\n        );\n\n        return () => {\n            window.cancelAnimationFrame(curWindowRequestAnimationFrame.current);\n        };\n    }, []);\n\n    const onDragStart = (event) => {\n        event.preventDefault();\n        if (mapLoaded && !followCurTripVehicle) {\n            dragging.current = true;\n            lastDragCoord.current = {\n                x: event.screenX,\n                y: event.screenY,\n            };\n        }\n    };\n\n    const onDragEnd = (event) => {\n        dragging.current = false;\n        lastDragCoord.current = null;\n    };\n\n    const lastDragEvent = useRef(null);\n    const onDragMove = (event) => {\n        const DRAG_UPDATE_LIMIT_MS = 1000 / 30;\n        const now = performance.now();\n        if (\n            dragging.current &&\n            (!lastDragEvent.current ||\n                now - lastDragEvent.current > DRAG_UPDATE_LIMIT_MS)\n        ) {\n            lastDragEvent.current = now;\n            const lastCoord = {\n                x: lastDragCoord.current.x,\n                y: lastDragCoord.current.y,\n            };\n            const curCoord = {\n                x: event.screenX,\n                y: event.screenY,\n            };\n\n            dispatch(\n                actionCreators.setCanvasPropsDiff({\n                    zoom: 1,\n                    centerX: -(curCoord.x - lastCoord.x),\n                    centerY: -(curCoord.y - lastCoord.y),\n                })\n            );\n            lastDragCoord.current = curCoord;\n        }\n    };\n\n    useEffect(() => {\n        if (canvasProps.zoom < SHOW_LABEL_MIN_ZOOM_LEVEL) {\n            if (showToggleDynamicLabels) {\n                dispatch(actionCreators.setShowToggleDynamicLabels(false));\n            }\n        } else {\n            if (!showToggleDynamicLabels) {\n                dispatch(actionCreators.setShowToggleDynamicLabels(true));\n            }\n        }\n    }, [canvasProps.zoom, showToggleDynamicLabels, dispatch]);\n\n    return (\n        <div\n            onMouseDown={onDragStart}\n            onMouseUp={onDragEnd}\n            onMouseLeave={onDragEnd}\n            onMouseMove={onDragMove}\n            ref={canvasContainerRef}\n            style={{\n                height: canvasDimensions.height,\n                width: canvasDimensions.width,\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                zIndex: -1,\n            }}\n        >\n            {mapLoaded ? (\n                <div>\n                    <canvas\n                        style={{\n                            position: 'absolute',\n                            zIndex: 2,\n                        }}\n                        ref={dynamicCanvasRef}\n                        height={canvasDimensions.height}\n                        width={canvasDimensions.width}\n                    />\n                    <canvas\n                        style={{\n                            position: 'absolute',\n                            zIndex: 1,\n                        }}\n                        ref={staticCanvasRef}\n                        height={canvasDimensions.height}\n                        width={canvasDimensions.width}\n                    />\n                </div>\n            ) : (\n                <div\n                    style={{\n                        backgroundColor: '#dddddd',\n                        height: '100%',\n                        width: '100%',\n                        display: 'flex',\n                        alignContent: 'center',\n                        alignItems: 'center',\n                        justifyContent: 'center',\n                    }}\n                >\n                    <div\n                        style={{\n                            display: 'flex',\n                            alignContent: 'center',\n                            alignItems: 'center',\n                            justifyContent: 'center',\n                            flexDirection: 'column',\n                        }}\n                    >\n                        <div className=\"mb-2\">\n                            <Spinner type=\"grow\" color=\"primary\" size=\"m\" />\n                        </div>\n                        <div>Conneting to server...</div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => ({\n    curMode: state.curMode,\n    mapLoaded: state.mapDataLoaded,\n    showDynamicLabels: state.showLabels.dynamic,\n    showToggleDynamicLabels: state.showToggleDynamicLabels,\n    canvasProps: state.canvasProps,\n    canvasDimensions: state.canvasDimensions,\n    followCurTripVehicle: state.followCurTripVehicle,\n});\n\nexport default connect(mapStateToProps)(Map);\n","import Utils from './Utils';\nimport constants from '../constants';\nimport MapDataHandler from './MapDataHandler';\n\nconst ComponetFinder = {};\n\nconst intersectionFinder = (mapCoordinates, mapData, pointerRadius, excludeIdList) => {\n    for (const intersectionEntry of Object.entries(mapData.intersections)) {\n        if (!excludeIdList.includes(intersectionEntry[0])) {\n            const intersectionData = intersectionEntry[1];\n            const distance = Utils.getDistanceBetweenArrayCoords(\n                intersectionData.coord,\n                mapCoordinates\n            );\n\n            if (\n                distance <\n                constants.DISPLAY.INTERSECTION_RADIUS + pointerRadius\n            ) {\n                return {\n                    type: 'intersection',\n                    id: intersectionEntry[0],\n                    data: intersectionEntry[1],\n                };\n            }\n        }\n    }\n    return null;\n};\n\nconst locationFinder = (mapCoordinates, mapData, pointerRadius, excludeIdList) => {\n    for (const locationEntry of Object.entries(mapData.locations)) {\n        if (!excludeIdList.includes(locationEntry[0])) {\n            const locationData = locationEntry[1];\n            const distance = Utils.getDistanceBetweenArrayCoords(\n                locationData.coord,\n                mapCoordinates\n            );\n\n            if (distance < constants.DISPLAY.LOCATION_RADIUS + pointerRadius) {\n                return {\n                    type: 'location',\n                    id: locationEntry[0],                    \n                    data: locationEntry[1],\n                };\n            }\n        }\n    }\n    return null;\n};\n\nComponetFinder.findComponent = (\n    mapCoordinates,\n    pointerRadius = 0,\n    excludeIdList = []\n) => {\n    const mapData = MapDataHandler.mapData;\n    const finderFuncs = [intersectionFinder, locationFinder];\n    for (const func of finderFuncs) {\n        const component = func(\n            mapCoordinates,\n            mapData,\n            pointerRadius,\n            excludeIdList\n        );\n        if (component) {\n            return component;\n        }\n    }\n};\n\nexport default ComponetFinder;\n","import React from 'react';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\n\nexport default function LowFpsModal({ isOpen, setIsOpen }) {\n    return (\n        <Modal\n            isOpen={isOpen}\n            toggle={() => {\n                setIsOpen(!isOpen);\n            }}\n        >\n            <ModalHeader\n                toggle={() => {\n                    setIsOpen(!isOpen);\n                }}\n            >\n                Low FPS Detected\n            </ModalHeader>\n            <ModalBody>\n                It has been detected at the map is running at a lower than\n                optimal frame rate. It may help to hide the labels by toggling\n                the <code>Toggle Labels</code> checkbox\n            </ModalBody>\n            <ModalFooter>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        setIsOpen(!isOpen);\n                    }}\n                >\n                    OK\n                </Button>\n            </ModalFooter>\n        </Modal>\n    );\n}\n","import React, { useState } from 'react';\nimport {\n    AiOutlineMinusSquare,\n    AiOutlinePlusSquare,\n    AiFillMinusSquare,\n    AiFillPlusSquare,\n} from 'react-icons/ai';\n\nexport default function MenuSection({\n    sectionName,\n    children,\n    openInitial = true,\n}) {\n    const [showChildren, setShowChildren] = useState(openInitial);\n\n    let IconClass;\n    if (showChildren) {\n        IconClass = AiFillMinusSquare;\n    } else {\n        IconClass = AiFillPlusSquare;\n    }\n\n    return (\n        <div className=\"mx-2 my-2\">\n            <div\n                className=\"font-weight-bold\"\n                style={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    alignContent: 'center',\n                    alignItems: 'center',\n                }}\n            >\n                {sectionName}\n                <div\n                    style={{\n                        cursor: 'pointer',\n                    }}\n                    onClick={() => {\n                        setShowChildren((oldShowChildren) => !oldShowChildren);\n                    }}\n                >\n                    <IconClass />\n                </div>\n            </div>\n            {showChildren && <div>{children}</div>}\n            <hr className=\"mb-0\" />\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { FaPen } from 'react-icons/fa';\nimport { Input, Form } from 'reactstrap';\n\nfunction SelectedDisplay({\n    hoveredComponent,\n    selectedComponent,\n    updateLocationName,\n}) {\n    const [editingName, setEditingName] = useState(false);\n    const [newName, setNewName] = useState('');\n\n    const componentData = hoveredComponent || selectedComponent;\n    let Content;\n    if (componentData) {\n        Content = (\n            <div>\n                <div>Type: {componentData.type}</div>\n                {componentData.type === 'location' && (\n                    <div>\n                        Name:{' '}\n                        {editingName && updateLocationName ? (\n                            <Form\n                                inline\n                                onSubmit={(e) => {\n                                    e.preventDefault();\n                                    updateLocationName(\n                                        componentData.id,\n                                        newName\n                                    );\n                                    setEditingName(false);\n                                    return false;\n                                }}\n                            >\n                                <Input\n                                    style={{\n                                        fontSize: 12,\n                                    }}\n                                    className=\"my-1\"\n                                    type=\"text\"\n                                    name=\"component-name\"\n                                    autoFocus\n                                    onBlur={() => {\n                                        updateLocationName(\n                                            componentData.id,\n                                            newName\n                                        );\n                                        setEditingName(false);\n                                    }}\n                                    onChange={(event) => {\n                                        setNewName(event.target.value);\n                                    }}\n                                    value={newName}\n                                />\n                            </Form>\n                        ) : componentData.data.name ? (\n                            componentData.data.name\n                        ) : (\n                            <span\n                                style={{\n                                    color: 'grey',\n                                }}\n                            >\n                                No name set\n                            </span>\n                        )}\n                        {!editingName && updateLocationName && (\n                            <FaPen\n                                className=\"ml-2\"\n                                style={{ cursor: 'pointer' }}\n                                onClick={() => {\n                                    setNewName(componentData.data.name);\n                                    setEditingName(true);\n                                }}\n                            />\n                        )}\n                    </div>\n                )}\n                <div>\n                    Coordiantes: [{componentData.data.coord[0].toFixed(3)},{' '}\n                    {componentData.data.coord[1].toFixed(3)}]\n                </div>\n            </div>\n        );\n    } else {\n        Content = <div>No component selected</div>;\n    }\n\n    return (\n        <div\n            style={{\n                fontSize: 12,\n            }}\n        >\n            {Content}\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        selectedComponent: state.selectedComponent,\n        hoveredComponent: state.hoveredComponent,\n    };\n};\n\nexport default connect(mapStateToProps)(SelectedDisplay);\n","import React, { useEffect, useState } from 'react';\nimport { FormGroup, Label, Input, Button, Alert } from 'reactstrap';\nimport { actionCreators, reduxConstants } from '../../redux/actions';\nimport MapDataHandler from '../../utils/MapDataHandler';\nimport { connect } from 'react-redux';\n\nfunction NavigateSection({\n    curMode,\n    curTripVehicleId,\n    mapDataLoaded,\n    socket,\n    followCurTripVehicle,\n    dispatch,\n}) {\n    const [curTripVehicleData, setCurTripVehicleData] = useState(null);\n\n    const startTrip = (startWaypointId, endWaypointId) => {\n        if (socket) {\n            socket.emit('start-trip', {\n                originId: startWaypointId,\n                destinationId: endWaypointId,\n            });\n        }\n    };\n\n    useEffect(() => {\n        if (\n            curTripVehicleId &&\n            curTripVehicleId !== reduxConstants.COMPLETED_TRIP_VEHICLE_ID\n        ) {\n            setCurTripVehicleData(\n                MapDataHandler.mapData.vehicles[curTripVehicleId]\n            );\n        }\n    }, []); // should only trigger on mount, not on every curTripVehicleId change\n\n    useEffect(() => {\n        if (socket) {\n            const startTripResListener = (startTripRes) => {\n                if (startTripRes) {\n                    setCurTripVehicleData(startTripRes);\n                    dispatch(\n                        actionCreators.setCurTripVehicleId(startTripRes.id)\n                    );\n                    dispatch(actionCreators.setFollowCurTripVehicle(true));\n                }\n            };\n            socket.on('start-trip-res', startTripResListener);\n            return () => {\n                socket.off('start-trip-res', startTripResListener);\n            };\n        }\n    }, [socket, dispatch]);\n\n    const locationList = mapDataLoaded\n        ? Object.values(MapDataHandler.mapData.locations)\n        : [];\n\n    locationList.sort((a, b) => {\n        if (a.name < b.name) {\n            return -1;\n        } else if (a.name > b.name) {\n            return 1;\n        }\n        return 0;\n    });\n\n    const selectOptionStyle = {\n        fontSize: 10,\n    };\n\n    let Content;\n    if (curMode === reduxConstants.APP_MODE_LIST.CREATE_MAP) {\n        Content = (\n            <div>\n                Starting a trip is not allowed when building a map. Switch to\n                View Mode to start a trip.\n            </div>\n        );\n    } else if (\n        curTripVehicleId &&\n        curTripVehicleId !== reduxConstants.COMPLETED_TRIP_VEHICLE_ID &&\n        curTripVehicleData\n    ) {\n        Content = (\n            <div\n                style={{\n                    fontSize: 12,\n                }}\n            >\n                <div>\n                    <span className=\"font-weight-bold\">Vehicle ID: </span>\n                    {curTripVehicleId}\n                </div>\n                <div>\n                    <span className=\"font-weight-bold\">Origin: </span>\n                    {curTripVehicleData.origin.name}\n                </div>\n                <div>\n                    <span className=\"font-weight-bold\">Destination: </span>\n                    {curTripVehicleData.destination.name}\n                </div>\n                <div\n                    style={{\n                        display: 'flex',\n                        flexDirection: 'row',\n                        alignItems: 'center',\n                        alignContent: 'center',\n                    }}\n                    className=\"my-1\"\n                >\n                    <input\n                        type=\"checkbox\"\n                        id=\"follow-cur-trip-chkbox\"\n                        className=\"mr-1\"\n                        checked={followCurTripVehicle}\n                        onChange={(event) => {\n                            const checked = event.target.checked;\n                            dispatch(\n                                actionCreators.setFollowCurTripVehicle(checked)\n                            );\n                        }}\n                    />\n                    <label\n                        htmlFor=\"follow-cur-trip-chkbox\"\n                        className=\"m-0\"\n                        style={{\n                            userSelect: 'none',\n                            fontSize: 10,\n                        }}\n                    >\n                        Toggle Follow Current Trip Vehicle\n                    </label>\n                </div>\n                <Button\n                    className=\"mt-2\"\n                    color=\"primary\"\n                    style={{\n                        fontSize: 10,\n                    }}\n                    onClick={() => {\n                        setCurTripVehicleData(null);\n                        dispatch(actionCreators.setCurTripVehicleId(null));\n                        dispatch(actionCreators.setFollowCurTripVehicle(false));\n                    }}\n                >\n                    Start a New Trip\n                </Button>\n            </div>\n        );\n    } else {\n        Content = (\n            <div\n                style={{\n                    fontSize: 10,\n                }}\n            >\n                <div>\n                    {curTripVehicleId ===\n                        reduxConstants.COMPLETED_TRIP_VEHICLE_ID && (\n                        <Alert\n                            className=\"mb-1 mt-2 p-2\"\n                            style={{\n                                textAlign: 'center',\n                            }}\n                            color=\"success\"\n                        >\n                            <div className=\"font-weight-bold\">\n                                You have reached your destination!\n                            </div>\n                            You can start a new trip below.\n                        </Alert>\n                    )}\n                    <Label\n                        for=\"navigate-origin\"\n                        className=\"font-weight-bold mb-1 mt-1\"\n                    >\n                        Origin\n                    </Label>\n                    <Input\n                        style={selectOptionStyle}\n                        type=\"select\"\n                        name=\"select\"\n                        id=\"navigate-origin\"\n                    >\n                        {locationList.map((location) => {\n                            return (\n                                <option\n                                    key={location.id}\n                                    value={location.id}\n                                    style={selectOptionStyle}\n                                >\n                                    {location.name}\n                                </option>\n                            );\n                        })}\n                    </Input>\n                </div>\n                <div>\n                    <Label\n                        for=\"navigate-dest\"\n                        className=\"font-weight-bold mb-1 mt-2\"\n                    >\n                        Destination\n                    </Label>\n                    <Input\n                        style={selectOptionStyle}\n                        type=\"select\"\n                        name=\"select\"\n                        id=\"navigate-dest\"\n                    >\n                        {locationList.map((location) => {\n                            return (\n                                <option\n                                    key={location.id}\n                                    value={location.id}\n                                    style={selectOptionStyle}\n                                >\n                                    {location.name}\n                                </option>\n                            );\n                        })}\n                    </Input>\n                </div>\n                <Button\n                    className=\"mt-2\"\n                    color=\"primary\"\n                    style={{\n                        fontSize: 10,\n                    }}\n                    onClick={() => {\n                        startTrip(\n                            document.getElementById('navigate-origin').value,\n                            document.getElementById('navigate-dest').value\n                        );\n                    }}\n                >\n                    Navigate\n                </Button>\n            </div>\n        );\n    }\n\n    return (\n        <div>\n            <div className=\"mb-1\">\n                {curTripVehicleId ? 'Trip Progress' : 'Start a Trip'}\n            </div>\n            {Content}\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => ({\n    mapDataLoaded: state.mapDataLoaded,\n    curTripVehicleId: state.curTripVehicleId,\n    followCurTripVehicle: state.followCurTripVehicle,\n    curMode: state.curMode,\n});\n\nexport default connect(mapStateToProps)(NavigateSection);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { actionCreators, reduxConstants } from '../../redux/actions';\nimport { Button } from 'reactstrap';\n\nfunction MapSettings({\n    curMode,\n    showToggleDynamicLabels,\n    showDynamicLabels,\n    followCurTripVehicle,\n    dispatch,\n}) {\n    return (\n        <div>\n            {showToggleDynamicLabels &&\n                !followCurTripVehicle &&\n                curMode === reduxConstants.APP_MODE_LIST.VIEW_MAP && (\n                    <div\n                        style={{\n                            display: 'flex',\n                            flexDirection: 'row',\n                            alignItems: 'center',\n                            alignContent: 'center',\n                        }}\n                        className=\"my-1\"\n                    >\n                        <input\n                            type=\"checkbox\"\n                            id=\"show-labels-chkbox\"\n                            className=\"mr-1\"\n                            checked={showDynamicLabels}\n                            onChange={(event) => {\n                                const checked = event.target.checked;\n                                dispatch(\n                                    actionCreators.setShowDynamicLabels(checked)\n                                );\n                            }}\n                        />\n                        <label\n                            htmlFor=\"show-labels-chkbox\"\n                            className=\"m-0\"\n                            style={{\n                                userSelect: 'none',\n                                fontSize: 10,\n                            }}\n                        >\n                            Toggle Vehicle Labels\n                        </label>\n                    </div>\n                )}\n            <div>\n                <Button\n                    color=\"link\"\n                    style={{\n                        fontSize: 10,\n                        padding: 0,\n                    }}\n                    onClick={() => {\n                        if (\n                            curMode === reduxConstants.APP_MODE_LIST.CREATE_MAP\n                        ) {\n                            dispatch(\n                                actionCreators.setCurMode(\n                                    reduxConstants.APP_MODE_LIST.VIEW_MAP\n                                )\n                            );\n                        } else {\n                            dispatch(\n                                actionCreators.setCurMode(\n                                    reduxConstants.APP_MODE_LIST.CREATE_MAP\n                                )\n                            );\n                        }\n                    }}\n                >\n                    {curMode === reduxConstants.APP_MODE_LIST.CREATE_MAP\n                        ? 'Switch to View Mode'\n                        : 'Switch to Create Mode'}\n                </Button>\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        showToggleDynamicLabels: state.showToggleDynamicLabels,\n        curMode: state.curMode,\n        showDynamicLabels: state.showLabels.dynamic,\n        followCurTripVehicle: state.followCurTripVehicle,\n    };\n};\n\nexport default connect(mapStateToProps)(MapSettings);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport MapDataHandler from '../../utils/MapDataHandler';\nimport { reduxConstants } from '../../redux/actions';\n\nfunction MapStats({\n    mapDataLoaded,\n    averageUpdatesPerSecond,\n    averageRendersPerSecond,\n    curMode,\n}) {\n    let Content;\n    const statRowStyle = {};\n\n    if (mapDataLoaded) {\n        const mapData = MapDataHandler.mapData;\n        Content = (\n            <div>\n                <div style={statRowStyle}>Map ID: {mapData.id}</div>\n                <div style={statRowStyle}>\n                    Total Vehicles: {Object.keys(mapData.vehicles).length}\n                </div>\n                <div style={statRowStyle}>\n                    Total Intersections:{' '}\n                    {Object.keys(mapData.intersections).length}\n                </div>\n                <div style={statRowStyle}>\n                    Total Locations: {Object.keys(mapData.locations).length}\n                </div>\n                <div style={statRowStyle}>\n                    Total Roads: {Object.keys(mapData.roads).length}\n                </div>\n                {curMode === reduxConstants.APP_MODE_LIST.VIEW_MAP && (\n                    <div style={statRowStyle}>\n                        Avg Updates/Sec: {averageUpdatesPerSecond.toFixed(2)}\n                    </div>\n                )}\n                <div style={statRowStyle}>\n                    Avg Renders/Sec: {averageRendersPerSecond.toFixed(2)}\n                </div>\n            </div>\n        );\n    } else {\n        Content = <div>Map data not loaded.</div>;\n    }\n\n    return (\n        <div\n            style={{\n                fontSize: 12,\n            }}\n        >\n            {Content}\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        averageUpdatesPerSecond: state.averageUpdatesPerSecond,\n        averageRendersPerSecond: state.averageRendersPerSecond,\n        mapDataLoaded: state.mapDataLoaded,\n        curMode: state.curMode,\n    };\n};\n\nexport default connect(mapStateToProps)(MapStats);\n","import React from 'react';\nimport { Button } from 'reactstrap';\nimport { reduxConstants } from '../../redux/actions';\n\nexport default function BuildSection({ buildActionHandler }) {\n    return (\n        <div>\n            <div>\n                <Button\n                    color=\"primary\"\n                    className=\"m-1\"\n                    onClick={() => {\n                        buildActionHandler(\n                            reduxConstants.BUILD_ACTIONS.ADD_LOCATION\n                        );\n                    }}\n                >\n                    Add Location\n                </Button>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        buildActionHandler(\n                            reduxConstants.BUILD_ACTIONS.ADD_INTERSECTION\n                        );\n                    }}\n                    className=\"m-1\"\n                >\n                    Add Intersection\n                </Button>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        buildActionHandler(\n                            reduxConstants.BUILD_ACTIONS.BUILD_MAJOR_ROAD\n                        );\n                    }}\n                    className=\"m-1\"\n                >\n                    Build Major Road\n                </Button>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        buildActionHandler(\n                            reduxConstants.BUILD_ACTIONS.BUILD_MINOR_ROAD\n                        );\n                    }}\n                    className=\"m-1\"\n                >\n                    Build Minor Road\n                </Button>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        buildActionHandler(\n                            reduxConstants.BUILD_ACTIONS.BUILD_LOCAL_ROAD\n                        );\n                    }}\n                    className=\"m-1\"\n                >\n                    Build Local Road\n                </Button>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        buildActionHandler(\n                            reduxConstants.BUILD_ACTIONS.DELETE_COMPONENTS\n                        );\n                    }}\n                    className=\"m-1\"\n                >\n                    Delete Components\n                </Button>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        buildActionHandler(\n                            reduxConstants.BUILD_ACTIONS.RESET_POINTER\n                        );\n                    }}\n                    className=\"m-1\"\n                >\n                    Reset Pointer\n                </Button>\n                <Button\n                    color=\"success\"\n                    onClick={() => {\n                        buildActionHandler(\n                            reduxConstants.BUILD_ACTIONS.SAVE_MAP\n                        );\n                    }}\n                    className=\"m-1\"\n                >\n                    Save Map\n                </Button>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport MenuSection from './MenuSection';\nimport SelectedDisplay from './MenuSections/SelectedDisplay';\nimport NavigateSection from './MenuSections/NavigateSection';\nimport MapSettings from './MenuSections/MapSettings';\nimport MapStats from './MenuSections/MapStats';\nimport { connect } from 'react-redux';\nimport { reduxConstants } from '../redux/actions';\nimport BuildSection from './MenuSections/BuildSection';\n\nfunction Menu({ socket, curMode, buildActionHandler, updateLocationName }) {\n    return (\n        <div\n            style={{\n                background: '#ffffffcc',\n                margin: 10,\n                display: 'flex',\n                flexDirection: 'column',\n                flexWrap: 'wrap',\n                justifyContent: 'space-between',\n                width: 300,\n                position: 'fixed',\n                borderRadius: 5,\n            }}\n        >\n            <MenuSection sectionName=\"Selected Component\">\n                <SelectedDisplay updateLocationName={updateLocationName} />\n            </MenuSection>\n            <MenuSection sectionName=\"Navigator\">\n                {curMode === reduxConstants.APP_MODE_LIST.VIEW_MAP ? (\n                    <NavigateSection socket={socket} />\n                ) : (\n                    <BuildSection buildActionHandler={buildActionHandler} />\n                )}\n            </MenuSection>\n            <MenuSection sectionName=\"Map Stats\">\n                <MapStats />\n            </MenuSection>\n            <MenuSection sectionName=\"Map Settings\">\n                <MapSettings />\n            </MenuSection>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return { curMode: state.curMode };\n};\n\nexport default connect(mapStateToProps)(Menu);\n","import React from 'react';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { actionCreators } from '../redux/actions';\nimport { FaQuestionCircle } from 'react-icons/fa';\n\nfunction AboutModalButton({ showAboutModal, dispatch }) {\n    const setIsOpen = (open) => {\n        dispatch(actionCreators.setShowAboutModal(open));\n    };\n\n    const isOpen = showAboutModal;\n\n    const AboutModal = (\n        <Modal\n            isOpen={isOpen}\n            toggle={() => {\n                setIsOpen(!isOpen);\n            }}\n        >\n            <ModalHeader\n                toggle={() => {\n                    setIsOpen(!isOpen);\n                }}\n            >\n                About\n            </ModalHeader>\n            <ModalBody>About the app.</ModalBody>\n            <ModalFooter>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        setIsOpen(!isOpen);\n                    }}\n                >\n                    OK\n                </Button>\n            </ModalFooter>\n        </Modal>\n    );\n\n    return (\n        <div>\n            {showAboutModal ? (\n                AboutModal\n            ) : (\n                <div\n                    style={{\n                        margin: 5,\n                        position: 'fixed',\n                        right: 0,\n                        top: 0,\n                        cursor: 'pointer',\n                    }}\n                    onClick={() => {\n                        setIsOpen(true);\n                    }}\n                >\n                    <FaQuestionCircle size={25} />\n                </div>\n            )}\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        showAboutModal: state.showAboutModal,\n    };\n};\n\nexport default connect(mapStateToProps)(AboutModalButton);\n","import React, { useEffect, useState } from 'react';\nimport Map from './Map';\nimport { useRef } from 'react';\nimport Utils from '../utils/Utils';\nimport ComponentFinder from '../utils/ComponentFinder';\nimport LowFpsModal from './LowFpsModal';\nimport { connect } from 'react-redux';\nimport Menu from './Menu';\nimport { actionCreators } from '../redux/actions';\nimport AboutModalButton from './AboutModalButton';\n\nfunction MapViewer({\n    onMouseMove,\n    onMouseDown,\n    curPointerRadius,\n    curPointerComponentId,\n    cursorStyle,\n    socket,\n    averageUpdatesPerSecond,\n    selectedComponent,\n    hoveredComponent,\n    dispatch,\n    showDynamicLabels,\n    showLowFpsWarning,\n    mapDataLoaded,\n    canvasOffset,\n    buildActionHandler,\n    updateLocationName,\n}) {\n    const containerRef = useRef(null);\n\n    const getMapCoordinatesFromMouseEvent = (event) => {\n        const { pageX, pageY } = event;\n        const canvasCoordinates = [\n            pageX - canvasOffset.left,\n            pageY - canvasOffset.top,\n        ];\n        return Utils.unmapArrayCoord(canvasCoordinates);\n    };\n\n    useEffect(() => {\n        if (averageUpdatesPerSecond < 20 && showDynamicLabels) {\n            dispatch(actionCreators.setShowFpsWarning(true));\n        }\n    }, [averageUpdatesPerSecond, showDynamicLabels, dispatch]);\n\n    const mouseMoveHandler = (event) => {\n        if (mapDataLoaded && containerRef && containerRef.current) {\n            const mapCoordinates = getMapCoordinatesFromMouseEvent(event);\n            if (onMouseMove) {\n                onMouseMove(mapCoordinates);\n            }\n            const curHoveredComponent = ComponentFinder.findComponent(\n                mapCoordinates,\n                curPointerRadius,\n                [curPointerComponentId]\n            );\n            if (\n                (hoveredComponent ? hoveredComponent.id : hoveredComponent) !==\n                (curHoveredComponent\n                    ? curHoveredComponent.id\n                    : curHoveredComponent)\n            ) {\n                dispatch(\n                    actionCreators.setHoveredComponent(curHoveredComponent)\n                );\n            }\n        }\n    };\n\n    const mouseDownHandler = (event) => {\n        if (containerRef && containerRef.current) {\n            const mapCoordinates = getMapCoordinatesFromMouseEvent(event);\n\n            if (onMouseDown) {\n                onMouseDown(mapCoordinates);\n            }\n\n            if (\n                !selectedComponent ||\n                (hoveredComponent &&\n                    selectedComponent.id !== hoveredComponent.id)\n            ) {\n                dispatch(actionCreators.setSelectedComponent(hoveredComponent));\n            }\n        }\n    };\n\n    return (\n        <div>\n            {showLowFpsWarning && (\n                <LowFpsModal\n                    isOpen={showLowFpsWarning}\n                    setIsOpen={(open) => {\n                        dispatch(actionCreators.setShowFpsWarning(open));\n                    }}\n                />\n            )}\n            <Menu\n                socket={socket}\n                buildActionHandler={buildActionHandler}\n                updateLocationName={updateLocationName}\n            />\n            <AboutModalButton />\n            <div\n                onMouseMove={mouseMoveHandler}\n                onMouseDown={mouseDownHandler}\n                ref={containerRef}\n                style={{\n                    cursor: cursorStyle\n                        ? cursorStyle\n                        : hoveredComponent\n                        ? 'pointer'\n                        : 'move',\n                }}\n            >\n                <Map />\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        mapDataLoaded: state.mapDataLoaded,\n        averageUpdatesPerSecond: state.averageUpdatesPerSecond,\n        selectedComponent: state.selectedComponent,\n        hoveredComponent: state.hoveredComponent,\n        showDynamicLabels: state.showLabels.dynamic,\n        showAboutModal: state.showAboutModal,\n        showLowFpsWarning: state.showLowFpsWarning,\n        canvasOffset: state.canvasOffset,\n    };\n};\n\nexport default connect(mapStateToProps)(MapViewer);\n","import React, { useState, useRef, useEffect } from 'react';\nimport { Button, Container, Input, Card, CardBody, Alert } from 'reactstrap';\nimport MapViewer from './MapViewer';\nimport constants from '../constants';\nimport Utils from '../utils/Utils';\nimport rawMapData from './test.json';\nimport { actionCreators, reduxConstants } from '../redux/actions';\nimport { connect } from 'react-redux';\nimport MapDataHandler from '../utils/MapDataHandler';\n\nconst POINTER_TYPE = {\n    INTERSECTION: 'intersection',\n    LOCATION: 'location',\n    NONE: 'none',\n    ROAD: 'road',\n    DELETE: 'delete',\n};\n\nfunction MapBuilder({\n    dispatch,\n    curMode,\n    selectedComponent,\n    hoveredComponent,\n}) {\n    const prevSavedMapData = useRef(\n        JSON.parse(localStorage.getItem('saved-map-data')) || rawMapData\n    );\n    const curPointerComponentId = useRef(null);\n    const [roadStartWaypointId, setRoadStartWaypointId] = useState(null);\n    const [roadType, setRoadType] = useState(null);\n    const [curPointerType, setCurPointerType] = useState(POINTER_TYPE.NONE);\n\n    useEffect(() => {\n        console.log(curMode);\n        MapDataHandler.updateMapData(prevSavedMapData.current);\n    }, [curMode]);\n\n    const keyDownHandler = (event) => {\n        if (event.key === 'Escape') {\n            setCurPointerType(POINTER_TYPE.NONE);\n            curPointerComponentId.current = null;\n        }\n    };\n\n    useEffect(() => {\n        window.addEventListener('keydown', keyDownHandler);\n        return () => {\n            window.removeEventListener('keydown', keyDownHandler);\n        };\n    }, []);\n\n    const mouseMoveHandler = (mapCoordinates) => {\n        if (curPointerType === POINTER_TYPE.INTERSECTION) {\n            let nextIntersectionId = curPointerComponentId.current;\n            if (\n                !nextIntersectionId ||\n                !nextIntersectionId.includes('intersection')\n            ) {\n                nextIntersectionId = `intersection_${Utils.generateShortUuid()}`;\n            }\n            curPointerComponentId.current = nextIntersectionId;\n            const newMapData = {\n                ...MapDataHandler.mapData,\n                intersections: {\n                    ...MapDataHandler.mapData.intersections,\n                    [nextIntersectionId]: {\n                        ...MapDataHandler.mapData.intersections[\n                            nextIntersectionId\n                        ],\n                        id: nextIntersectionId,\n                        coord: mapCoordinates,\n                    },\n                },\n            };\n            MapDataHandler.updateMapData(newMapData);\n        } else if (curPointerType === POINTER_TYPE.LOCATION) {\n            let nextLocationId = curPointerComponentId.current;\n            let nextLocationName = null;\n            let newLocation = false;\n\n            if (!nextLocationId || !nextLocationId.includes('location')) {\n                nextLocationId = `location_${Utils.generateShortUuid()}`;\n                nextLocationName = constants.getUniqueLocationName();\n                newLocation = true;\n            }\n            curPointerComponentId.current = nextLocationId;\n\n            const newMapData = {\n                ...MapDataHandler.mapData,\n                locations: {\n                    ...MapDataHandler.mapData.locations,\n                    [nextLocationId]: {\n                        ...MapDataHandler.mapData.locations[nextLocationId],\n                        coord: mapCoordinates,\n                    },\n                },\n            };\n\n            if (newLocation) {\n                newMapData.locations[nextLocationId].id = nextLocationId;\n                newMapData.locations[nextLocationId].name = nextLocationName;\n            }\n\n            MapDataHandler.updateMapData(newMapData);\n        } else {\n            MapDataHandler.updateMapData(prevSavedMapData.current);\n            curPointerComponentId.current = null;\n        }\n    };\n\n    const mouseDownHandler = (mapCoordinates) => {\n        if (\n            curPointerType === POINTER_TYPE.INTERSECTION ||\n            curPointerType === POINTER_TYPE.LOCATION\n        ) {\n            if (!hoveredComponent) {\n                prevSavedMapData.current = MapDataHandler.mapData;\n                curPointerComponentId.current = null;\n            }\n        } else if (curPointerType === POINTER_TYPE.ROAD) {\n            if (hoveredComponent) {\n                if (!roadStartWaypointId) {\n                    // road start point\n                    setRoadStartWaypointId(hoveredComponent.id);\n                } else {\n                    // road end point\n                    const nextRoadId = `road_${Utils.generateShortUuid()}`;\n\n                    const newMapData = {\n                        ...prevSavedMapData.current,\n                        roads: {\n                            ...prevSavedMapData.current.roads,\n                            [nextRoadId]: {\n                                id: nextRoadId,\n                                type: roadType,\n                                start: roadStartWaypointId,\n                                end: hoveredComponent.id,\n                            },\n                        },\n                    };\n                    prevSavedMapData.current = newMapData;\n                    MapDataHandler.updateMapData(newMapData);\n                    setRoadStartWaypointId(hoveredComponent.id);\n                }\n            }\n        } else if (curPointerType === POINTER_TYPE.DELETE) {\n            if (hoveredComponent) {\n                deleteComponent(hoveredComponent);\n            }\n        }\n    };\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            localStorage.setItem('saved-map-data', JSON.stringify(getSerializedMap()));\n        }, 5000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, []);\n\n    const getSerializedMap = () => {\n        const serializedMap = {\n            id: `map_${Utils.generateShortUuid()}`,\n            locations: prevSavedMapData.current.locations,\n            intersections: prevSavedMapData.current.intersections,\n            vehicles: {},\n            roads: prevSavedMapData.current.roads,\n        };\n        return serializedMap;\n    };\n\n    const saveMap = () => {\n        const serializedMap = getSerializedMap();\n        const dataExportStr =\n            'data:text/json;charset=utf-8,' +\n            encodeURIComponent(JSON.stringify(serializedMap));\n        const downloadAnchorNode = document.createElement('a');\n        downloadAnchorNode.setAttribute('href', dataExportStr);\n        downloadAnchorNode.setAttribute('download', serializedMap.id + '.json');\n        document.body.appendChild(downloadAnchorNode);\n        downloadAnchorNode.click();\n        downloadAnchorNode.remove();\n    };\n\n    const deleteComponent = (deleteComponent) => {\n        if (deleteComponent && deleteComponent.id) {\n            const newMapData = JSON.parse(\n                JSON.stringify(prevSavedMapData.current)\n            );\n\n            if (newMapData.intersections[deleteComponent.id]) {\n                delete newMapData.intersections[deleteComponent.id];\n            }\n\n            if (newMapData.locations[deleteComponent.id]) {\n                delete newMapData.locations[deleteComponent.id];\n            }\n\n            for (const roadId of Object.keys(prevSavedMapData.current.roads)) {\n                if (\n                    prevSavedMapData.current.roads[roadId].start ===\n                        deleteComponent.id ||\n                    prevSavedMapData.current.roads[roadId].end ===\n                        deleteComponent.id\n                ) {\n                    delete newMapData.roads[roadId];\n                }\n            }\n\n            prevSavedMapData.current = newMapData;\n            curPointerComponentId.current = null;\n            MapDataHandler.updateMapData(newMapData);\n        }\n    };\n\n    let curPointerRadius = 0;\n    if (curPointerType === POINTER_TYPE.LOCATION) {\n        curPointerRadius = constants.DISPLAY.LOCATION_RADIUS;\n    } else if (curPointerType === POINTER_TYPE.INTERSECTION) {\n        curPointerRadius = constants.DISPLAY.INTERSECTION_RADIUS;\n    }\n\n    let cursorStyle = null;\n    if (curPointerType === POINTER_TYPE.ROAD && roadStartWaypointId) {\n        cursorStyle = 'crosshair';\n    } else if (curPointerType === POINTER_TYPE.DELETE) {\n        cursorStyle = 'no-drop';\n    }\n\n    const buildActionHandler = (buildAction) => {\n        switch (buildAction) {\n            case reduxConstants.BUILD_ACTIONS.ADD_LOCATION: {\n                MapDataHandler.updateMapData(prevSavedMapData.current);\n                setCurPointerType(POINTER_TYPE.LOCATION);\n                curPointerComponentId.current = null;\n                break;\n            }\n            case reduxConstants.BUILD_ACTIONS.ADD_INTERSECTION: {\n                MapDataHandler.updateMapData(prevSavedMapData.current);\n                setCurPointerType(POINTER_TYPE.INTERSECTION);\n                curPointerComponentId.current = null;\n                break;\n            }\n            case reduxConstants.BUILD_ACTIONS.BUILD_MAJOR_ROAD: {\n                MapDataHandler.updateMapData(prevSavedMapData.current);\n                setCurPointerType(POINTER_TYPE.ROAD);\n                setRoadType(constants.ROAD_TYPES.TYPES.MAJOR);\n                break;\n            }\n            case reduxConstants.BUILD_ACTIONS.BUILD_MINOR_ROAD: {\n                MapDataHandler.updateMapData(prevSavedMapData.current);\n                setCurPointerType(POINTER_TYPE.ROAD);\n                setRoadType(constants.ROAD_TYPES.TYPES.MINOR);\n                break;\n            }\n            case reduxConstants.BUILD_ACTIONS.BUILD_LOCAL_ROAD: {\n                MapDataHandler.updateMapData(prevSavedMapData.current);\n                setCurPointerType(POINTER_TYPE.ROAD);\n                setRoadType(constants.ROAD_TYPES.TYPES.LOCAL);\n                break;\n            }\n            case reduxConstants.BUILD_ACTIONS.DELETE_COMPONENTS: {\n                MapDataHandler.updateMapData(prevSavedMapData.current);\n                setCurPointerType(POINTER_TYPE.DELETE);\n                curPointerComponentId.current = null;\n                break;\n            }\n            case reduxConstants.BUILD_ACTIONS.RESET_POINTER: {\n                setRoadStartWaypointId(null);\n                MapDataHandler.updateMapData(prevSavedMapData.current);\n                setCurPointerType(POINTER_TYPE.NONE);\n                curPointerComponentId.current = null;\n                break;\n            }\n            case reduxConstants.BUILD_ACTIONS.SAVE_MAP: {\n                saveMap();\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    const updateLocationName = (locationId, newLocationName) => {\n        MapDataHandler.mapData.locations[locationId].name = newLocationName;\n        prevSavedMapData.current = MapDataHandler.mapData;\n    };\n\n    return (\n        <div className=\"mt-1\">\n            <div>\n                <MapViewer\n                    onMouseMove={mouseMoveHandler}\n                    onMouseDown={mouseDownHandler}\n                    curPointerRadius={curPointerRadius}\n                    curPointerComponentId={curPointerComponentId.current}\n                    cursorStyle={cursorStyle}\n                    buildActionHandler={buildActionHandler}\n                    updateLocationName={updateLocationName}\n                />\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        curMode: state.curMode,\n        selectedComponent: state.selectedComponent,\n        hoveredComponent: state.hoveredComponent,\n    };\n};\n\nexport default connect(mapStateToProps)(MapBuilder);\n","import React, { useEffect, useState, useRef } from 'react';\nimport MapBuilder from './components/MapBuilder';\nimport MapViewer from './components/MapViewer';\nimport { connect } from 'react-redux';\nimport { actionCreators, actionTypes, reduxConstants } from './redux/actions';\nimport MapDataHandler from './utils/MapDataHandler';\n\nfunction App({ socket, curMode, dispatch }) {\n    useEffect(() => {\n        MapDataHandler.init(socket);\n        return () => {\n            MapDataHandler.cleanup(socket);\n            socket.disconnect();\n        };\n    }, []);\n\n    let Content;\n    if (curMode === reduxConstants.APP_MODE_LIST.VIEW_MAP) {\n        Content = <MapViewer socket={socket} />;\n    } else if (curMode === reduxConstants.APP_MODE_LIST.CREATE_MAP) {\n        Content = <MapBuilder />;\n    }\n\n    return <div className=\"App\">{Content}</div>;\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        curMode: state.curMode,\n    };\n};\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport io from 'socket.io-client';\nimport { Provider } from 'react-redux';\nimport { configureStore } from './redux/store';\n\nlet socketUrl = 'http://localhost:3001';\nif (process.env.NODE_ENV === 'production') {\n    socketUrl = 'https://auto-drive-simulator-api.herokuapp.com/';\n}\nconst socket = io(socketUrl);\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={configureStore()}>\n            <App socket={socket} />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}