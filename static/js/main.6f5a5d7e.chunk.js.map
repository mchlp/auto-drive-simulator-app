{"version":3,"sources":["Utils.js","../../auto-drive-simulator-api/src/constants.js","renderers/RoadRenderer.js","renderers/LocationRenderer.js","renderers/IntersectionRenderer.js","renderers/VehicleRenderer.js","renderers/MapRenderer.js","components/Map.jsx","components/SelectedDisplay.jsx","builder/ComponentFinder.js","components/MapStats.jsx","components/LowFpsModal.jsx","components/MapViewer.jsx","components/MapBuilder.jsx","App.js","index.js"],"names":["Utils","this","shortUuidGenerator","generate","waypointName","mapData","startsWith","intersections","coord","locations","arrayCoord1","arrayCoord2","squareSum","i","length","Math","pow","sqrt","canvasProps","canvasWidth","canvasHeight","canvasOffsetLeft","canvasOffsetTop","ready","arrayCoord","map","mapSingleCoord","unmapSingleCoord","singleCoord","zoom","index","scaledCoord","scaleSingleCoord","centerX","centerY","unscaledCoord","unscaleSingleCoord","shortUuid","constants","flickrBase58","LEFT","RIGHT","SPAWNED","DEPARTURE_READY","EN_ROUTE","ARRIVED","TYPES","LOCAL","MINOR","MAJOR","WIDTH","TOWARDS_START","TOWARDS_END","INTERSECTION_RADIUS","LOCATION_RADIUS","VIEW_MAP","CREATE_MAP","RoadRenderer","ctx","showLabels","drawRoadLines","mode","Object","entries","roads","forEach","roadEntry","roadData","startCoord","mapArrayCoord","getCoordFromWaypoint","start","endCoord","end","type","ROAD_TYPES","lineWidth","strokeStyle","lineJoin","setLineDash","beginPath","moveTo","lineTo","stroke","roadSlope","x","y","roadPerpSlopeNormalized","LocationRenderer","locationEntry","locationId","locationData","fillStyle","arc","DISPLAY","PI","fill","font","strokeWidth","strokeText","fillText","IntersectionRenderer","intersectionEntry","intersectionId","intersectionData","VehicleRenderer","vehicles","vehicleEntry","vehicleId","vehicleData","miterLimit","text","originId","destinationId","MapRenderer","staticCtx","clearRect","fillRect","logoImage","Image","src","onload","drawImage","render","dynamicCtx","showDynamicLabels","showStaticLabels","renderStatic","renderDynamic","Map","buildingMap","showToggleDynamicLabelOption","setShowToggleDynamicLabelOption","staticCanvasRef","useRef","dynamicCanvasRef","canvasContainerRef","useState","window","innerWidth","setCanvasWidth","innerHeight","setCanvasHeight","setCanvasProps","useEffect","dragging","lastDragCoord","keyDownHandler","event","eventKey","key","deltaX","deltaY","prevCanvasProps","addEventListener","removeEventListener","current","onZoom","passive","initUtils","offsetLeft","offsetTop","staticCanvasObj","dynamicCanvasObj","getContext","renderAll","onDragEnd","lastDragEvent","preventDefault","stopPropagation","pageX","pageY","curZoomFactor","zoomCenterInCanvasView","zoomOffsetFromViewCentre","zoomCenterInCanvas","newZoom","onMouseDown","screenX","screenY","onMouseUp","onMouseLeave","onMouseMove","now","Date","lastCoord","curCoord","ref","style","height","width","position","top","left","zIndex","SelectedDisplay","Content","componentData","className","id","JSON","stringify","data","fontSize","ComponetFinder","intersectionFinder","mapCoordinates","pointerRadius","excludeIdList","includes","getDistanceBetweenArrayCoords","locationFinder","findComponent","finderFuncs","func","component","MapStats","averageDataUpdatesPerSecond","lastUpdateTimeElapsedList","lastUpdateTime","lastUpdateTimeElapsed","push","shift","averageUpdatesPerSecond","reduce","a","b","display","flexDirection","flexWrap","keys","toFixed","LowFpsModal","isOpen","setIsOpen","Modal","toggle","ModalHeader","ModalBody","ModalFooter","Button","color","onClick","MapViewer","onSelectComponentChange","onHoverComponentChanged","curPointerRadius","curPointerComponentId","cursorStyle","curState","setCurState","containerRef","selectedComponent","setSelectedComponent","hoveredComponent","setHoveredComponent","setShowDynamicLabels","showLowFpsWarning","setShowLowFpsWarning","shownLowFpsWarning","setShownLowFpsWarning","getMapCoordinatesFromMouseEvent","canvasCoordinates","unmapArrayCoord","background","margin","justifyContent","alignItems","alignContent","checked","onChange","target","htmlFor","e","prevShowLabels","userSelect","APP_STATE_LIST","curHoveredComponent","ComponentFinder","cursor","POINTER_TYPE","MapBuilder","prevSavedMapData","parse","localStorage","getItem","rawMapData","roadStartWaypointId","setRoadStartWaypointId","roadType","setRoadType","curHoverComponent","setCurHoverComponent","setCurSelectComponent","setMapData","curPointerType","setCurPointerType","saveMapData","setSaveMapData","lastSavedTime","setItem","getSerializedMap","serializedMap","generateShortUuid","deleteComponent","newMapData","roadId","Alert","Input","value","readOnly","prevMapData","nextIntersectionId","nextLocationId","nextRoadId","newHoverComponent","newSelectComponent","socketUrl","socket","io","App","updateMapDataListener","on","off","Number","POSITIVE_INFINITY","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f5a5d7e.chunk.js","sourcesContent":["import shortUuid from 'short-uuid';\nexport default class Utils {\n    static canvasProps;\n    static canvasWidth;\n    static canvasHeight;\n    static canvasOffsetLeft;\n    static canvasOffsetTop;\n    static ready = false;\n    static shortUuidGenerator = shortUuid(shortUuid.constants.flickrBase58);\n\n    static generateShortUuid() {\n        return this.shortUuidGenerator.generate();\n    }\n\n    static getCoordFromWaypoint(waypointName, mapData) {\n        if (waypointName.startsWith('intersection')) {\n            return mapData.intersections[waypointName].coord;\n        } else if (waypointName.startsWith('location')) {\n            return mapData.locations[waypointName].coord;\n        }\n        return null;\n    }\n\n    static getDistanceBetweenArrayCoords(arrayCoord1, arrayCoord2) {\n        let squareSum = 0;\n        for (let i = 0; i < arrayCoord1.length; i++) {\n            squareSum += Math.pow(arrayCoord2[i] - arrayCoord1[i], 2);\n        }\n        return Math.sqrt(squareSum);\n    }\n\n    static initUtils(\n        canvasProps,\n        canvasWidth,\n        canvasHeight,\n        canvasOffsetLeft,\n        canvasOffsetTop\n    ) {\n        Utils.canvasProps = canvasProps;\n        Utils.canvasWidth = canvasWidth;\n        Utils.canvasHeight = canvasHeight;\n        Utils.canvasOffsetLeft = canvasOffsetLeft;\n        Utils.canvasOffsetTop = canvasOffsetTop;\n        Utils.ready = true;\n    }\n\n    static mapArrayCoord(arrayCoord) {\n        if (arrayCoord) {\n            return arrayCoord.map(Utils.mapSingleCoord);\n        }\n        return null;\n    }\n\n    static unmapArrayCoord(arrayCoord) {\n        if (arrayCoord) {\n            return arrayCoord.map(Utils.unmapSingleCoord);\n        }\n        return null;\n    }\n\n    static scaleSingleCoord(singleCoord) {\n        return singleCoord * Utils.canvasProps.zoom;\n    }\n\n    static unscaleSingleCoord(singleCoord) {\n        return singleCoord / Utils.canvasProps.zoom;\n    }\n\n    static mapSingleCoord(singleCoord, index) {\n        let scaledCoord = Utils.scaleSingleCoord(singleCoord);\n        if (index === 0) {\n            scaledCoord += Utils.canvasWidth / 2 - Utils.canvasProps.centerX;\n        } else if (index === 1) {\n            scaledCoord += Utils.canvasHeight / 2 - Utils.canvasProps.centerY;\n        }\n        return scaledCoord;\n    }\n\n    static unmapSingleCoord(singleCoord, index) {\n        let unscaledCoord = singleCoord;\n        if (index === 0) {\n            unscaledCoord -= Utils.canvasWidth / 2 - Utils.canvasProps.centerX;\n        } else if (index === 1) {\n            unscaledCoord -= Utils.canvasHeight / 2 - Utils.canvasProps.centerY;\n        }\n        return Utils.unscaleSingleCoord(unscaledCoord);\n    }\n}\n","const constants = {};\n\nconstants.ROAD_DRIVING_SIDE = {\n    LEFT: 'left',\n    RIGHT: 'right',\n};\n\nconstants.VEHICLE_STATE = {\n    SPAWNED: 'spawned',\n    DEPARTURE_READY: 'departure_ready',\n    EN_ROUTE: 'en_route',\n    ARRIVED: 'arrived'\n};\n\nconstants.ROAD_TYPES = {\n    TYPES: {\n        LOCAL: 'LOCAL',\n        MINOR: 'MINOR',\n        MAJOR: 'MAJOR',\n    },\n    WIDTH: {\n        LOCAL: 50,\n        MINOR: 60,\n        MAJOR: 100,\n    },\n};\n\nconstants.VEHICLE_DIRECTION = {\n    TOWARDS_START: 'towards_start',\n    TOWARDS_END: 'towards_end',\n};\n\nconstants.DISPLAY = {\n    INTERSECTION_RADIUS: 45,\n    LOCATION_RADIUS: 30\n}\n\nconstants.APP_STATE_LIST = {\n    VIEW_MAP: 'view_map',\n    CREATE_MAP: 'create_map',\n};\n\nexport default constants;\n","import Utils from '../Utils';\nimport constants from '../constants';\n\nexport default class RoadRenderer {\n    static render(ctx, mapData, showLabels) {\n        const drawRoadLines = (mode) => {\n            Object.entries(mapData.roads).forEach((roadEntry) => {\n                const roadId = roadEntry[0];\n                const roadData = roadEntry[1];\n\n                const startCoord = Utils.mapArrayCoord(\n                    Utils.getCoordFromWaypoint(roadData.start, mapData)\n                );\n                const endCoord = Utils.mapArrayCoord(\n                    Utils.getCoordFromWaypoint(roadData.end, mapData)\n                );\n\n                if (startCoord && endCoord) {\n                    if (mode === 'pavement') {\n                        if (\n                            roadData.type === constants.ROAD_TYPES.TYPES.LOCAL\n                        ) {\n                            ctx.lineWidth = Utils.scaleSingleCoord(\n                                constants.ROAD_TYPES.WIDTH.LOCAL\n                            );\n                        } else if (\n                            roadData.type === constants.ROAD_TYPES.TYPES.MINOR\n                        ) {\n                            ctx.lineWidth = Utils.scaleSingleCoord(\n                                constants.ROAD_TYPES.WIDTH.MINOR\n                            );\n                        } else if (\n                            roadData.type === constants.ROAD_TYPES.TYPES.MAJOR\n                        ) {\n                            ctx.lineWidth = Utils.scaleSingleCoord(\n                                constants.ROAD_TYPES.WIDTH.MAJOR\n                            );\n                        }\n\n                        ctx.strokeStyle = 'black';\n                        ctx.lineJoin = 'round';\n                        ctx.setLineDash([]);\n                        ctx.beginPath();\n                        ctx.moveTo(...startCoord);\n                        ctx.lineTo(...endCoord);\n                        ctx.stroke();\n                    } else if (mode === 'center-line') {\n                        ctx.lineWidth = Utils.scaleSingleCoord(1);\n                        ctx.strokeStyle = 'yellow';\n                        if (\n                            roadData.type === constants.ROAD_TYPES.TYPES.LOCAL\n                        ) {\n                            ctx.setLineDash([\n                                Utils.scaleSingleCoord(5),\n                                Utils.scaleSingleCoord(5),\n                            ]);\n                            ctx.beginPath();\n                            ctx.moveTo(...startCoord);\n                            ctx.lineTo(...endCoord);\n                            ctx.stroke();\n                        } else if (\n                            roadData.type === constants.ROAD_TYPES.TYPES.MINOR\n                        ) {\n                            ctx.setLineDash([]);\n                            ctx.beginPath();\n                            ctx.moveTo(...startCoord);\n                            ctx.lineTo(...endCoord);\n                            ctx.stroke();\n                        } else if (\n                            roadData.type === constants.ROAD_TYPES.TYPES.MAJOR\n                        ) {\n                            ctx.setLineDash([]);\n                            ctx.beginPath();\n                            ctx.moveTo(...startCoord);\n                            ctx.lineTo(...endCoord);\n                            ctx.stroke();\n\n                            const roadSlope = {\n                                x: endCoord[0] - startCoord[0],\n                                y: endCoord[1] - startCoord[1],\n                            };\n\n                            const roadPerpSlopeNormalized = {\n                                x:\n                                    -roadSlope.y /\n                                    Math.sqrt(\n                                        Math.pow(roadSlope.x, 2) +\n                                            Math.pow(roadSlope.y, 2)\n                                    ),\n                                y:\n                                    roadSlope.x /\n                                    Math.sqrt(\n                                        Math.pow(roadSlope.x, 2) +\n                                            Math.pow(roadSlope.y, 2)\n                                    ),\n                            };\n\n                            ctx.strokeStyle = 'white';\n                            ctx.setLineDash([\n                                Utils.scaleSingleCoord(3),\n                                Utils.scaleSingleCoord(5),\n                            ]);\n\n                            // draw left lane lines\n                            ctx.beginPath();\n                            ctx.moveTo(\n                                startCoord[0] +\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.x * 25\n                                    ),\n                                startCoord[1] +\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.y * 25\n                                    )\n                            );\n                            ctx.lineTo(\n                                endCoord[0] +\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.x * 25\n                                    ),\n                                endCoord[1] +\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.y * 25\n                                    )\n                            );\n                            ctx.stroke();\n\n                            // draw right lane lines\n                            ctx.beginPath();\n                            ctx.moveTo(\n                                startCoord[0] -\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.x * 25\n                                    ),\n                                startCoord[1] -\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.y * 25\n                                    )\n                            );\n                            ctx.lineTo(\n                                endCoord[0] -\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.x * 25\n                                    ),\n                                endCoord[1] -\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.y * 25\n                                    )\n                            );\n                            ctx.stroke();\n                        }\n                        ctx.lineJoin = 'round';\n                    }\n                }\n            });\n        };\n\n        drawRoadLines('pavement');\n        drawRoadLines('center-line');\n    }\n}\n","import Utils from '../Utils';\nimport constants from '../constants';\n\nexport default class LocationRenderer {\n    static render(ctx, mapData, showLabels) {\n        Object.entries(mapData.locations).forEach((locationEntry) => {\n            const locationId = locationEntry[0];\n            const locationData = locationEntry[1];\n\n            const coord = Utils.mapArrayCoord(locationData.coord);\n\n            ctx.lineWidth = 2;\n            ctx.strokeStyle = 'grey';\n            ctx.fillStyle = '#ff0000';\n            ctx.setLineDash([]);\n\n            ctx.beginPath();\n            ctx.arc(\n                coord[0],\n                coord[1],\n                Utils.scaleSingleCoord(constants.DISPLAY.LOCATION_RADIUS),\n                0,\n                2 * Math.PI\n            );\n            ctx.stroke();\n            ctx.fill();\n\n            if (showLabels) {\n                ctx.font = Utils.scaleSingleCoord(50) + 'px Arial';\n                ctx.strokeStyle = 'white';\n                ctx.strokeWidth = Utils.scaleSingleCoord(2);\n                ctx.strokeText(locationId, coord[0], coord[1]);\n                ctx.fillStyle = 'black';\n                ctx.fillText(locationId, coord[0], coord[1]);\n            }\n        });\n    }\n}\n","import Utils from '../Utils';\nimport constants from '../constants';\n\nexport default class IntersectionRenderer {\n    static render(ctx, mapData, showLabels) {\n        Object.entries(mapData.intersections).forEach((intersectionEntry) => {\n            const intersectionId = intersectionEntry[0];\n            const intersectionData = intersectionEntry[1];\n\n            const coord = Utils.mapArrayCoord(intersectionData.coord);\n\n            ctx.lineWidth = 2;\n            ctx.strokeStyle = 'grey';\n            ctx.fillStyle = '#00ff00';\n            ctx.setLineDash([]);\n\n            ctx.beginPath();\n            ctx.arc(\n                coord[0],\n                coord[1],\n                Utils.scaleSingleCoord(constants.DISPLAY.INTERSECTION_RADIUS),\n                0,\n                2 * Math.PI\n            );\n            ctx.stroke();\n            ctx.fill();\n\n            if (showLabels) {\n                ctx.font = Utils.scaleSingleCoord(50) + 'px Arial';\n                ctx.strokeStyle = 'white';\n                ctx.strokeWidth = Utils.scaleSingleCoord(2);\n                ctx.strokeText(intersectionId, coord[0], coord[1]);\n                ctx.fillStyle = 'black';\n                ctx.fillText(intersectionId, coord[0], coord[1]);\n            }\n        });\n    }\n}\n","import Utils from '../Utils';\nimport constants from '../constants';\n\nexport default class VehicleRenderer {\n    static render(ctx, mapData, showLabels) {\n        Object.entries(mapData.vehicles).forEach((vehicleEntry) => {\n            const vehicleId = vehicleEntry[0];\n            const vehicleData = vehicleEntry[1];\n\n            const coord = Utils.mapArrayCoord(vehicleData.coord);\n\n            ctx.lineWidth = 2;\n            ctx.strokeStyle = 'grey';\n            ctx.fillStyle = 'blue';\n            ctx.setLineDash([]);\n\n            ctx.beginPath();\n            ctx.arc(\n                coord[0],\n                coord[1],\n                Utils.scaleSingleCoord(10),\n                0,\n                2 * Math.PI\n            );\n            ctx.stroke();\n            ctx.fill();\n\n            if (showLabels) {\n                ctx.lineJoin = 'round';\n                ctx.miterLimit = 2;\n                const text = `${vehicleId} | Src: ${vehicleData.originId} | Dest: ${vehicleData.destinationId}`;\n                ctx.font = Utils.scaleSingleCoord(15) + 'px Arial';\n                ctx.strokeStyle = 'black';\n                ctx.strokeWidth = Utils.scaleSingleCoord(1);\n                ctx.strokeText(text, coord[0], coord[1]);\n                ctx.fillStyle = 'yellow';\n                ctx.fillText(text, coord[0], coord[1]);\n            }\n        });\n    }\n}\n","import RoadRenderer from './RoadRenderer';\nimport LocationRenderer from './LocationRenderer';\nimport IntersectionRenderer from './IntersectionRenderer';\nimport VehicleRenderer from './VehicleRenderer';\n\nexport default class MapRenderer {\n    static renderStatic(staticCtx, mapData, canvasWidth, canvasHeight, showLabels=true) {\n        staticCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n        staticCtx.fillStyle = '#dddddd';\n        staticCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n\n        const logoImage = new Image();\n        logoImage.src = '/logo192.png';\n        logoImage.onload = () => {\n            staticCtx.drawImage(logoImage, 0, 0, 50, 50);\n        };\n\n        RoadRenderer.render(staticCtx, mapData, showLabels);\n        LocationRenderer.render(staticCtx, mapData, showLabels);\n        IntersectionRenderer.render(staticCtx, mapData, showLabels);\n    }\n\n    static renderDynamic(dynamicCtx, mapData, canvasWidth, canvasHeight, showLabels=false) {\n        dynamicCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n        VehicleRenderer.render(dynamicCtx, mapData, showLabels);\n    }\n    static renderAll(\n        staticCtx,\n        dynamicCtx,\n        mapData,\n        canvasWidth,\n        canvasHeight,\n        showDynamicLabels,\n        showStaticLabels\n    ) {\n        this.renderStatic(staticCtx, mapData, canvasWidth, canvasHeight, showStaticLabels);\n        this.renderDynamic(dynamicCtx, mapData, canvasWidth, canvasHeight, showDynamicLabels);\n    }\n}\n","import React from 'react';\nimport { useRef } from 'react';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport MapRenderer from '../renderers/MapRenderer';\nimport Utils from '../Utils';\n\nconst SHOW_LABEL_MIN_ZOOM_LEVEL = 0.4;\n\nexport default function Map({\n    mapData,\n    showDynamicLabels,\n    buildingMap,\n    showToggleDynamicLabelOption,\n    setShowToggleDynamicLabelOption,\n}) {\n    const staticCanvasRef = useRef(null);\n    const dynamicCanvasRef = useRef(null);\n    const canvasContainerRef = useRef(null);\n\n    const [canvasWidth, setCanvasWidth] = useState(window.innerWidth);\n    const [canvasHeight, setCanvasHeight] = useState(window.innerHeight);\n    const [canvasProps, setCanvasProps] = useState({\n        centerX: 0,\n        centerY: 0,\n        zoom: 0.5,\n    });\n\n    useEffect(() => {\n        setCanvasHeight(window.innerHeight);\n        setCanvasWidth(window.innerWidth);\n    }, []);\n\n    const dragging = useRef(false);\n    const lastDragCoord = useRef(null);\n\n    const keyDownHandler = (event) => {\n        const eventKey = event.key;\n        let deltaX = 0;\n        let deltaY = 0;\n        switch (eventKey) {\n            case 'ArrowUp':\n                deltaY = -50;\n                break;\n            case 'ArrowDown':\n                deltaY = 50;\n                break;\n            case 'ArrowLeft':\n                deltaX = -50;\n                break;\n            case 'ArrowRight':\n                deltaX = 50;\n                break;\n        }\n        setCanvasProps((prevCanvasProps) => {\n            return {\n                centerX: prevCanvasProps.centerX + deltaX,\n                centerY: prevCanvasProps.centerY + deltaY,\n                zoom: prevCanvasProps.zoom,\n            };\n        });\n    };\n\n    useEffect(() => {\n        window.addEventListener('keydown', keyDownHandler);\n        return () => {\n            window.removeEventListener('keydown', keyDownHandler);\n        };\n    }, []);\n\n    useEffect(() => {\n        if (canvasContainerRef.current) {\n            canvasContainerRef.current.addEventListener('wheel', onZoom, {\n                passive: false,\n            });\n            return () => {\n                canvasContainerRef.current.removeEventListener('wheel', onZoom);\n            };\n        }\n    }, [canvasContainerRef]);\n\n    useEffect(() => {\n        if (staticCanvasRef && staticCanvasRef.current) {\n            Utils.initUtils(\n                canvasProps,\n                canvasWidth,\n                canvasHeight,\n                canvasContainerRef.current.offsetLeft,\n                canvasContainerRef.current.offsetTop\n            );\n        }\n    }, [canvasWidth, canvasHeight, canvasProps, staticCanvasRef]);\n\n    useEffect(() => {\n        if (\n            mapData &&\n            staticCanvasRef &&\n            staticCanvasRef.current &&\n            dynamicCanvasRef &&\n            dynamicCanvasRef.current\n        ) {\n            const staticCanvasObj = staticCanvasRef.current;\n            const dynamicCanvasObj = dynamicCanvasRef.current;\n            const staticCtx = staticCanvasObj.getContext('2d');\n            const dynamicCtx = dynamicCanvasObj.getContext('2d');\n            MapRenderer.renderAll(\n                staticCtx,\n                dynamicCtx,\n                mapData,\n                canvasWidth,\n                canvasHeight,\n                showDynamicLabels,\n                true\n            );\n        }\n    }, [\n        staticCanvasRef,\n        dynamicCanvasRef,\n        canvasProps,\n        canvasWidth,\n        canvasHeight,\n        showDynamicLabels,\n    ]);\n\n    useEffect(() => {\n        if (mapData && dynamicCanvasRef && dynamicCanvasRef.current) {\n            if (buildingMap) {\n                const staticCanvasObj = staticCanvasRef.current;\n                const dynamicCanvasObj = dynamicCanvasRef.current;\n                const staticCtx = staticCanvasObj.getContext('2d');\n                const dynamicCtx = dynamicCanvasObj.getContext('2d');\n                MapRenderer.renderAll(\n                    staticCtx,\n                    dynamicCtx,\n                    mapData,\n                    canvasWidth,\n                    canvasHeight,\n                    showDynamicLabels,\n                    true\n                );\n            } else {\n                const dynamicCanvasObj = dynamicCanvasRef.current;\n                const dynamicCtx = dynamicCanvasObj.getContext('2d');\n                MapRenderer.renderDynamic(\n                    dynamicCtx,\n                    mapData,\n                    canvasWidth,\n                    canvasHeight,\n                    showDynamicLabels\n                );\n            }\n        }\n    }, [dynamicCanvasRef, mapData]);\n\n    const onDragStart = (event) => {\n        event.preventDefault();\n        if (mapData) {\n            dragging.current = true;\n            lastDragCoord.current = {\n                x: event.screenX,\n                y: event.screenY,\n            };\n        }\n    };\n\n    const onDragEnd = (event) => {\n        dragging.current = false;\n        lastDragCoord.current = null;\n    };\n\n    const lastDragEvent = useRef(null);\n    const onDragMove = (event) => {\n        const DRAG_UPDATE_LIMIT_MS = 1000 / 30;\n        const now = Date.now();\n        if (\n            dragging.current &&\n            (!lastDragEvent.current ||\n                now - lastDragEvent.current > DRAG_UPDATE_LIMIT_MS)\n        ) {\n            lastDragEvent.current = now;\n            const lastCoord = {\n                x: lastDragCoord.current.x,\n                y: lastDragCoord.current.y,\n            };\n            const curCoord = {\n                x: event.screenX,\n                y: event.screenY,\n            };\n\n            setCanvasProps((prevCanvasProps) => ({\n                ...prevCanvasProps,\n                centerX: prevCanvasProps.centerX - (curCoord.x - lastCoord.x),\n                centerY: prevCanvasProps.centerY - (curCoord.y - lastCoord.y),\n            }));\n            lastDragCoord.current = curCoord;\n        }\n    };\n\n    const onZoom = (event) => {\n        event.preventDefault();\n        event.stopPropagation();\n        if (mapData) {\n            const { pageX, pageY, deltaY } = event;\n\n            const ZOOM_FACTOR = 1.25;\n            let curZoomFactor = 1;\n            if (deltaY > 0) {\n                // zoom out\n                curZoomFactor = 1 / ZOOM_FACTOR;\n            } else if (deltaY < 0) {\n                // zoom in\n                curZoomFactor = ZOOM_FACTOR;\n            }\n\n            setCanvasProps((prevCanvasProps) => {\n                const zoomCenterInCanvasView = {\n                    x: pageX - staticCanvasRef.current.offsetLeft,\n                    y: pageY - staticCanvasRef.current.offsetTop,\n                };\n\n                const zoomOffsetFromViewCentre = {\n                    x: zoomCenterInCanvasView.x - canvasWidth / 2,\n                    y: zoomCenterInCanvasView.y - canvasHeight / 2,\n                };\n\n                const zoomCenterInCanvas = {\n                    x: zoomOffsetFromViewCentre.x + prevCanvasProps.centerX,\n                    y: zoomOffsetFromViewCentre.y + prevCanvasProps.centerY,\n                };\n\n                const newZoom = prevCanvasProps.zoom * curZoomFactor;\n\n                return {\n                    centerX:\n                        prevCanvasProps.centerX -\n                        zoomCenterInCanvas.x * (1 - curZoomFactor),\n                    centerY:\n                        prevCanvasProps.centerY -\n                        zoomCenterInCanvas.y * (1 - curZoomFactor),\n                    zoom: newZoom,\n                };\n            });\n        }\n        return false;\n    };\n\n    useEffect(() => {\n        if (canvasProps.zoom < SHOW_LABEL_MIN_ZOOM_LEVEL) {\n            if (showToggleDynamicLabelOption) {\n                setShowToggleDynamicLabelOption(false);\n            }\n        } else {\n            if (!showToggleDynamicLabelOption) {\n                setShowToggleDynamicLabelOption(true);\n            }\n        }\n    }, [canvasProps.zoom]);\n\n    return (\n        <div\n            onMouseDown={onDragStart}\n            onMouseUp={onDragEnd}\n            onMouseLeave={onDragEnd}\n            onMouseMove={onDragMove}\n            ref={canvasContainerRef}\n            style={{\n                height: canvasHeight,\n                width: canvasWidth,\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                zIndex: -1,\n            }}\n        >\n            <canvas\n                style={{\n                    position: 'absolute',\n                    zIndex: 2,\n                }}\n                ref={dynamicCanvasRef}\n                width={canvasWidth}\n                height={canvasHeight}\n            />\n            <canvas\n                style={{\n                    position: 'absolute',\n                    zIndex: 1,\n                }}\n                ref={staticCanvasRef}\n                width={canvasWidth}\n                height={canvasHeight}\n            />\n        </div>\n    );\n}\n","import React from 'react';\n\nexport default function SelectedDisplay({ componentData }) {\n    let Content;\n    if (componentData) {\n        Content = (\n            <div>\n                <div className=\"font-weight-bold\">Current Component</div>\n                <div>Type: {componentData.type}</div>\n                <div>ID: {componentData.id}</div>\n                <div>\n                    Coord: {JSON.stringify(componentData.data.coord, null, 4)}\n                </div>\n            </div>\n        );\n    } else {\n        Content = <div className=\"font-weight-bold\">No component selected</div>;\n    }\n\n    return (\n        <div\n            style={{\n                fontSize: 12,\n            }}\n        >\n            {Content}\n        </div>\n    );\n}\n","import Utils from '../Utils';\nimport constants from '../constants';\n\nconst ComponetFinder = {};\n\nconst intersectionFinder = (\n    mapCoordinates,\n    mapData,\n    pointerRadius,\n    excludeIdList\n) => {\n    for (const intersectionEntry of Object.entries(mapData.intersections)) {\n        if (!excludeIdList.includes(intersectionEntry[0])) {\n            const intersectionData = intersectionEntry[1];\n            const distance = Utils.getDistanceBetweenArrayCoords(\n                intersectionData.coord,\n                mapCoordinates\n            );\n\n            if (\n                distance <\n                constants.DISPLAY.INTERSECTION_RADIUS + pointerRadius\n            ) {\n                return {\n                    type: 'intersection',\n                    id: intersectionEntry[0],\n                    data: intersectionEntry[1],\n                };\n            }\n        }\n    }\n    return null;\n};\n\nconst locationFinder = (\n    mapCoordinates,\n    mapData,\n    pointerRadius,\n    excludeIdList\n) => {\n    for (const locationEntry of Object.entries(mapData.locations)) {\n        if (!excludeIdList.includes(locationEntry[0])) {\n            const locationData = locationEntry[1];\n            const distance = Utils.getDistanceBetweenArrayCoords(\n                locationData.coord,\n                mapCoordinates\n            );\n\n            if (distance < constants.DISPLAY.LOCATION_RADIUS + pointerRadius) {\n                return {\n                    type: 'location',\n                    id: locationEntry[0],\n                    data: locationEntry[1],\n                };\n            }\n        }\n    }\n    return null;\n};\n\nComponetFinder.findComponent = (\n    mapCoordinates,\n    mapData,\n    pointerRadius = 0,\n    excludeIdList = []\n) => {\n    const finderFuncs = [intersectionFinder, locationFinder];\n    for (const func of finderFuncs) {\n        const component = func(\n            mapCoordinates,\n            mapData,\n            pointerRadius,\n            excludeIdList\n        );\n        if (component) {\n            return component;\n        }\n    }\n};\n\nexport default ComponetFinder;\n","import React, { useRef } from 'react';\nimport { useEffect } from 'react';\n\nexport default function MapStats({ mapData, averageDataUpdatesPerSecond }) {\n    const lastUpdateTimeElapsedList = useRef([]);\n    const lastUpdateTime = useRef(null);\n\n    useEffect(() => {\n        const now = Date.now();\n        let lastUpdateTimeElapsed = 0;\n        if (lastUpdateTime.current) {\n            lastUpdateTimeElapsed = now - lastUpdateTime.current;\n        }\n        lastUpdateTime.current = now;\n        lastUpdateTimeElapsedList.current.push(lastUpdateTimeElapsed);\n        if (lastUpdateTimeElapsedList.current.length > 100) {\n            lastUpdateTimeElapsedList.current.shift();\n        }\n    }, [mapData]);\n\n    let Content;\n\n    const averageUpdateTimeElapsed =\n        lastUpdateTimeElapsedList.current.reduce((a, b) => a + b, 0) /\n        lastUpdateTimeElapsedList.current.length;\n    const averageUpdatesPerSecond = 1000 / averageUpdateTimeElapsed;\n\n    if (mapData) {\n        Content = (\n            <div\n                style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    flexWrap: 'wrap',\n                    height: '40pt',\n                }}\n            >\n                <div className=\"font-weight-bold mx-1\">Map Data</div>\n                <div className=\"mx-1\">Map ID: {mapData.id}</div>\n                <div className=\"mx-1\">\n                    Total Vehicles: {Object.keys(mapData.vehicles).length}\n                </div>\n                <div className=\"mx-1\">\n                    Total Intersections:{' '}\n                    {Object.keys(mapData.intersections).length}\n                </div>\n                <div className=\"mx-1\">\n                    Total Locations: {Object.keys(mapData.locations).length}\n                </div>\n                <div className=\"mx-1\">\n                    Total Roads: {Object.keys(mapData.roads).length}\n                </div>\n                <div className=\"mx-1\">\n                    Avg Canvas Updates/Sec: {averageUpdatesPerSecond.toFixed(2)}\n                </div>\n                <div className=\"mx-1\">\n                    Avg Data Updates/Sec:{' '}\n                    {averageDataUpdatesPerSecond.toFixed(2)}\n                </div>\n            </div>\n        );\n    } else {\n        Content = <div>Map data not loaded.</div>;\n    }\n\n    return (\n        <div\n            style={{\n                fontSize: 12,\n            }}\n        >\n            {Content}\n        </div>\n    );\n}\n","import React from 'react';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\n\nexport default function LowFpsModal({ isOpen, setIsOpen, className }) {\n    return (\n        <Modal\n            isOpen={isOpen}\n            toggle={() => {\n                setIsOpen(!isOpen);\n            }}\n            className={className}\n        >\n            <ModalHeader\n                toggle={() => {\n                    setIsOpen(!isOpen);\n                }}\n            >\n                Low FPS Detected\n            </ModalHeader>\n            <ModalBody>\n                It has been detected at the map is running at a lower than\n                optimal frame rate. It may help to hide the labels by toggling\n                the <code>Toggle Labels</code> checkbox\n            </ModalBody>\n            <ModalFooter>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        setIsOpen(!isOpen);\n                    }}\n                >\n                    OK\n                </Button>\n            </ModalFooter>\n        </Modal>\n    );\n}\n","import React, { useEffect } from 'react';\nimport Map from './Map';\nimport { useRef, useState } from 'react';\nimport Utils from '../Utils';\nimport SelectedDisplay from './SelectedDisplay';\nimport constants from '../constants';\nimport ComponentFinder from '../builder/ComponentFinder';\nimport MapStats from './MapStats';\nimport { Button } from 'reactstrap';\nimport LowFpsModal from './LowFpsModal';\n\nexport default function MapViewer({\n    mapData,\n    onSelectComponentChange,\n    onHoverComponentChanged,\n    onMouseMove,\n    onMouseDown,\n    curPointerRadius,\n    curPointerComponentId,\n    cursorStyle,\n    averageDataUpdatesPerSecond,\n    buildingMap = false,\n    curState,\n    setCurState,\n}) {\n    const containerRef = useRef(null);\n    const [selectedComponent, setSelectedComponent] = useState(null);\n    const [hoveredComponent, setHoveredComponent] = useState(null);\n    const [showDynamicLabels, setShowDynamicLabels] = useState(true);\n    const [\n        showToggleDynamicLabelOption,\n        setShowToggleDynamicLabelOption,\n    ] = useState(true);\n    const [showLowFpsWarning, setShowLowFpsWarning] = useState(false);\n    const [shownLowFpsWarning, setShownLowFpsWarning] = useState(false);\n\n    const getMapCoordinatesFromMouseEvent = (event) => {\n        const { pageX, pageY } = event;\n        const canvasCoordinates = [\n            pageX - Utils.canvasOffsetLeft,\n            pageY - Utils.canvasOffsetTop,\n        ];\n        return Utils.unmapArrayCoord(canvasCoordinates);\n    };\n\n    useEffect(() => {\n        if (\n            averageDataUpdatesPerSecond < 20 &&\n            showDynamicLabels &&\n            !shownLowFpsWarning\n        ) {\n            setShowLowFpsWarning(true);\n            setShownLowFpsWarning(true);\n        }\n    }, [averageDataUpdatesPerSecond, showDynamicLabels]);\n\n    const mouseMoveHandler = (event) => {\n        if (containerRef && containerRef.current && Utils.ready) {\n            const mapCoordinates = getMapCoordinatesFromMouseEvent(event);\n            if (onMouseMove) {\n                onMouseMove(mapCoordinates);\n            }\n            const curHoveredComponent = ComponentFinder.findComponent(\n                mapCoordinates,\n                mapData,\n                curPointerRadius,\n                [curPointerComponentId]\n            );\n            if (\n                (hoveredComponent ? hoveredComponent.id : hoveredComponent) !==\n                (curHoveredComponent\n                    ? curHoveredComponent.id\n                    : curHoveredComponent)\n            ) {\n                setHoveredComponent(curHoveredComponent);\n                if (onHoverComponentChanged) {\n                    onHoverComponentChanged(curHoveredComponent);\n                }\n            }\n        }\n    };\n\n    const mouseDownHandler = (event) => {\n        if (containerRef && containerRef.current && Utils.ready) {\n            const mapCoordinates = getMapCoordinatesFromMouseEvent(event);\n\n            if (onMouseDown) {\n                onMouseDown(mapCoordinates);\n            }\n\n            if (hoveredComponent && selectedComponent !== hoveredComponent) {\n                setSelectedComponent(hoveredComponent);\n                if (onSelectComponentChange) {\n                    onSelectComponentChange(hoveredComponent);\n                }\n            }\n        }\n    };\n\n    return (\n        <div>\n            <LowFpsModal\n                isOpen={showLowFpsWarning}\n                setIsOpen={setShowLowFpsWarning}\n            />\n            <div\n                style={{\n                    background: '#ffffffcc',\n                    margin: 10,\n                }}\n            >\n                <div\n                    style={{\n                        display: 'flex',\n                        flexDirection: 'row',\n                        flexWrap: 'wrap',\n                        justifyContent: 'space-between',\n                    }}\n                >\n                    <div\n                        style={{\n                            display: 'flex',\n                            flexDirection: 'row',\n                            flexWrap: 'wrap',\n                            justifyContent: 'space-between',\n                        }}\n                    >\n                        <div className=\"mx-2 my-1\">\n                            <SelectedDisplay\n                                componentData={\n                                    hoveredComponent || selectedComponent\n                                }\n                            />\n                        </div>\n                        <div className=\"mx-2 my-1\">\n                            <MapStats\n                                mapData={mapData}\n                                averageDataUpdatesPerSecond={\n                                    averageDataUpdatesPerSecond\n                                }\n                            />\n                        </div>\n                    </div>\n                    <div\n                        className=\"mx-2 my-1\"\n                        style={{\n                            fontSize: 10,\n                            display: 'flex',\n                            flexDirection: 'column',\n                            flexWrap: 'wrap',\n                            justifyContent: 'center',\n                            alignItems: 'center',\n                            alignContent: 'center',\n                        }}\n                    >\n                        {showToggleDynamicLabelOption && (\n                            <div\n                                style={{\n                                    fontSize: 10,\n                                    display: 'flex',\n                                    flexDirection: 'row',\n                                    alignItems: 'center',\n                                    alignContent: 'center',\n                                }}\n                            >\n                                <input\n                                    type=\"checkbox\"\n                                    id=\"show-lables-chkbox\"\n                                    className=\"mr-1\"\n                                    checked={showDynamicLabels}\n                                    onChange={(event) => {\n                                        setShowDynamicLabels(\n                                            event.target.checked\n                                        );\n                                    }}\n                                />\n                                <label\n                                    htmlFor=\"show-labels-chkbox\"\n                                    className=\"m-0\"\n                                    onClick={(e) => {\n                                        setShowDynamicLabels(\n                                            (prevShowLabels) => !prevShowLabels\n                                        );\n                                    }}\n                                    style={{\n                                        userSelect: 'none',\n                                    }}\n                                >\n                                    Toggle Vehicle Labels\n                                </label>\n                            </div>\n                        )}\n                        <Button\n                            color=\"link\"\n                            className=\"ml-2\"\n                            style={{\n                                fontSize: 10,\n                            }}\n                            onClick={() => {\n                                if (\n                                    curState ===\n                                    constants.APP_STATE_LIST.CREATE_MAP\n                                ) {\n                                    setCurState(\n                                        constants.APP_STATE_LIST.VIEW_MAP\n                                    );\n                                } else {\n                                    setCurState(\n                                        constants.APP_STATE_LIST.CREATE_MAP\n                                    );\n                                }\n                            }}\n                        >\n                            {curState === constants.APP_STATE_LIST.CREATE_MAP\n                                ? 'Switch to View Mode'\n                                : 'Switch to Create Mode'}\n                        </Button>\n                    </div>\n                </div>\n            </div>\n            <div\n                onMouseMove={mouseMoveHandler}\n                onMouseDown={mouseDownHandler}\n                ref={containerRef}\n                style={{\n                    cursor: cursorStyle\n                        ? cursorStyle\n                        : hoveredComponent\n                        ? 'pointer'\n                        : 'move',\n                }}\n            >\n                <Map\n                    mapData={mapData}\n                    showDynamicLabels={\n                        showDynamicLabels && showToggleDynamicLabelOption\n                    }\n                    showToggleDynamicLabelOption={showToggleDynamicLabelOption}\n                    setShowToggleDynamicLabelOption={setShowToggleDynamicLabelOption}\n                    buildingMap={buildingMap}\n                />\n            </div>\n        </div>\n    );\n}\n","import React, { useState, useRef, useEffect } from 'react';\nimport { Button, Container, Input, Card, CardBody, Alert } from 'reactstrap';\nimport MapViewer from './MapViewer';\nimport constants from '../constants';\nimport Utils from '../Utils';\nimport rawMapData from './test.json';\n\nconst POINTER_TYPE = {\n    INTERSECTION: 'intersection',\n    LOCATION: 'location',\n    NONE: 'none',\n    ROAD: 'road',\n    SAVE_MAP: 'save_map',\n    DELETE: 'delete',\n};\n\nexport default function MapBuilder({ curState, setCurState }) {\n    const prevSavedMapData = useRef(JSON.parse(localStorage.getItem('saved-map-data')) || rawMapData);\n    const curPointerComponentId = useRef(null);\n    const [roadStartWaypointId, setRoadStartWaypointId] = useState(null);\n    const [roadType, setRoadType] = useState(null);\n    const [curHoverComponent, setCurHoverComponent] = useState(null);\n    const [curSelectComponent, setCurSelectComponent] = useState(null);\n    const [mapData, setMapData] = useState(rawMapData);\n    const [curPointerType, setCurPointerType] = useState(POINTER_TYPE.NONE);\n    const [saveMapData, setSaveMapData] = useState('');\n\n    const keyDownHandler = (event) => {\n        if (event.key === 'Escape') {\n            setCurPointerType(POINTER_TYPE.NONE);\n            curPointerComponentId.current = null;\n        }\n    };\n\n    useEffect(() => {\n        window.addEventListener('keydown', keyDownHandler);\n        return () => {\n            window.removeEventListener('keydown', keyDownHandler);\n        };\n    }, []);\n\n    const mouseMoveHandler = (mapCoordinates) => {\n        if (curPointerType === POINTER_TYPE.INTERSECTION) {\n            setMapData((prevMapData) => {\n                let nextIntersectionId = curPointerComponentId.current;\n                if (\n                    !nextIntersectionId ||\n                    !nextIntersectionId.includes('intersection')\n                ) {\n                    nextIntersectionId = `intersection_${Utils.generateShortUuid()}`;\n                }\n                curPointerComponentId.current = nextIntersectionId;\n                return {\n                    ...prevMapData,\n                    intersections: {\n                        ...prevMapData.intersections,\n                        [nextIntersectionId]: {\n                            id: nextIntersectionId,\n                            coord: mapCoordinates,\n                        },\n                    },\n                };\n            });\n        } else if (curPointerType === POINTER_TYPE.LOCATION) {\n            setMapData((prevMapData) => {\n                let nextLocationId = curPointerComponentId.current;\n                if (!nextLocationId || !nextLocationId.includes('location')) {\n                    nextLocationId = `location_${Utils.generateShortUuid()}`;\n                }\n                curPointerComponentId.current = nextLocationId;\n\n                return {\n                    ...prevMapData,\n                    locations: {\n                        ...prevMapData.locations,\n                        [nextLocationId]: {\n                            id: nextLocationId,\n                            coord: mapCoordinates,\n                        },\n                    },\n                };\n            });\n        } else {\n            setMapData(prevSavedMapData.current);\n            curPointerComponentId.current = null;\n        }\n    };\n\n    const mouseDownHandler = (mapCoordinates) => {\n        if (\n            curPointerType === POINTER_TYPE.INTERSECTION ||\n            curPointerType === POINTER_TYPE.LOCATION\n        ) {\n            if (!curHoverComponent) {\n                prevSavedMapData.current = mapData;\n                curPointerComponentId.current = null;\n            }\n        } else if (curPointerType === POINTER_TYPE.ROAD) {\n            if (curHoverComponent) {\n                if (!roadStartWaypointId) {\n                    // road start point\n                    setRoadStartWaypointId(curHoverComponent.id);\n                } else {\n                    // road end point\n                    const nextRoadId = `road_${Utils.generateShortUuid()}`;\n\n                    const newMapData = {\n                        ...prevSavedMapData.current,\n                        roads: {\n                            ...prevSavedMapData.current.roads,\n                            [nextRoadId]: {\n                                id: nextRoadId,\n                                type: roadType,\n                                start: roadStartWaypointId,\n                                end: curHoverComponent.id,\n                            },\n                        },\n                    };\n                    prevSavedMapData.current = newMapData;\n                    setMapData(newMapData);\n                    setRoadStartWaypointId(curHoverComponent.id);\n                }\n            }\n        } else if (curPointerType === POINTER_TYPE.DELETE) {\n            if (curHoverComponent) {\n                deleteComponent(curHoverComponent);\n            }\n        }\n    };\n\n    const lastSavedTime = useRef(Date.now());\n    useEffect(() => {\n        const now = Date.now();\n        if (now - lastSavedTime.current > 5000) {\n            localStorage.setItem('saved-map-data', getSerializedMap());\n            lastSavedTime.current = now;\n        }\n    }, [mapData]);\n\n    const getSerializedMap = () => {\n        const serializedMap = {\n            id: `map_${Utils.generateShortUuid()}`,\n            locations: prevSavedMapData.current.locations,\n            intersections: prevSavedMapData.current.intersections,\n            vehicles: {},\n            roads: prevSavedMapData.current.roads,\n        };\n        return JSON.stringify(serializedMap);\n    };\n\n    const saveMap = () => {\n        setCurPointerType(POINTER_TYPE.SAVE_MAP);\n        setSaveMapData(getSerializedMap());\n    };\n\n    const hoverComponentChangeHandler = (newHoverComponent) => {\n        setCurHoverComponent(newHoverComponent);\n    };\n\n    const selectComponentChangeHandler = (newSelectComponent) => {\n        setCurSelectComponent(newSelectComponent);\n    };\n\n    const deleteComponent = (deleteComponent) => {\n        if (deleteComponent && deleteComponent.id) {\n            const newMapData = JSON.parse(\n                JSON.stringify(prevSavedMapData.current)\n            );\n\n            if (newMapData.intersections[deleteComponent.id]) {\n                delete newMapData.intersections[deleteComponent.id];\n            }\n\n            if (newMapData.locations[deleteComponent.id]) {\n                delete newMapData.locations[deleteComponent.id];\n            }\n\n            for (const roadId of Object.keys(prevSavedMapData.current.roads)) {\n                if (\n                    prevSavedMapData.current.roads[roadId].start ===\n                        deleteComponent.id ||\n                    prevSavedMapData.current.roads[roadId].end ===\n                        deleteComponent.id\n                ) {\n                    delete newMapData.roads[roadId];\n                }\n            }\n\n            prevSavedMapData.current = newMapData;\n            curPointerComponentId.current = null;\n            setMapData(newMapData);\n        }\n    };\n\n    let curPointerRadius = 0;\n    if (curPointerType === POINTER_TYPE.LOCATION) {\n        curPointerRadius = constants.DISPLAY.LOCATION_RADIUS;\n    } else if (curPointerType === POINTER_TYPE.INTERSECTION) {\n        curPointerRadius = constants.DISPLAY.INTERSECTION_RADIUS;\n    }\n\n    let cursorStyle = null;\n    if (curPointerType === POINTER_TYPE.ROAD && roadStartWaypointId) {\n        cursorStyle = 'crosshair';\n    } else if (curPointerType === POINTER_TYPE.DELETE) {\n        cursorStyle = 'no-drop'\n    }\n\n    return (\n        <div className=\"mt-1\">\n            <div>\n                <Button\n                    color=\"primary\"\n                    className=\"m-1\"\n                    onClick={() => {\n                        setMapData(prevSavedMapData.current);\n                        setCurPointerType(POINTER_TYPE.LOCATION);\n                        curPointerComponentId.current = null;\n                    }}\n                >\n                    Add Location\n                </Button>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        setMapData(prevSavedMapData.current);\n                        setCurPointerType(POINTER_TYPE.INTERSECTION);\n                        curPointerComponentId.current = null;\n                    }}\n                    className=\"m-1\"\n                >\n                    Add Intersection\n                </Button>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        setMapData(prevSavedMapData.current);\n                        setCurPointerType(POINTER_TYPE.ROAD);\n                        setRoadType(constants.ROAD_TYPES.TYPES.MAJOR);\n                    }}\n                    className=\"m-1\"\n                >\n                    Build Major Road\n                </Button>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        setMapData(prevSavedMapData.current);\n                        setCurPointerType(POINTER_TYPE.ROAD);\n                        setRoadType(constants.ROAD_TYPES.TYPES.MINOR);\n                    }}\n                    className=\"m-1\"\n                >\n                    Build Minor Road\n                </Button>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        setMapData(prevSavedMapData.current);\n                        setCurPointerType(POINTER_TYPE.ROAD);\n                        setRoadType(constants.ROAD_TYPES.TYPES.LOCAL);\n                    }}\n                    className=\"m-1\"\n                >\n                    Build Local Road\n                </Button>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        setMapData(prevSavedMapData.current);\n                        setCurPointerType(POINTER_TYPE.DELETE);\n                        curPointerComponentId.current = null;\n                    }}\n                    className=\"m-1\"\n                >\n                    Delete Components\n                </Button>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        setRoadStartWaypointId(null);\n                        setMapData(prevSavedMapData.current);\n                        setCurPointerType(POINTER_TYPE.NONE);\n                        curPointerComponentId.current = null;\n                    }}\n                    className=\"m-1\"\n                >\n                    Reset Pointer\n                </Button>\n                <Button color=\"success\" onClick={saveMap} className=\"m-1\">\n                    Save Map\n                </Button>\n            </div>\n            {curPointerType === POINTER_TYPE.SAVE_MAP && (\n                <Alert className=\"mt-2\">\n                    <div className=\"mb-2\">\n                        Copy the map data below to your clipboard.\n                    </div>\n                    <Input type=\"text\" value={saveMapData} readOnly={true} />\n                </Alert>\n            )}\n            <div>\n                <MapViewer\n                    mapData={mapData}\n                    onMouseMove={mouseMoveHandler}\n                    onMouseDown={mouseDownHandler}\n                    onHoverComponentChanged={hoverComponentChangeHandler}\n                    onSelectComponentChange={selectComponentChangeHandler}\n                    curPointerRadius={curPointerRadius}\n                    curPointerComponentId={curPointerComponentId.current}\n                    cursorStyle={cursorStyle}\n                    averageDataUpdatesPerSecond={0}\n                    buildingMap={true}\n                    curState={curState}\n                    setCurState={setCurState}\n                />\n            </div>\n        </div>\n    );\n}\n","import React, { useEffect, useState, useRef } from 'react';\nimport MapBuilder from './components/MapBuilder';\nimport io from 'socket.io-client';\nimport MapViewer from './components/MapViewer';\nimport constants from './constants';\n\nlet socketUrl = 'http://localhost:3001';\nif (process.env.NODE_ENV === 'production') {\n    socketUrl = 'https://auto-drive-simulator-api.herokuapp.com/';\n}\nconst socket = io(socketUrl);\n\nfunction App() {\n    const [mapData, setMapData] = useState(null);\n    const [curState, setCurState] = useState(constants.APP_STATE_LIST.VIEW_MAP);\n\n    const lastUpdateTimeElapsedList = useRef([]);\n    const lastUpdateTime = useRef(null);\n\n    useEffect(() => {\n        const updateMapDataListener = (data) => {\n            const now = Date.now();\n            let lastUpdateTimeElapsed = 0;\n            if (lastUpdateTime.current) {\n                lastUpdateTimeElapsed = now - lastUpdateTime.current;\n            }\n            lastUpdateTime.current = now;\n            lastUpdateTimeElapsedList.current.push(lastUpdateTimeElapsed);\n            if (lastUpdateTimeElapsedList.current.length > 100) {\n                lastUpdateTimeElapsedList.current.shift();\n            }\n            setMapData(data);\n        };\n        socket.on('update-map-data', updateMapDataListener);\n        return () => {\n            socket.off('update-map-data', updateMapDataListener);\n        };\n    }, []);\n\n    const averageUpdateTimeElapsed =\n        lastUpdateTimeElapsedList.current.reduce((a, b) => a + b, 0) /\n        lastUpdateTimeElapsedList.current.length;\n    let averageUpdatesPerSecond = 1000 / averageUpdateTimeElapsed;\n    if (lastUpdateTimeElapsedList.current.length < 100) {\n        averageUpdatesPerSecond = Number.POSITIVE_INFINITY;\n    }\n\n    let Content;\n    if (curState === constants.APP_STATE_LIST.VIEW_MAP) {\n        if (mapData) {\n            Content = (\n                <MapViewer\n                    mapData={mapData}\n                    averageDataUpdatesPerSecond={averageUpdatesPerSecond}\n                    curState={curState}\n                    setCurState={setCurState}\n                />\n            );\n        } else {\n            Content = <div>Loading map data...</div>;\n        }\n    } else if (curState === constants.APP_STATE_LIST.CREATE_MAP) {\n        Content = <MapBuilder curState={curState} setCurState={setCurState} />;\n    }\n\n    return <div className=\"App\">{Content}</div>;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}