{"version":3,"sources":["utils/Utils.js","../../auto-drive-simulator-api/src/constants.js","redux/store.js","renderers/RoadRenderer.js","renderers/LocationRenderer.js","renderers/IntersectionRenderer.js","renderers/VehicleRenderer.js","redux/actions/index.js","redux/reducers/rootReducer.js","utils/MapDataHandler.js","renderers/MapRenderer.js","components/Map.jsx","components/SelectedDisplay.jsx","builder/ComponentFinder.js","components/MapStats.jsx","components/LowFpsModal.jsx","components/MenuSection.jsx","components/NavigateSection.jsx","components/Menu.jsx","components/MapViewer.jsx","components/MapBuilder.jsx","App.js","index.js"],"names":["Utils","this","shortUuidGenerator","generate","waypointName","mapData","startsWith","intersections","coord","locations","arrayCoord1","arrayCoord2","squareSum","i","length","Math","pow","sqrt","canvasProps","canvasWidth","canvasHeight","canvasOffsetLeft","canvasOffsetTop","ready","arrayCoord","map","mapSingleCoord","unmapSingleCoord","singleCoord","zoom","index","scaledCoord","scaleSingleCoord","centerX","centerY","unscaledCoord","unscaleSingleCoord","shortUuid","constants","flickrBase58","store","LEFT","RIGHT","SPAWNED","DEPARTURE_READY","EN_ROUTE","ARRIVED","TYPES","LOCAL","MINOR","MAJOR","WIDTH","TOWARDS_START","TOWARDS_END","INTERSECTION_RADIUS","LOCATION_RADIUS","RoadRenderer","ctx","showLabels","drawRoadLines","mode","Object","entries","roads","forEach","roadEntry","roadData","startCoord","mapArrayCoord","getCoordFromWaypoint","start","endCoord","end","type","ROAD_TYPES","lineWidth","strokeStyle","lineJoin","setLineDash","beginPath","moveTo","lineTo","stroke","roadSlope","x","y","roadPerpSlopeNormalized","LocationRenderer","locationEntry","locationId","locationData","fillStyle","arc","DISPLAY","PI","fill","font","strokeWidth","strokeText","fillText","IntersectionRenderer","intersectionEntry","intersectionId","intersectionData","VehicleRenderer","vehicles","vehicleEntry","vehicleId","vehicleData","miterLimit","text","originId","destinationId","reduxConstants","VIEW_MAP","CREATE_MAP","actionTypes","actionCreators","zoomFactor","zoomOffsetFromViewCentre","payload","canvasPropsDiff","canvasDimensions","curMode","selectedComponent","hoveredComponent","showDynamicLabels","showStaticLabels","showToggleDynamicLabels","showFpsWarning","curTripVehicle","mapDataLoaded","avgUpdatesPerSecond","avgRendersPerSecond","INITIAL_STATE","averageUpdatesPerSecond","Number","POSITIVE_INFINITY","averageRendersPerSecond","APP_MODE_LIST","dynamic","static","showLowFpsWarning","shownLowFpsWarning","width","height","rootReducer","curState","action","zoomCenterInCanvas","getStore","MapDataHandler","lastUpdateTime","performance","now","lastReduxUpdateTime","updateMapDataListener","data","mapDataLoadedBefore","dispatch","setMapDataLoaded","lastUpdateTimeElapsed","lastUpdateTimeElapsedList","push","shift","reduce","a","b","setAverageUpdatesPerSecond","init","socket","on","cleanup","off","MapRenderer","getState","staticCanvas","getMapData","getShowLabels","staticCtx","getContext","clearRect","fillRect","logoImage","Image","src","onload","drawImage","render","dynamicCanvas","dynamicCtx","statisCanvas","_renderStatic","_renderDynamic","lastRenderTimeElapsed","lastRenderTime","lastRenderTimeElapsedList","setAverageRendersPerSecond","connect","state","mapLoaded","staticCanvasRef","useRef","dynamicCanvasRef","canvasContainerRef","useEffect","setCanvasDimensions","window","innerHeight","innerWidth","setCanvasProps","dragging","lastDragCoord","keyDownHandler","event","deltaX","deltaY","key","setCanvasPropsDiff","addEventListener","removeEventListener","current","curCanvasContainerRef","onZoom","passive","initUtils","offsetLeft","offsetTop","requestAnimationFrame","renderMap","renderAll","onDragEnd","lastDragEvent","preventDefault","stopPropagation","pageX","pageY","curZoomFactor","zoomCenterInCanvasView","setCanvasPropsZoom","console","log","setShowToggleDynamicLabels","onMouseDown","screenX","screenY","onMouseUp","onMouseLeave","onMouseMove","lastCoord","curCoord","ref","style","position","top","left","zIndex","Content","componentData","id","toFixed","fontSize","ComponetFinder","intersectionFinder","mapCoordinates","pointerRadius","excludeIdList","includes","getDistanceBetweenArrayCoords","locationFinder","findComponent","finderFuncs","func","component","statRowStyle","keys","LowFpsModal","isOpen","setIsOpen","className","Modal","toggle","ModalHeader","ModalBody","ModalFooter","Button","color","onClick","MenuSection","IconClass","sectionName","children","openInitial","useState","showChildren","setShowChildren","AiFillMinusSquare","AiFillPlusSquare","display","justifyContent","alignContent","alignItems","cursor","oldShowChildren","locationList","startTrip","selectOptionStyle","curTripVehicleId","Label","for","Input","name","location","document","getElementById","value","background","margin","flexDirection","flexWrap","borderRadius","checked","onChange","setShowDynamicLabels","target","htmlFor","e","userSelect","padding","setCurMode","curPointerRadius","curPointerComponentId","cursorStyle","showToggleDynamicLabelOption","containerRef","startTripResListener","startTripRes","setCurTripVehicle","getMapCoordinatesFromMouseEvent","canvasCoordinates","unmapArrayCoord","setShowFpsWarning","open","curHoveredComponent","ComponentFinder","setHoveredComponent","setSelectedComponent","POINTER_TYPE","prevSavedMapData","JSON","parse","localStorage","getItem","rawMapData","roadStartWaypointId","setRoadStartWaypointId","roadType","setRoadType","curHoverComponent","setCurHoverComponent","setCurSelectComponent","setMapData","curPointerType","setCurPointerType","saveMapData","setSaveMapData","lastSavedTime","setItem","getSerializedMap","serializedMap","generateShortUuid","stringify","deleteComponent","newMapData","roadId","Alert","readOnly","prevMapData","nextIntersectionId","nextLocationId","nextRoadId","onHoverComponentChanged","newHoverComponent","onSelectComponentChange","newSelectComponent","disconnect","socketUrl","io","ReactDOM","StrictMode","createStore","composeWithDevTools","applyMiddleware","thunk"],"mappings":"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","file":"static/js/main.4b4f5a66.chunk.js","sourcesContent":["import shortUuid from 'short-uuid';\nexport default class Utils {\n    static canvasProps;\n    static canvasWidth;\n    static canvasHeight;\n    static canvasOffsetLeft;\n    static canvasOffsetTop;\n    static ready = false;\n    static shortUuidGenerator = shortUuid(shortUuid.constants.flickrBase58);\n\n    static generateShortUuid() {\n        return this.shortUuidGenerator.generate();\n    }\n\n    static getCoordFromWaypoint(waypointName, mapData) {\n        if (waypointName.startsWith('intersection')) {\n            return mapData.intersections[waypointName].coord;\n        } else if (waypointName.startsWith('location')) {\n            return mapData.locations[waypointName].coord;\n        }\n        return null;\n    }\n\n    static getDistanceBetweenArrayCoords(arrayCoord1, arrayCoord2) {\n        let squareSum = 0;\n        for (let i = 0; i < arrayCoord1.length; i++) {\n            squareSum += Math.pow(arrayCoord2[i] - arrayCoord1[i], 2);\n        }\n        return Math.sqrt(squareSum);\n    }\n\n    static initUtils(\n        canvasProps,\n        canvasWidth,\n        canvasHeight,\n        canvasOffsetLeft,\n        canvasOffsetTop\n    ) {\n        Utils.canvasProps = canvasProps;\n        Utils.canvasWidth = canvasWidth;\n        Utils.canvasHeight = canvasHeight;\n        Utils.canvasOffsetLeft = canvasOffsetLeft;\n        Utils.canvasOffsetTop = canvasOffsetTop;\n        Utils.ready = true;\n    }\n\n    static mapArrayCoord(arrayCoord) {\n        if (arrayCoord) {\n            return arrayCoord.map(Utils.mapSingleCoord);\n        }\n        return null;\n    }\n\n    static unmapArrayCoord(arrayCoord) {\n        if (arrayCoord) {\n            return arrayCoord.map(Utils.unmapSingleCoord);\n        }\n        return null;\n    }\n\n    static scaleSingleCoord(singleCoord) {\n        return singleCoord * Utils.canvasProps.zoom;\n    }\n\n    static unscaleSingleCoord(singleCoord) {\n        return singleCoord / Utils.canvasProps.zoom;\n    }\n\n    static mapSingleCoord(singleCoord, index) {\n        let scaledCoord = Utils.scaleSingleCoord(singleCoord);\n        if (index === 0) {\n            scaledCoord += Utils.canvasWidth / 2 - Utils.canvasProps.centerX;\n        } else if (index === 1) {\n            scaledCoord += Utils.canvasHeight / 2 - Utils.canvasProps.centerY;\n        }\n        return scaledCoord;\n    }\n\n    static unmapSingleCoord(singleCoord, index) {\n        let unscaledCoord = singleCoord;\n        if (index === 0) {\n            unscaledCoord -= Utils.canvasWidth / 2 - Utils.canvasProps.centerX;\n        } else if (index === 1) {\n            unscaledCoord -= Utils.canvasHeight / 2 - Utils.canvasProps.centerY;\n        }\n        return Utils.unscaleSingleCoord(unscaledCoord);\n    }\n}\n","const constants = {};\n\nconstants.ROAD_DRIVING_SIDE = {\n    LEFT: 'left',\n    RIGHT: 'right',\n};\n\nconstants.VEHICLE_STATE = {\n    SPAWNED: 'spawned',\n    DEPARTURE_READY: 'departure_ready',\n    EN_ROUTE: 'en_route',\n    ARRIVED: 'arrived'\n};\n\nconstants.ROAD_TYPES = {\n    TYPES: {\n        LOCAL: 'LOCAL',\n        MINOR: 'MINOR',\n        MAJOR: 'MAJOR',\n    },\n    WIDTH: {\n        LOCAL: 50,\n        MINOR: 60,\n        MAJOR: 100,\n    },\n};\n\nconstants.VEHICLE_DIRECTION = {\n    TOWARDS_START: 'towards_start',\n    TOWARDS_END: 'towards_end',\n};\n\nconstants.DISPLAY = {\n    INTERSECTION_RADIUS: 45,\n    LOCATION_RADIUS: 30\n}\n\nexport default constants;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nlet store;\n\nfunction configureStore() {\n    store = createStore(\n        rootReducer,\n        composeWithDevTools(applyMiddleware(thunk))\n    );\n    return store;\n}\n\nfunction getStore() {\n    return store;\n}\n\nexport { configureStore, getStore };\n","import Utils from '../utils/Utils';\nimport constants from '../constants';\n\nexport default class RoadRenderer {\n    static render(ctx, mapData, showLabels) {\n        const drawRoadLines = (mode) => {\n            Object.entries(mapData.roads).forEach((roadEntry) => {\n                const roadId = roadEntry[0];\n                const roadData = roadEntry[1];\n\n                const startCoord = Utils.mapArrayCoord(\n                    Utils.getCoordFromWaypoint(roadData.start, mapData)\n                );\n                const endCoord = Utils.mapArrayCoord(\n                    Utils.getCoordFromWaypoint(roadData.end, mapData)\n                );\n\n                if (startCoord && endCoord) {\n                    if (mode === 'pavement') {\n                        if (\n                            roadData.type === constants.ROAD_TYPES.TYPES.LOCAL\n                        ) {\n                            ctx.lineWidth = Utils.scaleSingleCoord(\n                                constants.ROAD_TYPES.WIDTH.LOCAL\n                            );\n                        } else if (\n                            roadData.type === constants.ROAD_TYPES.TYPES.MINOR\n                        ) {\n                            ctx.lineWidth = Utils.scaleSingleCoord(\n                                constants.ROAD_TYPES.WIDTH.MINOR\n                            );\n                        } else if (\n                            roadData.type === constants.ROAD_TYPES.TYPES.MAJOR\n                        ) {\n                            ctx.lineWidth = Utils.scaleSingleCoord(\n                                constants.ROAD_TYPES.WIDTH.MAJOR\n                            );\n                        }\n\n                        ctx.strokeStyle = 'black';\n                        ctx.lineJoin = 'round';\n                        ctx.setLineDash([]);\n                        ctx.beginPath();\n                        ctx.moveTo(...startCoord);\n                        ctx.lineTo(...endCoord);\n                        ctx.stroke();\n                    } else if (mode === 'center-line') {\n                        ctx.lineWidth = Utils.scaleSingleCoord(1);\n                        ctx.strokeStyle = 'yellow';\n                        if (\n                            roadData.type === constants.ROAD_TYPES.TYPES.LOCAL\n                        ) {\n                            ctx.setLineDash([\n                                Utils.scaleSingleCoord(5),\n                                Utils.scaleSingleCoord(5),\n                            ]);\n                            ctx.beginPath();\n                            ctx.moveTo(...startCoord);\n                            ctx.lineTo(...endCoord);\n                            ctx.stroke();\n                        } else if (\n                            roadData.type === constants.ROAD_TYPES.TYPES.MINOR\n                        ) {\n                            ctx.setLineDash([]);\n                            ctx.beginPath();\n                            ctx.moveTo(...startCoord);\n                            ctx.lineTo(...endCoord);\n                            ctx.stroke();\n                        } else if (\n                            roadData.type === constants.ROAD_TYPES.TYPES.MAJOR\n                        ) {\n                            ctx.setLineDash([]);\n                            ctx.beginPath();\n                            ctx.moveTo(...startCoord);\n                            ctx.lineTo(...endCoord);\n                            ctx.stroke();\n\n                            const roadSlope = {\n                                x: endCoord[0] - startCoord[0],\n                                y: endCoord[1] - startCoord[1],\n                            };\n\n                            const roadPerpSlopeNormalized = {\n                                x:\n                                    -roadSlope.y /\n                                    Math.sqrt(\n                                        Math.pow(roadSlope.x, 2) +\n                                            Math.pow(roadSlope.y, 2)\n                                    ),\n                                y:\n                                    roadSlope.x /\n                                    Math.sqrt(\n                                        Math.pow(roadSlope.x, 2) +\n                                            Math.pow(roadSlope.y, 2)\n                                    ),\n                            };\n\n                            ctx.strokeStyle = 'white';\n                            ctx.setLineDash([\n                                Utils.scaleSingleCoord(3),\n                                Utils.scaleSingleCoord(5),\n                            ]);\n\n                            // draw left lane lines\n                            ctx.beginPath();\n                            ctx.moveTo(\n                                startCoord[0] +\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.x * 25\n                                    ),\n                                startCoord[1] +\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.y * 25\n                                    )\n                            );\n                            ctx.lineTo(\n                                endCoord[0] +\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.x * 25\n                                    ),\n                                endCoord[1] +\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.y * 25\n                                    )\n                            );\n                            ctx.stroke();\n\n                            // draw right lane lines\n                            ctx.beginPath();\n                            ctx.moveTo(\n                                startCoord[0] -\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.x * 25\n                                    ),\n                                startCoord[1] -\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.y * 25\n                                    )\n                            );\n                            ctx.lineTo(\n                                endCoord[0] -\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.x * 25\n                                    ),\n                                endCoord[1] -\n                                    Utils.scaleSingleCoord(\n                                        roadPerpSlopeNormalized.y * 25\n                                    )\n                            );\n                            ctx.stroke();\n                        }\n                        ctx.lineJoin = 'round';\n                    }\n                }\n            });\n        };\n\n        drawRoadLines('pavement');\n        drawRoadLines('center-line');\n    }\n}\n","import Utils from '../utils/Utils';\nimport constants from '../constants';\n\nexport default class LocationRenderer {\n    static render(ctx, mapData, showLabels) {\n        Object.entries(mapData.locations).forEach((locationEntry) => {\n            const locationId = locationEntry[0];\n            const locationData = locationEntry[1];\n\n            const coord = Utils.mapArrayCoord(locationData.coord);\n\n            ctx.lineWidth = 2;\n            ctx.strokeStyle = 'grey';\n            ctx.fillStyle = '#ff0000';\n            ctx.setLineDash([]);\n\n            ctx.beginPath();\n            ctx.arc(\n                coord[0],\n                coord[1],\n                Utils.scaleSingleCoord(constants.DISPLAY.LOCATION_RADIUS),\n                0,\n                2 * Math.PI\n            );\n            ctx.stroke();\n            ctx.fill();\n\n            if (showLabels) {\n                ctx.font = Utils.scaleSingleCoord(50) + 'px Arial';\n                ctx.strokeStyle = 'white';\n                ctx.strokeWidth = Utils.scaleSingleCoord(2);\n                ctx.strokeText(locationId, coord[0], coord[1]);\n                ctx.fillStyle = 'black';\n                ctx.fillText(locationId, coord[0], coord[1]);\n            }\n        });\n    }\n}\n","import Utils from '../utils/Utils';\nimport constants from '../constants';\n\nexport default class IntersectionRenderer {\n    static render(ctx, mapData, showLabels) {\n        Object.entries(mapData.intersections).forEach((intersectionEntry) => {\n            const intersectionId = intersectionEntry[0];\n            const intersectionData = intersectionEntry[1];\n\n            const coord = Utils.mapArrayCoord(intersectionData.coord);\n\n            ctx.lineWidth = 2;\n            ctx.strokeStyle = 'grey';\n            ctx.fillStyle = '#00ff00';\n            ctx.setLineDash([]);\n\n            ctx.beginPath();\n            ctx.arc(\n                coord[0],\n                coord[1],\n                Utils.scaleSingleCoord(constants.DISPLAY.INTERSECTION_RADIUS),\n                0,\n                2 * Math.PI\n            );\n            ctx.stroke();\n            ctx.fill();\n\n            if (showLabels) {\n                ctx.font = Utils.scaleSingleCoord(50) + 'px Arial';\n                ctx.strokeStyle = 'white';\n                ctx.strokeWidth = Utils.scaleSingleCoord(2);\n                ctx.strokeText(intersectionId, coord[0], coord[1]);\n                ctx.fillStyle = 'black';\n                ctx.fillText(intersectionId, coord[0], coord[1]);\n            }\n        });\n    }\n}\n","import Utils from '../utils/Utils';\nimport constants from '../constants';\n\nexport default class VehicleRenderer {\n    static render(ctx, mapData, showLabels) {\n        Object.entries(mapData.vehicles).forEach((vehicleEntry) => {\n            const vehicleId = vehicleEntry[0];\n            const vehicleData = vehicleEntry[1];\n\n            const coord = Utils.mapArrayCoord(vehicleData.coord);\n\n            ctx.lineWidth = 2;\n            ctx.strokeStyle = 'grey';\n            ctx.fillStyle = 'blue';\n            ctx.setLineDash([]);\n\n            ctx.beginPath();\n            ctx.arc(\n                coord[0],\n                coord[1],\n                Utils.scaleSingleCoord(10),\n                0,\n                2 * Math.PI\n            );\n            ctx.stroke();\n            ctx.fill();\n\n            if (showLabels) {\n                ctx.lineJoin = 'round';\n                ctx.miterLimit = 2;\n                const text = `${vehicleId} | Src: ${vehicleData.originId} | Dest: ${vehicleData.destinationId}`;\n                ctx.font = Utils.scaleSingleCoord(15) + 'px Arial';\n                ctx.strokeStyle = 'black';\n                ctx.strokeWidth = Utils.scaleSingleCoord(1);\n                ctx.strokeText(text, coord[0], coord[1]);\n                ctx.fillStyle = 'yellow';\n                ctx.fillText(text, coord[0], coord[1]);\n            }\n        });\n    }\n}\n","const reduxConstants = {};\nreduxConstants.APP_MODE_LIST = {\n    VIEW_MAP: 'view_map',\n    CREATE_MAP: 'create_map',\n};\n\nconst actionTypes = {\n    UPDATE_MAP_DATA_LOADED: 'UPDATE_MAP_DATA_LOADED',\n    UPDATE_AVERAGE_RENDERS_PER_SECOND: 'UPDATE_AVERAGE_RENDERS_PER_SECOND',\n    UPDATE_AVERAGE_UPDATES_PER_SECOND: 'UPDATE_AVERAGE_UPDATES_PER_SECOND',\n    UPDATE_CUR_MODE: 'UPDATE_CUR_MODE',\n    UPDATE_SELECTED_COMPONENT: 'UPDATE_SELECTED_COMPONENT',\n    UPDATE_HOVERED_COMPONENT: 'UPDATE_HOVERED_COMPONENT',\n    UPDATE_SHOW_DYNAMIC_LABELS: 'UPDATE_SHOW_DYNAMIC_LABELS',\n    UPDATE_SHOW_STATIC_LABELS: 'UPDATE_SHOW_STATIC_LABELS',\n    UPDATE_SHOW_TOGGLE_DYNAMIC_LABELS: 'UPDATE_SHOW_TOGGLE_DYNAMIC_LABELS',\n    UPDATE_SHOW_FPS_WARNING: 'UPDATE_SHOW_FPS_WARNING',\n    UPDATE_CUR_TRIP_VEHICLE: 'UPDATE_CUR_TRIP_VEHICLE',\n    UPDATE_CANVAS_DIMENSIONS: 'UPDATE_CANVAS_DIMENSIONS',\n    UPDATE_CANVAS_PROPS_BY_DIFF: 'UPDATE_CANVAS_PROPS_BY_DIFF',\n    UPDATE_CANVAS_PROPS: 'UPDATE_CANVAS_PROPS',\n    UPDATE_CANVAS_PROPS_BY_ZOOM_FACTOR: 'UPDATE_CANVAS_PROPS_BY_ZOOM_FACTOR',\n};\n\nconst actionCreators = {};\n\nactionCreators.setCanvasPropsZoom = (zoomFactor, zoomOffsetFromViewCentre) => ({\n    type: actionTypes.UPDATE_CANVAS_PROPS_BY_ZOOM_FACTOR,\n    payload: { zoomOffsetFromViewCentre, zoomFactor },\n});\n\nactionCreators.setCanvasPropsDiff = (canvasPropsDiff) => ({\n    type: actionTypes.UPDATE_CANVAS_PROPS_BY_DIFF,\n    payload: canvasPropsDiff,\n});\n\nactionCreators.setCanvasProps = (canvasProps) => ({\n    type: actionTypes.UPDATE_CANVAS_PROPS,\n    payload: canvasProps,\n});\n\nactionCreators.setCanvasDimensions = (canvasDimensions) => ({\n    type: actionTypes.UPDATE_CANVAS_DIMENSIONS,\n    payload: canvasDimensions,\n});\n\nactionCreators.setCurMode = (curMode) => ({\n    type: actionTypes.UPDATE_CUR_MODE,\n    payload: curMode,\n});\n\nactionCreators.setSelectedComponent = (selectedComponent) => ({\n    type: actionTypes.UPDATE_SELECTED_COMPONENT,\n    payload: selectedComponent,\n});\n\nactionCreators.setHoveredComponent = (hoveredComponent) => ({\n    type: actionTypes.UPDATE_HOVERED_COMPONENT,\n    payload: hoveredComponent,\n});\n\nactionCreators.setShowDynamicLabels = (showDynamicLabels) => ({\n    type: actionTypes.UPDATE_SHOW_DYNAMIC_LABELS,\n    payload: showDynamicLabels,\n});\n\nactionCreators.setShowStaticLabels = (showStaticLabels) => ({\n    type: actionTypes.UPDATE_SHOW_STATIC_LABELS,\n    payload: showStaticLabels,\n});\n\nactionCreators.setShowToggleDynamicLabels = (showToggleDynamicLabels) => ({\n    type: actionTypes.UPDATE_SHOW_TOGGLE_DYNAMIC_LABELS,\n    payload: showToggleDynamicLabels,\n});\n\nactionCreators.setShowFpsWarning = (showFpsWarning) => ({\n    type: actionTypes.UPDATE_SHOW_FPS_WARNING,\n    payload: showFpsWarning,\n});\n\nactionCreators.setCurTripVehicle = (curTripVehicle) => ({\n    type: actionTypes.UPDATE_CUR_TRIP_VEHICLE,\n    payload: curTripVehicle,\n});\n\nactionCreators.setMapDataLoaded = (mapDataLoaded) => ({\n    type: actionTypes.UPDATE_MAP_DATA_LOADED,\n    payload: mapDataLoaded,\n});\n\nactionCreators.setAverageUpdatesPerSecond = (avgUpdatesPerSecond) => ({\n    type: actionTypes.UPDATE_AVERAGE_UPDATES_PER_SECOND,\n    payload: avgUpdatesPerSecond,\n});\n\nactionCreators.setAverageRendersPerSecond = (avgRendersPerSecond) => ({\n    type: actionTypes.UPDATE_AVERAGE_RENDERS_PER_SECOND,\n    payload: avgRendersPerSecond,\n});\n\nexport { actionCreators, reduxConstants, actionTypes };\n","import { reduxConstants, actionTypes } from '../actions';\n\nconst INITIAL_STATE = {\n    mapDataLoaded: false,\n    averageUpdatesPerSecond: Number.POSITIVE_INFINITY,\n    averageRendersPerSecond: Number.POSITIVE_INFINITY,\n    curMode: reduxConstants.APP_MODE_LIST.VIEW_MAP,\n    selectedComponent: null,\n    hoveredComponent: null,\n    showLabels: {\n        dynamic: true,\n        static: true,\n    },\n    showToggleDynamicLabels: true,\n    showLowFpsWarning: false,\n    shownLowFpsWarning: false,\n    curTripVehicle: null,\n    canvasDimensions: {\n        width: 0,\n        height: 0,\n    },\n    canvasProps: {\n        centerX: 0,\n        centerY: 0,\n        zoom: 0.5,\n    },\n};\n\nconst rootReducer = (curState = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case actionTypes.UPDATE_AVERAGE_RENDERS_PER_SECOND: {\n            return {\n                ...curState,\n                averageRendersPerSecond: action.payload,\n            };\n        }\n        case actionTypes.UPDATE_AVERAGE_UPDATES_PER_SECOND: {\n            return {\n                ...curState,\n                averageUpdatesPerSecond: action.payload,\n            };\n        }\n        case actionTypes.UPDATE_MAP_DATA_LOADED: {\n            return {\n                ...curState,\n                mapDataLoaded: action.payload,\n            };\n        }\n        case actionTypes.UPDATE_CANVAS_PROPS_BY_ZOOM_FACTOR: {\n            const { zoomOffsetFromViewCentre, zoomFactor } = action.payload;\n            const zoomCenterInCanvas = {\n                x: zoomOffsetFromViewCentre.x + curState.canvasProps.centerX,\n                y: zoomOffsetFromViewCentre.y + curState.canvasProps.centerY,\n            };\n\n            return {\n                ...curState,\n                canvasProps: {\n                    centerX:\n                        curState.canvasProps.centerX -\n                        zoomCenterInCanvas.x * (1 - zoomFactor),\n                    centerY:\n                        curState.canvasProps.centerY -\n                        zoomCenterInCanvas.y * (1 - zoomFactor),\n                    zoom: curState.canvasProps.zoom * zoomFactor,\n                },\n            };\n        }\n        case actionTypes.UPDATE_CANVAS_PROPS_BY_DIFF: {\n            return {\n                ...curState,\n                canvasProps: {\n                    centerX: action.payload.centerX\n                        ? curState.canvasProps.centerX + action.payload.centerX\n                        : curState.canvasProps.centerX,\n                    centerY: action.payload.centerY\n                        ? curState.canvasProps.centerY + action.payload.centerY\n                        : curState.canvasProps.centerY,\n                    zoom: action.payload.zoom\n                        ? curState.canvasProps.zoom * action.payload.zoom\n                        : curState.canvasProps.zoom,\n                },\n            };\n        }\n        case actionTypes.UPDATE_CANVAS_PROPS: {\n            return {\n                ...curState,\n                canvasProps: {\n                    ...curState.canvasProps,\n                    ...action.payload,\n                },\n            };\n        }\n        case actionTypes.UPDATE_CANVAS_DIMENSIONS:\n            return {\n                ...curState,\n                canvasDimensions: {\n                    ...curState.canvasDimensions,\n                    ...action.payload,\n                },\n            };\n        case actionTypes.UPDATE_CUR_MODE:\n            return {\n                ...curState,\n                curMode: action.payload,\n            };\n        case actionTypes.UPDATE_SELECTED_COMPONENT:\n            return {\n                ...curState,\n                selectedComponent: action.payload,\n            };\n        case actionTypes.UPDATE_HOVERED_COMPONENT:\n            return {\n                ...curState,\n                hoveredComponent: action.payload,\n            };\n        case actionTypes.UPDATE_SHOW_DYNAMIC_LABELS:\n            return {\n                ...curState,\n                showLabels: {\n                    ...curState.showLabels,\n                    dynamic: action.payload,\n                },\n            };\n        case actionTypes.UPDATE_SHOW_STATIC_LABELS: {\n            return {\n                ...curState,\n                showLabels: {\n                    ...curState.showLabels,\n                    static: action.payload,\n                },\n            };\n        }\n        case actionTypes.UPDATE_SHOW_TOGGLE_DYNAMIC_LABELS: {\n            return {\n                ...curState,\n                showToggleDynamicLabels: action.payload,\n            };\n        }\n        case actionTypes.UPDATE_SHOW_FPS_WARNING: {\n            if (action.payload && !curState.shownLowFpsWarning) {\n                return {\n                    ...curState,\n                    showLowFpsWarning: true,\n                    shownLowFpsWarning: true,\n                };\n            } else {\n                return {\n                    ...curState,\n                    showLowFpsWarning: false,\n                };\n            }\n        }\n        case actionTypes.UPDATE_CUR_TRIP_VEHICLE: {\n            return {\n                ...curState,\n                curTripVehicle: action.payload,\n            };\n        }\n        default:\n            return curState;\n    }\n};\n\nexport default rootReducer;\n","import { getStore } from '../redux/store';\nimport { actionCreators } from '../redux/actions';\n\nconst MapDataHandler = {};\n\nMapDataHandler.mapData = null;\nMapDataHandler.lastUpdateTimeElapsedList = [];\nMapDataHandler.lastUpdateTime = performance.now();\nMapDataHandler.lastReduxUpdateTime = performance.now();\n\nconst REDUX_UPDATE_INTERVAL = 1000;\n\nconst updateMapDataListener = (data) => {\n    const mapDataLoadedBefore = !!MapDataHandler.mapData;\n    MapDataHandler.mapData = data;\n    if (!mapDataLoadedBefore) {\n        getStore().dispatch(actionCreators.setMapDataLoaded(true));\n    }\n\n    const now = performance.now();\n    const lastUpdateTimeElapsed = now - MapDataHandler.lastUpdateTime;\n    MapDataHandler.lastUpdateTimeElapsedList.push(lastUpdateTimeElapsed);\n    if (MapDataHandler.lastUpdateTimeElapsedList.length > 100) {\n        MapDataHandler.lastUpdateTimeElapsedList.shift();\n    }\n    if (now - MapDataHandler.lastReduxUpdateTime > REDUX_UPDATE_INTERVAL) {\n        const averageUpdateTimeElapsed =\n            MapDataHandler.lastUpdateTimeElapsedList.reduce(\n                (a, b) => a + b,\n                0\n            ) / MapDataHandler.lastUpdateTimeElapsedList.length;\n        let averageUpdatesPerSecond = 1000 / averageUpdateTimeElapsed;\n        if (MapDataHandler.lastUpdateTimeElapsedList.length < 100) {\n            averageUpdatesPerSecond = Number.POSITIVE_INFINITY;\n        }\n        getStore().dispatch(\n            actionCreators.setAverageUpdatesPerSecond(averageUpdatesPerSecond)\n        );\n        MapDataHandler.lastReduxUpdateTime = now;\n    }\n    MapDataHandler.lastUpdateTime = now;\n};\n\nMapDataHandler.init = (socket) => {\n    socket.on('update-map-data', updateMapDataListener);\n};\n\nMapDataHandler.cleanup = (socket) => {\n    socket.off('update-map-data', updateMapDataListener);\n};\n\nexport default MapDataHandler;\n","import RoadRenderer from './RoadRenderer';\nimport LocationRenderer from './LocationRenderer';\nimport IntersectionRenderer from './IntersectionRenderer';\nimport VehicleRenderer from './VehicleRenderer';\nimport { getStore } from '../redux/store';\nimport MapDataHandler from '../utils/MapDataHandler';\nimport { actionCreators } from '../redux/actions';\n\nconst REDUX_UPDATE_INTERVAL = 1000;\n\nexport default class MapRenderer {\n    static lastRenderTimeElapsedList = [];\n    static lastRenderTime = performance.now();\n    static lastReduxUpdateTime = performance.now();\n\n    static getMapData() {\n        return MapDataHandler.mapData;\n    }\n\n    static getShowLabels() {\n        const curState = getStore().getState();\n        const { showToggleDynamicLabels } = curState;\n        const showDynamicLabels = curState.showLabels.dynamic;\n        return showToggleDynamicLabels && showDynamicLabels;\n    }\n\n    static _renderStatic(staticCanvas) {\n        const mapData = this.getMapData();\n        const showLabels = this.getShowLabels();\n        const {\n            width: canvasWidth,\n            height: canvasHeight,\n        } = getStore().getState().canvasDimensions;\n        if (mapData && staticCanvas) {\n            const staticCtx = staticCanvas.getContext('2d');\n            staticCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n            staticCtx.fillStyle = '#dddddd';\n            staticCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n\n            const logoImage = new Image();\n            logoImage.src = '/logo192.png';\n            logoImage.onload = () => {\n                staticCtx.drawImage(logoImage, 0, 0, 50, 50);\n            };\n\n            RoadRenderer.render(staticCtx, mapData, showLabels);\n            LocationRenderer.render(staticCtx, mapData, showLabels);\n            IntersectionRenderer.render(staticCtx, mapData, showLabels);\n        }\n    }\n\n    static _renderDynamic(dynamicCanvas) {\n        const mapData = this.getMapData();\n        const showLabels = this.getShowLabels();\n        const {\n            width: canvasWidth,\n            height: canvasHeight,\n        } = getStore().getState().canvasDimensions;\n        if (mapData && dynamicCanvas) {\n            const dynamicCtx = dynamicCanvas.getContext('2d');\n            dynamicCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n            VehicleRenderer.render(dynamicCtx, mapData, showLabels);\n        }\n    }\n\n    static renderAll(statisCanvas, dynamicCanvas) {\n        this._renderStatic(statisCanvas);\n        this._renderDynamic(dynamicCanvas);\n\n        const now = performance.now();\n        const lastRenderTimeElapsed = now - this.lastRenderTime;\n        this.lastRenderTimeElapsedList.push(lastRenderTimeElapsed);\n        if (this.lastRenderTimeElapsedList.length > 100) {\n            this.lastRenderTimeElapsedList.shift();\n        }\n        if (now - this.lastReduxUpdateTime > REDUX_UPDATE_INTERVAL) {\n            const averageRenderTimeElapsed =\n                this.lastRenderTimeElapsedList.reduce((a, b) => a + b, 0) /\n                this.lastRenderTimeElapsedList.length;\n            let averageRendersPerSecond = 1000 / averageRenderTimeElapsed;\n            if (this.lastRenderTimeElapsedList.length < 100) {\n                averageRendersPerSecond = Number.POSITIVE_INFINITY;\n            }\n            getStore().dispatch(\n                actionCreators.setAverageRendersPerSecond(\n                    averageRendersPerSecond\n                )\n            );\n            this.lastReduxUpdateTime = now;\n        }\n        this.lastRenderTime = now;\n    }\n}\n","import React from 'react';\nimport { useRef } from 'react';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport MapRenderer from '../renderers/MapRenderer';\nimport Utils from '../utils/Utils';\nimport { reduxConstants, actionCreators } from '../redux/actions';\nimport { connect } from 'react-redux';\n\nconst SHOW_LABEL_MIN_ZOOM_LEVEL = 0.4;\n\nfunction Map({\n    showToggleDynamicLabels,\n    dispatch,\n    canvasProps,\n    canvasDimensions,\n    mapLoaded,\n}) {\n    const staticCanvasRef = useRef(null);\n    const dynamicCanvasRef = useRef(null);\n    const canvasContainerRef = useRef(null);\n\n    useEffect(() => {\n        dispatch(\n            actionCreators.setCanvasDimensions({\n                height: window.innerHeight,\n                width: window.innerWidth,\n            })\n        );\n        dispatch(\n            actionCreators.setCanvasProps({\n                centerX: 0,\n                centerY: 0,\n                zoom: 0.5,\n            })\n        );\n    }, []);\n\n    const dragging = useRef(false);\n    const lastDragCoord = useRef(null);\n\n    const keyDownHandler = (event) => {\n        const eventKey = event.key;\n        let deltaX = 0;\n        let deltaY = 0;\n        switch (eventKey) {\n            case 'ArrowUp':\n                deltaY = 50;\n                break;\n            case 'ArrowDown':\n                deltaY = -50;\n                break;\n            case 'ArrowLeft':\n                deltaX = 50;\n                break;\n            case 'ArrowRight':\n                deltaX = -50;\n                break;\n            default:\n                break;\n        }\n        dispatch(\n            actionCreators.setCanvasPropsDiff({\n                centerX: deltaX,\n                centerY: deltaY,\n                zoom: 1,\n            })\n        );\n    };\n\n    useEffect(() => {\n        window.addEventListener('keydown', keyDownHandler);\n        return () => {\n            window.removeEventListener('keydown', keyDownHandler);\n        };\n    }, []);\n\n    useEffect(() => {\n        if (canvasContainerRef.current) {\n            const curCanvasContainerRef = canvasContainerRef.current;\n            curCanvasContainerRef.addEventListener('wheel', onZoom, {\n                passive: false,\n            });\n            return () => {\n                curCanvasContainerRef.removeEventListener('wheel', onZoom);\n            };\n        }\n    }, [canvasContainerRef, mapLoaded]);\n\n    useEffect(() => {\n        Utils.initUtils(\n            canvasProps,\n            canvasDimensions.width,\n            canvasDimensions.height,\n            canvasContainerRef.current.offsetLeft,\n            canvasContainerRef.current.offsetTop\n        );\n    }, [canvasDimensions, canvasProps]);\n\n    useEffect(() => {\n        const renderMap = () => {\n            MapRenderer.renderAll(\n                staticCanvasRef.current,\n                dynamicCanvasRef.current\n            );\n            window.requestAnimationFrame(renderMap);\n        };\n\n        window.requestAnimationFrame(renderMap);\n    }, []);\n\n    const onDragStart = (event) => {\n        event.preventDefault();\n        if (mapLoaded) {\n            dragging.current = true;\n            lastDragCoord.current = {\n                x: event.screenX,\n                y: event.screenY,\n            };\n        }\n    };\n\n    const onDragEnd = (event) => {\n        dragging.current = false;\n        lastDragCoord.current = null;\n    };\n\n    const lastDragEvent = useRef(null);\n    const onDragMove = (event) => {\n        const DRAG_UPDATE_LIMIT_MS = 1000 / 30;\n        const now = performance.now();\n        if (\n            dragging.current &&\n            (!lastDragEvent.current ||\n                now - lastDragEvent.current > DRAG_UPDATE_LIMIT_MS)\n        ) {\n            lastDragEvent.current = now;\n            const lastCoord = {\n                x: lastDragCoord.current.x,\n                y: lastDragCoord.current.y,\n            };\n            const curCoord = {\n                x: event.screenX,\n                y: event.screenY,\n            };\n\n            dispatch(\n                actionCreators.setCanvasPropsDiff({\n                    zoom: 1,\n                    centerX: -(curCoord.x - lastCoord.x),\n                    centerY: -(curCoord.y - lastCoord.y),\n                })\n            );\n            lastDragCoord.current = curCoord;\n        }\n    };\n\n    const onZoom = (event) => {\n        event.preventDefault();\n        event.stopPropagation();\n        if (mapLoaded) {\n            const { pageX, pageY, deltaY } = event;\n\n            const ZOOM_FACTOR = 1.25;\n            let curZoomFactor = 1;\n            if (deltaY > 0) {\n                // zoom out\n                curZoomFactor = 1 / ZOOM_FACTOR;\n            } else if (deltaY < 0) {\n                // zoom in\n                curZoomFactor = ZOOM_FACTOR;\n            }\n\n            const zoomCenterInCanvasView = {\n                x: pageX - staticCanvasRef.current.offsetLeft,\n                y: pageY - staticCanvasRef.current.offsetTop,\n            };\n\n            const zoomOffsetFromViewCentre = {\n                x: zoomCenterInCanvasView.x - canvasDimensions.width / 2,\n                y: zoomCenterInCanvasView.y - canvasDimensions.height / 2,\n            };\n\n            dispatch(\n                actionCreators.setCanvasPropsZoom(\n                    curZoomFactor,\n                    zoomOffsetFromViewCentre\n                )\n            );\n        }\n        return false;\n    };\n\n    useEffect(() => {\n        console.log(canvasProps.zoom);\n        console.log(showToggleDynamicLabels);\n        if (canvasProps.zoom < SHOW_LABEL_MIN_ZOOM_LEVEL) {\n            if (showToggleDynamicLabels) {\n                dispatch(actionCreators.setShowToggleDynamicLabels(false));\n            }\n        } else {\n            if (!showToggleDynamicLabels) {\n                dispatch(actionCreators.setShowToggleDynamicLabels(true));\n            }\n        }\n    }, [canvasProps.zoom, showToggleDynamicLabels, dispatch]);\n\n    return (\n        <div\n            onMouseDown={onDragStart}\n            onMouseUp={onDragEnd}\n            onMouseLeave={onDragEnd}\n            onMouseMove={onDragMove}\n            ref={canvasContainerRef}\n            style={{\n                height: canvasDimensions.height,\n                width: canvasDimensions.width,\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                zIndex: -1,\n            }}\n        >\n            {mapLoaded ? (\n                <div>\n                    <canvas\n                        style={{\n                            position: 'absolute',\n                            zIndex: 2,\n                        }}\n                        ref={dynamicCanvasRef}\n                        height={canvasDimensions.height}\n                        width={canvasDimensions.width}\n                    />\n                    <canvas\n                        style={{\n                            position: 'absolute',\n                            zIndex: 1,\n                        }}\n                        ref={staticCanvasRef}\n                        height={canvasDimensions.height}\n                        width={canvasDimensions.width}\n                    />\n                </div>\n            ) : (\n                <div>Loading map data...</div>\n            )}\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => ({\n    curMode: state.curMode,\n    mapLoaded: state.mapDataLoaded,\n    showDynamicLabels: state.showLabels.dynamic,\n    showToggleDynamicLabels: state.showToggleDynamicLabels,\n    canvasProps: state.canvasProps,\n    canvasDimensions: state.canvasDimensions,\n});\n\nexport default connect(mapStateToProps)(Map);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nfunction SelectedDisplay({ hoveredComponent, selectedComponent }) {\n    const componentData = hoveredComponent || selectedComponent;\n    let Content;\n    if (componentData) {\n        Content = (\n            <div>\n                <div>Type: {componentData.type}</div>\n                <div>ID: {componentData.id}</div>\n                <div>\n                    Coord: [{componentData.data.coord[0].toFixed(3)},{' '}\n                    {componentData.data.coord[1].toFixed(3)}]\n                </div>\n            </div>\n        );\n    } else {\n        Content = <div>No component selected</div>;\n    }\n\n    return (\n        <div\n            style={{\n                fontSize: 12,\n            }}\n        >\n            {Content}\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        selectedComponent: state.selectedComponent,\n        hoveredComponent: state.hoveredComponent,\n    };\n};\n\nexport default connect(mapStateToProps)(SelectedDisplay);\n","import Utils from '../utils/Utils';\nimport constants from '../constants';\nimport MapDataHandler from '../utils/MapDataHandler';\n\nconst ComponetFinder = {};\n\nconst intersectionFinder = (mapCoordinates, mapData, pointerRadius, excludeIdList) => {\n    for (const intersectionEntry of Object.entries(mapData.intersections)) {\n        if (!excludeIdList.includes(intersectionEntry[0])) {\n            const intersectionData = intersectionEntry[1];\n            const distance = Utils.getDistanceBetweenArrayCoords(\n                intersectionData.coord,\n                mapCoordinates\n            );\n\n            if (\n                distance <\n                constants.DISPLAY.INTERSECTION_RADIUS + pointerRadius\n            ) {\n                return {\n                    type: 'intersection',\n                    id: intersectionEntry[0],\n                    data: intersectionEntry[1],\n                };\n            }\n        }\n    }\n    return null;\n};\n\nconst locationFinder = (mapCoordinates, mapData, pointerRadius, excludeIdList) => {\n    for (const locationEntry of Object.entries(mapData.locations)) {\n        if (!excludeIdList.includes(locationEntry[0])) {\n            const locationData = locationEntry[1];\n            const distance = Utils.getDistanceBetweenArrayCoords(\n                locationData.coord,\n                mapCoordinates\n            );\n\n            if (distance < constants.DISPLAY.LOCATION_RADIUS + pointerRadius) {\n                return {\n                    type: 'location',\n                    id: locationEntry[0],\n                    data: locationEntry[1],\n                };\n            }\n        }\n    }\n    return null;\n};\n\nComponetFinder.findComponent = (\n    mapCoordinates,\n    pointerRadius = 0,\n    excludeIdList = []\n) => {\n    const mapData = MapDataHandler.mapData;\n    const finderFuncs = [intersectionFinder, locationFinder];\n    for (const func of finderFuncs) {\n        const component = func(\n            mapCoordinates,\n            mapData,\n            pointerRadius,\n            excludeIdList\n        );\n        if (component) {\n            return component;\n        }\n    }\n};\n\nexport default ComponetFinder;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport MapDataHandler from '../utils/MapDataHandler';\n\nfunction MapStats({\n    mapDataLoaded,\n    averageUpdatesPerSecond,\n    averageRendersPerSecond,\n}) {\n    let Content;\n    const statRowStyle = {};\n\n    if (mapDataLoaded) {\n        const mapData = MapDataHandler.mapData;\n        console.log(mapData);\n        Content = (\n            <div>\n                <div style={statRowStyle}>Map ID: {mapData.id}</div>\n                <div style={statRowStyle}>\n                    Total Vehicles: {Object.keys(mapData.vehicles).length}\n                </div>\n                <div style={statRowStyle}>\n                    Total Intersections:{' '}\n                    {Object.keys(mapData.intersections).length}\n                </div>\n                <div style={statRowStyle}>\n                    Total Locations: {Object.keys(mapData.locations).length}\n                </div>\n                <div style={statRowStyle}>\n                    Total Roads: {Object.keys(mapData.roads).length}\n                </div>\n                <div style={statRowStyle}>\n                    Avg Updates/Sec: {averageUpdatesPerSecond.toFixed(2)}\n                </div>\n                <div style={statRowStyle}>\n                    Avg Renders/Sec: {averageRendersPerSecond.toFixed(2)}\n                </div>\n            </div>\n        );\n    } else {\n        Content = <div>Map data not loaded.</div>;\n    }\n\n    return (\n        <div\n            style={{\n                fontSize: 12,\n            }}\n        >\n            {Content}\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        averageUpdatesPerSecond: state.averageUpdatesPerSecond,\n        averageRendersPerSecond: state.averageRendersPerSecond,\n        mapDataLoaded: state.mapDataLoaded,\n    };\n};\n\nexport default connect(mapStateToProps)(MapStats);\n","import React from 'react';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\n\nexport default function LowFpsModal({ isOpen, setIsOpen, className }) {\n    return (\n        <Modal\n            isOpen={isOpen}\n            toggle={() => {\n                setIsOpen(!isOpen);\n            }}\n            className={className}\n        >\n            <ModalHeader\n                toggle={() => {\n                    setIsOpen(!isOpen);\n                }}\n            >\n                Low FPS Detected\n            </ModalHeader>\n            <ModalBody>\n                It has been detected at the map is running at a lower than\n                optimal frame rate. It may help to hide the labels by toggling\n                the <code>Toggle Labels</code> checkbox\n            </ModalBody>\n            <ModalFooter>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        setIsOpen(!isOpen);\n                    }}\n                >\n                    OK\n                </Button>\n            </ModalFooter>\n        </Modal>\n    );\n}\n","import React, { useState } from 'react';\nimport {\n    AiOutlineMinusSquare,\n    AiOutlinePlusSquare,\n    AiFillMinusSquare,\n    AiFillPlusSquare,\n} from 'react-icons/ai';\n\nexport default function MenuSection({\n    sectionName,\n    children,\n    openInitial = true,\n}) {\n    const [showChildren, setShowChildren] = useState(openInitial);\n\n    let IconClass;\n    if (showChildren) {\n        IconClass = AiFillMinusSquare;\n    } else {\n        IconClass = AiFillPlusSquare;\n    }\n\n    return (\n        <div className=\"mx-2 my-2\">\n            <div\n                className=\"font-weight-bold\"\n                style={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    alignContent: 'center',\n                    alignItems: 'center',\n                }}\n            >\n                {sectionName}\n                <div\n                    style={{\n                        cursor: 'pointer',\n                    }}\n                    onClick={() => {\n                        setShowChildren((oldShowChildren) => !oldShowChildren);\n                    }}\n                >\n                    <IconClass />\n                </div>\n            </div>\n            {showChildren && <div>{children}</div>}\n            <hr className=\"mb-0\" />\n        </div>\n    );\n}\n","import React from 'react';\nimport { FormGroup, Label, Input, Button } from 'reactstrap';\nimport { actionCreators } from '../redux/actions';\nimport { connect } from 'react-redux';\n\nfunction NavigateSection({ locationList, startTrip, curTripVehicleId }) {\n    const selectOptionStyle = {\n        fontSize: 10,\n    };\n\n    return (\n        <div\n            style={{\n                fontSize: 10,\n            }}\n        >\n            <div>\n                <Label\n                    for=\"navigate-origin\"\n                    className=\"font-weight-bold mb-1 mt-2\"\n                >\n                    Origin\n                </Label>\n                <Input\n                    style={selectOptionStyle}\n                    type=\"select\"\n                    name=\"select\"\n                    id=\"navigate-origin\"\n                >\n                    {locationList.map((location) => {\n                        return (\n                            <option key={location.id} style={selectOptionStyle}>\n                                {location.id}\n                            </option>\n                        );\n                    })}\n                </Input>\n            </div>\n            <div>\n                <Label\n                    for=\"navigate-dest\"\n                    className=\"font-weight-bold mb-1 mt-2\"\n                >\n                    Destination\n                </Label>\n                <Input\n                    style={selectOptionStyle}\n                    type=\"select\"\n                    name=\"select\"\n                    id=\"navigate-dest\"\n                >\n                    {locationList.map((location) => {\n                        return (\n                            <option key={location.id} style={selectOptionStyle}>\n                                {location.id}\n                            </option>\n                        );\n                    })}\n                </Input>\n            </div>\n            <Button\n                className=\"mt-2\"\n                color=\"primary\"\n                style={{\n                    fontSize: 10,\n                }}\n                onClick={() => {\n                    startTrip(\n                        document.getElementById('navigate-origin').value,\n                        document.getElementById('navigate-dest').value\n                    );\n                }}\n            >\n                Navigate\n            </Button>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => ({\n    locationList: [],\n    // locationList: state.mapData ? Object.values(state.mapData.locations) : [],\n});\n\nexport default connect(mapStateToProps)(NavigateSection);\n","import React from 'react';\nimport MenuSection from './MenuSection';\nimport SelectedDisplay from './SelectedDisplay';\nimport NavigateSection from './NavigateSection';\nimport MapStats from './MapStats';\nimport { connect } from 'react-redux';\nimport { actionCreators, reduxConstants } from '../redux/actions';\nimport { Button } from 'reactstrap';\n\nfunction Menu({\n    socket,\n    showToggleDynamicLabels,\n    curMode,\n    showDynamicLabels,\n    dispatch,\n}) {\n    const startTrip = (startWaypointId, endWaypointId) => {\n        if (socket) {\n            socket.emit('start-trip', {\n                originId: startWaypointId,\n                destinationId: endWaypointId,\n            });\n        }\n    };\n    return (\n        <div\n            style={{\n                background: '#ffffffcc',\n                margin: 10,\n                display: 'flex',\n                flexDirection: 'column',\n                flexWrap: 'wrap',\n                justifyContent: 'space-between',\n                width: 300,\n                position: 'fixed',\n                borderRadius: 5,\n            }}\n        >\n            <MenuSection sectionName=\"Selected Component\">\n                <SelectedDisplay />\n            </MenuSection>\n            <MenuSection sectionName=\"Start a Trip\">\n                {/* <NavigateSection /> */}\n            </MenuSection>\n            <MenuSection sectionName=\"Map Stats\">\n                <MapStats />\n            </MenuSection>\n            <MenuSection sectionName=\"Menu Settings\">\n                {showToggleDynamicLabels && (\n                    <div\n                        style={{\n                            display: 'flex',\n                            flexDirection: 'row',\n                            alignItems: 'center',\n                            alignContent: 'center',\n                        }}\n                        className=\"my-1\"\n                    >\n                        <input\n                            type=\"checkbox\"\n                            id=\"show-lables-chkbox\"\n                            className=\"mr-1\"\n                            checked={showDynamicLabels}\n                            onChange={(event) => {\n                                dispatch(\n                                    actionCreators.setShowDynamicLabels(\n                                        event.target.checked\n                                    )\n                                );\n                            }}\n                        />\n                        <label\n                            htmlFor=\"show-labels-chkbox\"\n                            className=\"m-0\"\n                            onClick={(e) => {\n                                dispatch(\n                                    actionCreators.setShowDynamicLabels(\n                                        !showDynamicLabels\n                                    )\n                                );\n                            }}\n                            style={{\n                                userSelect: 'none',\n                                fontSize: 10,\n                            }}\n                        >\n                            Toggle Vehicle Labels\n                        </label>\n                    </div>\n                )}\n                <div>\n                    <Button\n                        color=\"link\"\n                        style={{\n                            fontSize: 10,\n                            padding: 0,\n                        }}\n                        onClick={() => {\n                            if (\n                                curMode ===\n                                reduxConstants.APP_MODE_LIST.CREATE_MAP\n                            ) {\n                                dispatch(\n                                    actionCreators.setCurMode(\n                                        reduxConstants.APP_MODE_LIST.VIEW_MAP\n                                    )\n                                );\n                            } else {\n                                dispatch(\n                                    actionCreators.setCurMode(\n                                        reduxConstants.APP_MODE_LIST.CREATE_MAP\n                                    )\n                                );\n                            }\n                        }}\n                    >\n                        {curMode === reduxConstants.APP_MODE_LIST.CREATE_MAP\n                            ? 'Switch to View Mode'\n                            : 'Switch to Create Mode'}\n                    </Button>\n                </div>\n            </MenuSection>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        selectedComponent: state.selectedComponent,\n        hoveredComponent: state.hoveredComponent,\n        showToggleDynamicLabels: state.showToggleDynamicLabels,\n        curMode: state.curMode,\n        showDynamicLabels: state.showLabels.dynamic,\n    };\n};\n\nexport default connect(mapStateToProps)(Menu);\n","import React, { useEffect } from 'react';\nimport Map from './Map';\nimport { useRef, useState } from 'react';\nimport Utils from '../utils/Utils';\nimport SelectedDisplay from './SelectedDisplay';\nimport constants from '../constants';\nimport ComponentFinder from '../builder/ComponentFinder';\nimport MapStats from './MapStats';\nimport { Button } from 'reactstrap';\nimport LowFpsModal from './LowFpsModal';\nimport MenuSection from './MenuSection';\nimport NavigateSection from './NavigateSection';\nimport { actionCreators, reduxConstants } from '../redux/actions';\nimport { connect } from 'react-redux';\nimport Menu from './Menu';\n\nfunction MapViewer({\n    onMouseMove,\n    onMouseDown,\n    curPointerRadius,\n    curPointerComponentId,\n    cursorStyle,\n    socket,\n    averageUpdatesPerSecond,\n    curMode,\n    selectedComponent,\n    hoveredComponent,\n    dispatch,\n    showToggleDynamicLabelOption,\n    showDynamicLabels,\n    showLowFpsWarning,\n    mapDataLoaded,\n}) {\n    const containerRef = useRef(null);\n\n    useEffect(() => {\n        if (socket) {\n            const startTripResListener = (startTripRes) => {\n                if (startTripRes) {\n                    dispatch(actionCreators.setCurTripVehicle(startTripRes));\n                    console.log(startTripRes);\n                }\n            };\n            socket.on('start-trip-res', startTripResListener);\n            return () => {\n                socket.off('start-trip-res', startTripResListener);\n            };\n        }\n    }, [socket]);\n\n    const getMapCoordinatesFromMouseEvent = (event) => {\n        const { pageX, pageY } = event;\n        const canvasCoordinates = [\n            pageX - Utils.canvasOffsetLeft,\n            pageY - Utils.canvasOffsetTop,\n        ];\n        return Utils.unmapArrayCoord(canvasCoordinates);\n    };\n\n    useEffect(() => {\n        if (averageUpdatesPerSecond < 20 && showDynamicLabels) {\n            dispatch(actionCreators.setShowFpsWarning(true));\n        }\n    }, [averageUpdatesPerSecond, showDynamicLabels]);\n\n    const mouseMoveHandler = (event) => {\n        if (\n            mapDataLoaded &&\n            containerRef &&\n            containerRef.current &&\n            Utils.ready\n        ) {\n            const mapCoordinates = getMapCoordinatesFromMouseEvent(event);\n            if (onMouseMove) {\n                onMouseMove(mapCoordinates);\n            }\n            const curHoveredComponent = ComponentFinder.findComponent(\n                mapCoordinates,\n                curPointerRadius,\n                [curPointerComponentId]\n            );\n            if (\n                (hoveredComponent ? hoveredComponent.id : hoveredComponent) !==\n                (curHoveredComponent\n                    ? curHoveredComponent.id\n                    : curHoveredComponent)\n            ) {\n                dispatch(\n                    actionCreators.setHoveredComponent(curHoveredComponent)\n                );\n            }\n        }\n    };\n\n    const mouseDownHandler = (event) => {\n        if (containerRef && containerRef.current && Utils.ready) {\n            const mapCoordinates = getMapCoordinatesFromMouseEvent(event);\n\n            if (onMouseDown) {\n                onMouseDown(mapCoordinates);\n            }\n\n            if (\n                !selectedComponent ||\n                (hoveredComponent &&\n                    selectedComponent.id !== hoveredComponent.id)\n            ) {\n                dispatch(actionCreators.setSelectedComponent(hoveredComponent));\n            }\n        }\n    };\n\n    return (\n        <div>\n            {showLowFpsWarning && (\n                <LowFpsModal\n                    isOpen={showLowFpsWarning}\n                    setIsOpen={(open) => {\n                        dispatch(actionCreators.setShowFpsWarning(open));\n                    }}\n                />\n            )}\n            <Menu socket={socket} />\n            <div\n                onMouseMove={mouseMoveHandler}\n                onMouseDown={mouseDownHandler}\n                ref={containerRef}\n                style={{\n                    cursor: cursorStyle\n                        ? cursorStyle\n                        : hoveredComponent\n                        ? 'pointer'\n                        : 'move',\n                }}\n            >\n                <Map />\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        curMode: state.curMode,\n        mapDataLoaded: state.mapDataLoaded,\n        averageUpdatesPerSecond: state.averageUpdatesPerSecond,\n        selectedComponent: state.selectedComponent,\n        hoveredComponent: state.hoveredComponent,\n        showDynamicLabels: state.showLabels.dynamic,\n        showLowFpsWarning: state.showLowFpsWarning,\n    };\n};\n\nexport default connect(mapStateToProps)(MapViewer);\n","import React, { useState, useRef, useEffect } from 'react';\nimport { Button, Container, Input, Card, CardBody, Alert } from 'reactstrap';\nimport MapViewer from './MapViewer';\nimport constants from '../constants';\nimport Utils from '../utils/Utils';\nimport rawMapData from './test.json';\nimport { actionCreators } from '../redux/actions';\nimport { connect } from 'react-redux';\n\nconst POINTER_TYPE = {\n    INTERSECTION: 'intersection',\n    LOCATION: 'location',\n    NONE: 'none',\n    ROAD: 'road',\n    SAVE_MAP: 'save_map',\n    DELETE: 'delete',\n};\n\nfunction MapBuilder() {\n    const prevSavedMapData = useRef(\n        JSON.parse(localStorage.getItem('saved-map-data')) || rawMapData\n    );\n    const curPointerComponentId = useRef(null);\n    const [roadStartWaypointId, setRoadStartWaypointId] = useState(null);\n    const [roadType, setRoadType] = useState(null);\n    const [curHoverComponent, setCurHoverComponent] = useState(null);\n    const [curSelectComponent, setCurSelectComponent] = useState(null);\n    const [mapData, setMapData] = useState(rawMapData);\n    const [curPointerType, setCurPointerType] = useState(POINTER_TYPE.NONE);\n    const [saveMapData, setSaveMapData] = useState('');\n\n    const keyDownHandler = (event) => {\n        if (event.key === 'Escape') {\n            setCurPointerType(POINTER_TYPE.NONE);\n            curPointerComponentId.current = null;\n        }\n    };\n\n    useEffect(() => {\n        window.addEventListener('keydown', keyDownHandler);\n        return () => {\n            window.removeEventListener('keydown', keyDownHandler);\n        };\n    }, []);\n\n    const mouseMoveHandler = (mapCoordinates) => {\n        if (curPointerType === POINTER_TYPE.INTERSECTION) {\n            setMapData((prevMapData) => {\n                let nextIntersectionId = curPointerComponentId.current;\n                if (\n                    !nextIntersectionId ||\n                    !nextIntersectionId.includes('intersection')\n                ) {\n                    nextIntersectionId = `intersection_${Utils.generateShortUuid()}`;\n                }\n                curPointerComponentId.current = nextIntersectionId;\n                return {\n                    ...prevMapData,\n                    intersections: {\n                        ...prevMapData.intersections,\n                        [nextIntersectionId]: {\n                            id: nextIntersectionId,\n                            coord: mapCoordinates,\n                        },\n                    },\n                };\n            });\n        } else if (curPointerType === POINTER_TYPE.LOCATION) {\n            setMapData((prevMapData) => {\n                let nextLocationId = curPointerComponentId.current;\n                if (!nextLocationId || !nextLocationId.includes('location')) {\n                    nextLocationId = `location_${Utils.generateShortUuid()}`;\n                }\n                curPointerComponentId.current = nextLocationId;\n\n                return {\n                    ...prevMapData,\n                    locations: {\n                        ...prevMapData.locations,\n                        [nextLocationId]: {\n                            id: nextLocationId,\n                            coord: mapCoordinates,\n                        },\n                    },\n                };\n            });\n        } else {\n            setMapData(prevSavedMapData.current);\n            curPointerComponentId.current = null;\n        }\n    };\n\n    const mouseDownHandler = (mapCoordinates) => {\n        if (\n            curPointerType === POINTER_TYPE.INTERSECTION ||\n            curPointerType === POINTER_TYPE.LOCATION\n        ) {\n            if (!curHoverComponent) {\n                prevSavedMapData.current = mapData;\n                curPointerComponentId.current = null;\n            }\n        } else if (curPointerType === POINTER_TYPE.ROAD) {\n            if (curHoverComponent) {\n                if (!roadStartWaypointId) {\n                    // road start point\n                    setRoadStartWaypointId(curHoverComponent.id);\n                } else {\n                    // road end point\n                    const nextRoadId = `road_${Utils.generateShortUuid()}`;\n\n                    const newMapData = {\n                        ...prevSavedMapData.current,\n                        roads: {\n                            ...prevSavedMapData.current.roads,\n                            [nextRoadId]: {\n                                id: nextRoadId,\n                                type: roadType,\n                                start: roadStartWaypointId,\n                                end: curHoverComponent.id,\n                            },\n                        },\n                    };\n                    prevSavedMapData.current = newMapData;\n                    setMapData(newMapData);\n                    setRoadStartWaypointId(curHoverComponent.id);\n                }\n            }\n        } else if (curPointerType === POINTER_TYPE.DELETE) {\n            if (curHoverComponent) {\n                deleteComponent(curHoverComponent);\n            }\n        }\n    };\n\n    const lastSavedTime = useRef(performance.now());\n    useEffect(() => {\n        const now = performance.now();\n        if (now - lastSavedTime.current > 5000) {\n            localStorage.setItem('saved-map-data', getSerializedMap());\n            lastSavedTime.current = now;\n        }\n    }, [mapData]);\n\n    const getSerializedMap = () => {\n        const serializedMap = {\n            id: `map_${Utils.generateShortUuid()}`,\n            locations: prevSavedMapData.current.locations,\n            intersections: prevSavedMapData.current.intersections,\n            vehicles: {},\n            roads: prevSavedMapData.current.roads,\n        };\n        return JSON.stringify(serializedMap);\n    };\n\n    const saveMap = () => {\n        setCurPointerType(POINTER_TYPE.SAVE_MAP);\n        setSaveMapData(getSerializedMap());\n    };\n\n    const hoverComponentChangeHandler = (newHoverComponent) => {\n        setCurHoverComponent(newHoverComponent);\n    };\n\n    const selectComponentChangeHandler = (newSelectComponent) => {\n        setCurSelectComponent(newSelectComponent);\n    };\n\n    const deleteComponent = (deleteComponent) => {\n        if (deleteComponent && deleteComponent.id) {\n            const newMapData = JSON.parse(\n                JSON.stringify(prevSavedMapData.current)\n            );\n\n            if (newMapData.intersections[deleteComponent.id]) {\n                delete newMapData.intersections[deleteComponent.id];\n            }\n\n            if (newMapData.locations[deleteComponent.id]) {\n                delete newMapData.locations[deleteComponent.id];\n            }\n\n            for (const roadId of Object.keys(prevSavedMapData.current.roads)) {\n                if (\n                    prevSavedMapData.current.roads[roadId].start ===\n                        deleteComponent.id ||\n                    prevSavedMapData.current.roads[roadId].end ===\n                        deleteComponent.id\n                ) {\n                    delete newMapData.roads[roadId];\n                }\n            }\n\n            prevSavedMapData.current = newMapData;\n            curPointerComponentId.current = null;\n            setMapData(newMapData);\n        }\n    };\n\n    let curPointerRadius = 0;\n    if (curPointerType === POINTER_TYPE.LOCATION) {\n        curPointerRadius = constants.DISPLAY.LOCATION_RADIUS;\n    } else if (curPointerType === POINTER_TYPE.INTERSECTION) {\n        curPointerRadius = constants.DISPLAY.INTERSECTION_RADIUS;\n    }\n\n    let cursorStyle = null;\n    if (curPointerType === POINTER_TYPE.ROAD && roadStartWaypointId) {\n        cursorStyle = 'crosshair';\n    } else if (curPointerType === POINTER_TYPE.DELETE) {\n        cursorStyle = 'no-drop';\n    }\n\n    return (\n        <div className=\"mt-1\">\n            <div>\n                <Button\n                    color=\"primary\"\n                    className=\"m-1\"\n                    onClick={() => {\n                        setMapData(prevSavedMapData.current);\n                        setCurPointerType(POINTER_TYPE.LOCATION);\n                        curPointerComponentId.current = null;\n                    }}\n                >\n                    Add Location\n                </Button>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        setMapData(prevSavedMapData.current);\n                        setCurPointerType(POINTER_TYPE.INTERSECTION);\n                        curPointerComponentId.current = null;\n                    }}\n                    className=\"m-1\"\n                >\n                    Add Intersection\n                </Button>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        setMapData(prevSavedMapData.current);\n                        setCurPointerType(POINTER_TYPE.ROAD);\n                        setRoadType(constants.ROAD_TYPES.TYPES.MAJOR);\n                    }}\n                    className=\"m-1\"\n                >\n                    Build Major Road\n                </Button>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        setMapData(prevSavedMapData.current);\n                        setCurPointerType(POINTER_TYPE.ROAD);\n                        setRoadType(constants.ROAD_TYPES.TYPES.MINOR);\n                    }}\n                    className=\"m-1\"\n                >\n                    Build Minor Road\n                </Button>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        setMapData(prevSavedMapData.current);\n                        setCurPointerType(POINTER_TYPE.ROAD);\n                        setRoadType(constants.ROAD_TYPES.TYPES.LOCAL);\n                    }}\n                    className=\"m-1\"\n                >\n                    Build Local Road\n                </Button>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        setMapData(prevSavedMapData.current);\n                        setCurPointerType(POINTER_TYPE.DELETE);\n                        curPointerComponentId.current = null;\n                    }}\n                    className=\"m-1\"\n                >\n                    Delete Components\n                </Button>\n                <Button\n                    color=\"primary\"\n                    onClick={() => {\n                        setRoadStartWaypointId(null);\n                        setMapData(prevSavedMapData.current);\n                        setCurPointerType(POINTER_TYPE.NONE);\n                        curPointerComponentId.current = null;\n                    }}\n                    className=\"m-1\"\n                >\n                    Reset Pointer\n                </Button>\n                <Button color=\"success\" onClick={saveMap} className=\"m-1\">\n                    Save Map\n                </Button>\n            </div>\n            {curPointerType === POINTER_TYPE.SAVE_MAP && (\n                <Alert className=\"mt-2\">\n                    <div className=\"mb-2\">\n                        Copy the map data below to your clipboard.\n                    </div>\n                    <Input type=\"text\" value={saveMapData} readOnly={true} />\n                </Alert>\n            )}\n            <div>\n                <MapViewer\n                    mapData={mapData}\n                    onMouseMove={mouseMoveHandler}\n                    onMouseDown={mouseDownHandler}\n                    onHoverComponentChanged={hoverComponentChangeHandler}\n                    onSelectComponentChange={selectComponentChangeHandler}\n                    curPointerRadius={curPointerRadius}\n                    curPointerComponentId={curPointerComponentId.current}\n                    cursorStyle={cursorStyle}\n                />\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        curState: state.curState,\n    };\n};\n\nexport default connect(mapStateToProps)(MapBuilder);\n","import React, { useEffect, useState, useRef } from 'react';\nimport MapBuilder from './components/MapBuilder';\nimport MapViewer from './components/MapViewer';\nimport { connect } from 'react-redux';\nimport { actionCreators, actionTypes, reduxConstants } from './redux/actions';\nimport MapDataHandler from './utils/MapDataHandler';\n\nfunction App({ socket, curMode, dispatch }) {\n    useEffect(() => {\n        MapDataHandler.init(socket);\n        return () => {\n            MapDataHandler.cleanup(socket);\n            socket.disconnect();\n        };\n    }, []);\n\n    let Content;\n    if (curMode === reduxConstants.APP_MODE_LIST.VIEW_MAP) {\n        Content = <MapViewer socket={socket} />;\n    } else if (curMode === reduxConstants.APP_MODE_LIST.CREATE_MAP) {\n        Content = <MapBuilder />;\n    }\n\n    return <div className=\"App\">{Content}</div>;\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        curMode: state.curMode,\n    };\n};\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport io from 'socket.io-client';\nimport { Provider } from 'react-redux';\nimport { configureStore } from './redux/store';\n\nlet socketUrl = 'http://localhost:3001';\nif (process.env.NODE_ENV === 'production') {\n    socketUrl = 'https://auto-drive-simulator-api.herokuapp.com/';\n}\nconst socket = io(socketUrl);\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={configureStore()}>\n            <App socket={socket} />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}